---
http_interactions:
- request:
    method: get
    uri: http://127.0.0.1:4001/api/v1/jobs?query=backend
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - 127.0.0.1:4001
      User-Agent:
      - http.rb/5.0.4
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json
      Connection:
      - close
      Content-Length:
      - '81525'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 12 Dec 2021 07:34:09 GMT
- request:
    method: get
    uri: http://127.0.0.1:4001/
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - 127.0.0.1:4001
      User-Agent:
      - http.rb/5.0.4
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json
      Connection:
      - close
      Content-Length:
      - '75'
    body:
      encoding: ASCII-8BIT
      string: '{"status":"ok","message":"S-killer API v1 at /api/v1/ in development
        mode"}'
  recorded_at: Sun, 12 Dec 2021 09:05:31 GMT
- request:
    method: get
    uri: http://127.0.0.1:4001/api/v1/jobs
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - 127.0.0.1:4001
      User-Agent:
      - http.rb/5.0.4
  response:
    status:
      code: 422
      message: Unprocessable Entity
    headers:
      Content-Type:
      - application/json
      Connection:
      - close
      Content-Length:
      - '55'
    body:
      encoding: ASCII-8BIT
      string: '{"status":"cannot_process","message":"Invalid query: "}'
  recorded_at: Sun, 12 Dec 2021 09:32:04 GMT
recorded_with: VCR 6.0.0
