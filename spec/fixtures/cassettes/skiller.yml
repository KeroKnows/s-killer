---
http_interactions:
- request:
    method: get
    uri: http://127.0.0.1:4001/api/v1/jobs?query=backend%20engineer
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - 127.0.0.1:4001
      User-Agent:
      - http.rb/5.0.4
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json
      Connection:
      - close
      Content-Length:
      - '100024'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJxdWVyeSI6ImJhY2tlbmQgZW5naW5lZXIiLCJqb2JzIjpbeyJqb2JfaWQiOjQ0OTc2NjYzLCJkYl9pZCI6MTEzNCwidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIFVLIFJlbW90ZSAtIMKjMTIwayIsImRlc2NyaXB0aW9uIjoiIDxwPjxzdHJvbmc+U2VuaW9yIEJhY2tlbmQgRW5naW5lZXI8L3N0cm9uZz48YnIgLz5VcCB0byAmIzE2MzsxMjBrICYjNDM7IEVxdWl0eSAtIChSZW1vdGUgd29ya2luZyB3aXRoIDIgdmlzaXRzIHBlciBxdWFydGVyIHRvIExvbmRvbik8YnIgLz5TY2FsZSB1cCB3aXRoICQyMCBtaWxsaW9uIFNlcmllcyBBIGludmVzdG1lbnQ8YnIgLz5TZXQgdG8gZ3JvdyBieSA4NSYjNDM7IG92ZXIgbmV4dCAxOCBtb250aHM8L3A+IDxwPjxlbT5BcmUgeW91IGxvb2tpbmcgZm9yIHNvbWV0aGluZyBuZXcgdGhhdCBpcyBnb2luZyB0byBwdXNoIGFuZCBjaGFsbGVuZ2UgeW91PzwvZW0+PC9wPiA8cD48ZW0+RG8geW91IGhhdmUgYSBkZWVwIGtub3dsZWRnZSBhbmQgaW50ZXJlc3Qgd2l0aCBDb21wdXRlciBTY2llbmNlIGFuZCBNYXRoZW1hdGljYWwgbW9kZWxzPyA8L2VtPjwvcD4gPHA+Li4uIDxlbT5IYXZlIHlvdSBldmVyIHdvbmRlcmVkIGV4YWN0bHkgaG93IG11Y2ggaXQgd291bGQgY29zdCB0byBpbnN1cmUgQ3Jpc3RpYW5vIFJvbmFsZG8ncyBsZWdzPyBPciBhIFNwYWNlWCByb2NrZXQ/PC9lbT4gKEdlbnVpbmUgY2hhbGxlbmdlcyB0aGVpciB0ZWFtIGhhdmUgaGFkIHRvIGZhY2UpPC9wPiA8cD5UaGVzZSBmb2xrcyBoYXZlIGNyZWF0ZWQgYW4gYW5hbHl0aWNhbCBkYXRhIHBsYXRmb3JtIHRoYXQgY2FuIGhhcm5lc3MgZXZlbiB0aGUgbW9zdCBoaWdobHkgY29tcGxleCBkYXRhLi4uIGhlbHBpbmcgdGhlaXIgY3VzdG9tZXJzIHRvIHdvcmsgZmFzdGVyIGFuZCBtYWtlIGJldHRlciBpbmZvcm1lZCBkZWNpc2lvbnMgd2l0aCBpbnN1cmFuY2UuPC9wPiA8cD5TUjIgYXJlIGJleW9uZCBleGNpdGVkIHRvIGhhdmUgcGFydG5lcmVkIHdpdGggdGhpcyBicmFuZC1uZXcgY2xpZW50LCB0aGV5J3ZlIGJlZW4gaW4gb3VyIHNpZ2h0cyBmb3Igc29tZSB0aW1lIG5vdywgYW5kIHdlIGFyZSBub3cgc3VwcG9ydGluZyB0aGVtIHdpdGggYSBsYXJnZSBzY2FsZSBvZiBncm93dGggb3ZlciB0aGUgbmV4dCAxMi0yNCBtb250aHMuIEl0J3MgaW4gb3VyIEROQSB0byBsb3ZlIGFuZCBzdXBwb3J0IHN0YXJ0LXVwcyB3aG8gaGF2ZSAgYmlnIGRyZWFtcywgYW5kIHRoaXMgY29tcGFueSBoYXZlIHNvbWUgaHVnZSBhbWJpdGlvbnMsIGFscmVhZHkgc2VlaW5nIG1vdW50YWlucyBvZiBzdWNjZXNzIHdpdGhpbiB0aGVpciBmaXJzdCA0IHllYXJzLjwvcD4gPHA+Rm91bmRlZCBieSBoaWdobHkgcGFzc2lvbmF0ZSBjb21wdXRlciBzY2llbnRpc3RzIGFuZCBtYXRoZW1hdGljaWFucywgd2l0aCBhIGxvdmUgZm9yIGVuZ2luZWVyaW5nIGFuZCBjdXR0aW5nLWVkZ2UgdGVjaG5vbG9neS4gVGhleSB0b29rIHRoZWlyIHByb2R1Y3QgdG8gbWFya2V0IGFmdGVyIGp1c3QgMSB5ZWFyIGFuZCBhcmUgYmVpbmcgcmVjb2duaXNlZCBhcyBvbmUgb2YgdGhlIGhvdHRlc3QgU2FhUyBzY2FsZS11cHMgb24gdGhlIG1hcmtldCAgcmlnaHQgbm93LjwvcD4gPHA+Tm90IG9ubHkgaWYgdGhlaXIgcHJvZHVjdCBoaWdobHkgdW5pcXVlIGFuZCBvZmZlcnMgdGhlaXIgdGVhbSBpbnRlbGxlY3R1YWwgY2hhbGxlbmdlcyBldmVyeSBkYXksIGJ1dCB0aGV5IG9mZmVyIGEgcmljaCBjdWx0dXJlIGZvciB0aGVpciBlbXBsb3llZXMgYW5kIGFyZSBzZXQgb24gbWFpbnRhaW5pbmcgdGhhdCBhcyB0aGV5IHNjYWxlIHVwLiBUaGVpciBhcHByb2FjaCBhbmQgdGhlIHdheSB0aGF0IHRoZXkgd29yayBjYW4gb25seSBiZSBkZXNjcmliZWQgIGFzIGNvbGxhYm9yYXRpdmUsIGN1c3RvbWVyIGNlbnRyaWMsIGFnaWxlLCBhbmQgc3RyYXRlZ2ljITwvcD4gPHA+SWYgeW91IHRoaW5rIHRoaXMgc291bmQgbGlrZSB0aGUgc29ydCBvZiBvcHBvcnR1bml0eSB5b3UncmUgbG9va2luZyBmb3IgYW5kIHdvdWxkIGNvbnNpZGVyIHlvdXJzZWxmIGVpdGhlciBhICdULXNoYXBlZCcgb3IgJ0Z1bGwgU3RhY2sgZW5naW5lZXInIHdobyBpcyBhbHdheXMgbG9va2luZyB0byB1c2UgdGhlIHJpZ2h0IHRvb2wgZm9yIHRoZSBqb2IgYW5kIGhhdmUgYSBkZWVwIGxvdmUgYW5kIGludGVyZXN0IG9mIENvbXB1dGVyIFNjaWVuY2UgIG9yIE1hdGhlbWF0aWNzIHRoaXMgaXMgbW9zdCBkZWZpbml0ZWx5IHRoZSByb2xlIHlvdSdyZSBsb29raW5nIGZvci4gSWYgeW91J3JlIGN1cmlvdXMgYWJvdXQgd2hhdCB0aGVpciBzdGFjayBpbmNsdWRlczogS290bGluLCBKYXZhLCBHbywgUHl0aG9uLCBUZXJyYWZvcm0sIERvY2tlciwgUmVhY3QsIFJlZHV4LCBQb3N0Z3JlU1FMLCBBV1MsIEVsaywgVGhlaWEgYW5kIG1vcmUuPC9wPiA8cD48c3Ryb25nPkFyZSB5b3UgYSBTZW5pb3IgYmFja2VuZCBlbmdpbmVlcnMgd2hvIGNhbi4uLj88L3N0cm9uZz48L3A+IDx1bD4gPGxpPkNvbGxhYm9yYXRlIHdpdGggb3RoZXIgRW5naW5lZXJzLCBwcm9kdWN0IG1hbmFnZXJzLCBkZXNpZ25lcnMsIGFuZCBjdXN0b21lcnMgdG8gdW5kZXJzdGFuZCB0aGVpciBwcm9ibGVtIGFuZCBkZXZlbG9wIHRoZSBzb2x1dGlvbnMuPC9saT48bGk+QnVpbGQgcHJvZHVjdHMgd2l0aCBjb2RlIHRoYXQgaXMgdGhvdWdodGZ1bCwgdGVzdGVkLCB3ZWxsLXN0cnVjdHVyZWQgYW5kIG1lZXRzIHRoZSBoaWdoZXN0IHN0YW5kYXJkIG9mIHF1YWxpdHkuPC9saT48bGk+QnVpbGQgYW5kIG9wZXJhdGUgY2xvdWQtbmF0aXZlIGFwcGxpY2F0aW9ucyBhdCBzY2FsZSBmcm9tIGRlc2lnbiB0byBwcm9kdWN0aW9uLjwvbGk+PGxpPk1lbnRvciBhbmQgZ3VpZGUgbGVzcyBleHBlcmllbmNlZCBtZW1iZXJzIG9mIHRoZSB0ZWFtLjwvbGk+PGxpPkFsd2F5cyBiZSBsZWFybmluZyBhbmQgbG9va2luZyB0byBpbXByb3ZlIHRoZW1zZWx2ZXMsIGJ5IGV4cGVyaW1lbnRpbmcgYW5kIHBsYXlpbmcgd2l0aCBuZXcgdGVjaG5vbG9naWVzLjwvbGk+PC91bD4gPHA+PHN0cm9uZz5Zb3UnbGwgYWxzbyBuZWVkIHRvIGhhdmUgZXhwZXJpZW5jZSBpbiBhbmQgdW5kZXJzdGFuZCB0aGUgZm9sbG93aW5nLi4uPC9zdHJvbmc+PC9wPiA8dWw+IDxsaT5IYXZlIHN0cm9uZyBleHBlcmllbmNlIHVzaW5nIG9uZSBPUiBtb3JlIG9mIHRoZWlyIGJhY2tlbmQgbGFuZ3VhZ2VzIHN1Y2ggYXMgS290bGluLCBHb0xhbmcsIFB5dGhvbiBvciBKYXZhIGFuZCBoYXZlIGEgd2lsbGluZ25lc3MgdG8gdXNlIHRoZSByaWdodCB0b29sIGZvciB0aGUgam9iLjwvbGk+PGxpPkRlZXAgdW5kZXJzdGFuZGluZyBvZiBmdW5kYW1lbnRhbCBjb21wdXRlciBzY2llbmNlIGFuZCBzb2Z0d2FyZSBlbmdpbmVlcmluZyBwcmluY2lwbGVzIChhbGdvcml0aG1zLCBkYXRhIHN0cnVjdHVyZXMsIGNvbXBsZXhpdHksIGRlc2lnbiBwYXR0ZXJucywgYXJjaGl0ZWN0dXJlKS48YnIgLz48L2xpPjwvdWw+IDxwPlRoZXkgYXJlIG9ubHkgbG9va2luZyBmb3IgdGhlIGJlc3QgYW5kIGFyZSBvZmZlcmluZyBodWdlbHkgY29tcGV0aXRpdmUgc2FsYXJpZXMgb2YgdXAgdG8gJiMxNjM7MTIwLDAwMCBmb3IgU2VuaW9yIEVuZ2luZWVycywgYXMgd2VsbCBhcyBzb21lIHZlcnkgYXR0cmFjdGl2ZSBFcXVpdHkgb24gdG9wIG9mIHRoYXQuIFNvLCB0aGlzIGlzIG5vdCBhIHJvbGUgeW91J2xsIHdhbnQgdG8gbWlzcyBvdXQgb24hPGJyIC8+PGJyIC8+UGxlYXNlIGFwcGx5IHdpdGggeW91ciBDViBpZiB5b3UncmUgaW50ZXJlc3RlZCBpbiB0aGlzIGFuZCBJIHdpbGwgYmUgaW4gdG91Y2ggd2l0aCBtb3JlIGRldGFpbHMuIFlvdSBjYW4gYWxzbyBjb250YWN0IFN0ZXBoIEphY2tzb24gYXQgU1IyIGlmIHlvdSBoYXZlIGFueSBmdXJ0aGVyIHF1ZXN0aW9ucy48L3A+ICIsImxvY2F0aW9uIjoiQnJpc3RvbCIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTIwMDAwLjAsInllYXJfbWluIjoxMjAwMDAuMCwiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1iYWNrZW5kLWVuZ2luZWVyLXVrLXJlbW90ZS0xMjBrLzQ0OTc2NjYzIiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ0OTc2NTE0LCJkYl9pZCI6MTEzNSwidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIFVLIFJlbW90ZSAtIMKjMTIwayIsImRlc2NyaXB0aW9uIjoiIDxwPjxzdHJvbmc+U2VuaW9yIEJhY2tlbmQgRW5naW5lZXI8YnIgLz48L3N0cm9uZz48YnIgLz5VcCB0byAmIzE2MzsxMjBrICYjNDM7IEVxdWl0eSAtIChSZW1vdGUgd29ya2luZyB3aXRoIDIgdmlzaXRzIHBlciBxdWFydGVyIHRvIExvbmRvbik8YnIgLz5TY2FsZSB1cCB3aXRoICQyMCBtaWxsaW9uIFNlcmllcyBBIGludmVzdG1lbnQ8YnIgLz5TZXQgdG8gZ3JvdyBieSA4NSBoZWFkcyBvdmVyIG5leHQgMTggbW9udGhzPC9wPiA8cD48ZW0+QXJlIHlvdSBsb29raW5nIGZvciBzb21ldGhpbmcgbmV3IHRoYXQgaXMgZ29pbmcgdG8gcHVzaCBhbmQgY2hhbGxlbmdlIHlvdT88L2VtPjwvcD4gPHA+PGVtPkRvIHlvdSBoYXZlIGEgZGVlcCBrbm93bGVkZ2UgYW5kIGludGVyZXN0IHdpdGggQ29tcHV0ZXIgU2NpZW5jZSBhbmQgTWF0aGVtYXRpY2FsIG1vZGVscz8gPC9lbT48L3A+IDxwPi4uLiA8ZW0+SGF2ZSB5b3UgZXZlciB3b25kZXJlZCBleGFjdGx5IGhvdyBtdWNoIGl0IHdvdWxkIGNvc3QgdG8gaW5zdXJlIENyaXN0aWFubyBSb25hbGRvJ3MgbGVncz8gT3IgYSBTcGFjZVggcm9ja2V0PzwvZW0+IChHZW51aW5lIGNoYWxsZW5nZXMgdGhlaXIgdGVhbSBoYXZlIGhhZCB0byBmYWNlKTwvcD4gPHA+VGhlc2UgZm9sa3MgaGF2ZSBjcmVhdGVkIGFuIGFuYWx5dGljYWwgZGF0YSBwbGF0Zm9ybSB0aGF0IGNhbiBoYXJuZXNzIGV2ZW4gdGhlIG1vc3QgaGlnaGx5IGNvbXBsZXggZGF0YS4uLiBoZWxwaW5nIHRoZWlyIGN1c3RvbWVycyB0byB3b3JrIGZhc3RlciBhbmQgbWFrZSBiZXR0ZXIgaW5mb3JtZWQgZGVjaXNpb25zIHdpdGggaW5zdXJhbmNlLjwvcD4gPHA+U1IyIGFyZSBiZXlvbmQgZXhjaXRlZCB0byBoYXZlIHBhcnRuZXJlZCB3aXRoIHRoaXMgYnJhbmQtbmV3IGNsaWVudCwgdGhleSd2ZSBiZWVuIGluIG91ciBzaWdodHMgZm9yIHNvbWUgdGltZSBub3csIGFuZCB3ZSBhcmUgbm93IHN1cHBvcnRpbmcgdGhlbSB3aXRoIGEgbGFyZ2Ugc2NhbGUgb2YgZ3Jvd3RoIG92ZXIgdGhlIG5leHQgMTItMjQgbW9udGhzLiBJdCdzIGluIG91ciBETkEgdG8gbG92ZSBhbmQgc3VwcG9ydCBzdGFydC11cHMgd2hvIGhhdmUgIGJpZyBkcmVhbXMsIGFuZCB0aGlzIGNvbXBhbnkgaGF2ZSBzb21lIGh1Z2UgYW1iaXRpb25zLCBhbHJlYWR5IHNlZWluZyBtb3VudGFpbnMgb2Ygc3VjY2VzcyB3aXRoaW4gdGhlaXIgZmlyc3QgNCB5ZWFycy48L3A+IDxwPkZvdW5kZWQgYnkgaGlnaGx5IHBhc3Npb25hdGUgY29tcHV0ZXIgc2NpZW50aXN0cyBhbmQgbWF0aGVtYXRpY2lhbnMsIHdpdGggYSBsb3ZlIGZvciBlbmdpbmVlcmluZyBhbmQgY3V0dGluZy1lZGdlIHRlY2hub2xvZ3kuIFRoZXkgdG9vayB0aGVpciBwcm9kdWN0IHRvIG1hcmtldCBhZnRlciBqdXN0IDEgeWVhciBhbmQgYXJlIGJlaW5nIHJlY29nbmlzZWQgYXMgb25lIG9mIHRoZSBob3R0ZXN0IFNhYVMgc2NhbGUtdXBzIG9uIHRoZSBtYXJrZXQgIHJpZ2h0IG5vdy48L3A+IDxwPk5vdCBvbmx5IGlmIHRoZWlyIHByb2R1Y3QgaGlnaGx5IHVuaXF1ZSBhbmQgb2ZmZXJzIHRoZWlyIHRlYW0gaW50ZWxsZWN0dWFsIGNoYWxsZW5nZXMgZXZlcnkgZGF5LCBidXQgdGhleSBvZmZlciBhIHJpY2ggY3VsdHVyZSBmb3IgdGhlaXIgZW1wbG95ZWVzIGFuZCBhcmUgc2V0IG9uIG1haW50YWluaW5nIHRoYXQgYXMgdGhleSBzY2FsZSB1cC4gVGhlaXIgYXBwcm9hY2ggYW5kIHRoZSB3YXkgdGhhdCB0aGV5IHdvcmsgY2FuIG9ubHkgYmUgZGVzY3JpYmVkICBhcyBjb2xsYWJvcmF0aXZlLCBjdXN0b21lciBjZW50cmljLCBhZ2lsZSwgYW5kIHN0cmF0ZWdpYyE8L3A+IDxwPjxzdHJvbmc+U291bmQgZ29vZCB0byB5b3U/PC9zdHJvbmc+PC9wPiA8cD5JZiB5b3UgdGhpbmsgdGhpcyBzb3VuZCBsaWtlIHRoZSBzb3J0IG9mIG9wcG9ydHVuaXR5IHlvdSdyZSBsb29raW5nIGZvciBhbmQgd291bGQgY29uc2lkZXIgeW91cnNlbGYgZWl0aGVyIGEgJ1Qtc2hhcGVkJyBvciAnRnVsbCBTdGFjayBlbmdpbmVlcicgd2hvIGlzIGFsd2F5cyBsb29raW5nIHRvIHVzZSB0aGUgcmlnaHQgdG9vbCBmb3IgdGhlIGpvYiBhbmQgaGF2ZSBhIGRlZXAgbG92ZSBhbmQgaW50ZXJlc3Qgb2YgQ29tcHV0ZXIgU2NpZW5jZSAgb3IgTWF0aGVtYXRpY3MgdGhpcyBpcyBtb3N0IGRlZmluaXRlbHkgdGhlIHJvbGUgeW91J3JlIGxvb2tpbmcgZm9yLiBJZiB5b3UncmUgY3VyaW91cyBhYm91dCB3aGF0IHRoZWlyIHN0YWNrIGluY2x1ZGVzOiBLb3RsaW4sIEphdmEsIEdvLCBQeXRob24sIFRlcnJhZm9ybSwgRG9ja2VyLCBSZWFjdCwgUmVkdXgsIFBvc3RncmVTUUwsIEFXUyBhbmQgbW9yZS48L3A+IDxwPjxzdHJvbmc+QXJlIHlvdSBhIFNlbmlvciBiYWNrZW5kIGVuZ2luZWVycyB3aG8gY2FuLi4uPzwvc3Ryb25nPjwvcD4gPHVsPiA8bGk+Q29sbGFib3JhdGUgd2l0aCBvdGhlciBFbmdpbmVlcnMsIHByb2R1Y3QgbWFuYWdlcnMsIGRlc2lnbmVycywgYW5kIGN1c3RvbWVycyB0byB1bmRlcnN0YW5kIHRoZWlyIHByb2JsZW0gYW5kIGRldmVsb3AgdGhlIHNvbHV0aW9ucy48L2xpPjxsaT5CdWlsZCBwcm9kdWN0cyB3aXRoIGNvZGUgdGhhdCBpcyB0aG91Z2h0ZnVsLCB0ZXN0ZWQsIHdlbGwtc3RydWN0dXJlZCBhbmQgbWVldHMgdGhlIGhpZ2hlc3Qgc3RhbmRhcmQgb2YgcXVhbGl0eS48L2xpPjxsaT5CdWlsZCBhbmQgb3BlcmF0ZSBjbG91ZC1uYXRpdmUgYXBwbGljYXRpb25zIGF0IHNjYWxlIGZyb20gZGVzaWduIHRvIHByb2R1Y3Rpb24uPC9saT48bGk+TWVudG9yIGFuZCBndWlkZSBsZXNzIGV4cGVyaWVuY2VkIG1lbWJlcnMgb2YgdGhlIHRlYW0uPC9saT48bGk+QWx3YXlzIGJlIGxlYXJuaW5nIGFuZCBsb29raW5nIHRvIGltcHJvdmUgdGhlbXNlbHZlcywgYnkgZXhwZXJpbWVudGluZyBhbmQgcGxheWluZyB3aXRoIG5ldyB0ZWNobm9sb2dpZXMuPC9saT48L3VsPiA8cD48c3Ryb25nPllvdSdsbCBhbHNvIG5lZWQgdG8gaGF2ZSBleHBlcmllbmNlIGluIGFuZCB1bmRlcnN0YW5kIHRoZSBmb2xsb3dpbmcuLi48L3N0cm9uZz48L3A+IDx1bD4gPGxpPkhhdmUgc3Ryb25nIGV4cGVyaWVuY2UgdXNpbmcgb25lIE9SIG1vcmUgb2YgdGhlaXIgYmFja2VuZCBsYW5ndWFnZXMgc3VjaCBhcyBLb3RsaW4sIEdvTGFuZywgUHl0aG9uIG9yIEphdmEgYW5kIGhhdmUgYSB3aWxsaW5nbmVzcyB0byB1c2UgdGhlIHJpZ2h0IHRvb2wgZm9yIHRoZSBqb2IuPC9saT48bGk+RGVlcCB1bmRlcnN0YW5kaW5nIG9mIGZ1bmRhbWVudGFsIGNvbXB1dGVyIHNjaWVuY2UgYW5kIHNvZnR3YXJlIGVuZ2luZWVyaW5nIHByaW5jaXBsZXMgKGFsZ29yaXRobXMsIGRhdGEgc3RydWN0dXJlcywgY29tcGxleGl0eSwgZGVzaWduIHBhdHRlcm5zLCBhcmNoaXRlY3R1cmUpLjxiciAvPjwvbGk+PC91bD4gPHA+VGhleSBhcmUgb25seSBsb29raW5nIGZvciB0aGUgYmVzdCBhbmQgYXJlIG9mZmVyaW5nIGh1Z2VseSBjb21wZXRpdGl2ZSBzYWxhcmllcyBvZiB1cCB0byAmIzE2MzsxMjAsMDAwIGZvciBTZW5pb3IgRW5naW5lZXJzLCBhcyB3ZWxsIGFzIHNvbWUgdmVyeSBhdHRyYWN0aXZlIEVxdWl0eSBvbiB0b3Agb2YgdGhhdC4gU28sIHRoaXMgaXMgbm90IGEgcm9sZSB5b3UnbGwgd2FudCB0byBtaXNzIG91dCBvbiE8YnIgLz48YnIgLz5QbGVhc2UgYXBwbHkgd2l0aCB5b3VyIENWIGlmIHlvdSdyZSBpbnRlcmVzdGVkIGluIHRoaXMgYW5kIEkgd2lsbCBiZSBpbiB0b3VjaCB3aXRoIG1vcmUgZGV0YWlscy4gWW91IGNhbiBhbHNvIGNvbnRhY3QgU3RlcGggSmFja3NvbiBhdCBTUjIgaWYgeW91IGhhdmUgYW55IGZ1cnRoZXIgcXVlc3Rpb25zLjwvcD4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsieWVhcl9tYXgiOjEyMDAwMC4wLCJ5ZWFyX21pbiI6MTIwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItYmFja2VuZC1lbmdpbmVlci11ay1yZW1vdGUtMTIway80NDk3NjUxNCIsImlzX2Z1bGwiOnRydWV9LHsiam9iX2lkIjo0NDk3NDQwMywiZGJfaWQiOjExMzgsInRpdGxlIjoiQyMgRGV2ZWxvcGVyIC8gQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiQyMgRGV2ZWxvcGVyIC8gQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAoQyMgLk5ldCBTT0xJRCkgKkh5YnJpZCBXZkgqLiBBcmUgeW91IGEgdGVjaG5vbG9naXN0IHdpdGggc3Ryb25nIGJhY2tlbmQgQyMgLk5ldCBleHBlcmllbmNlPyBZb3UgY291bGQgYmUgcHJvZ3Jlc3NpbmcgeW91ciBjYXJlZXIsIHdvcmtpbmcgb24gY29tcGxleCBhbmQgaW50ZXJlc3Rpbmcgc3lzdGVtcyBhdCBhIGdsb2JhbCBJbnN1cmVUZWNoLjxiciAvPjxiciAvPkFzIGEgQyMgRGV2ZWxvcGVyIHlvdSdsbCBkZXNpZ24gYW5kIGRldmVsb3AgcmVhbC10aW1lIHByaWNpbmcgYW5kIHJpc2sgc3lzdGVtczsgcGxheWluZyBhIGtleSByb2xlIGluIGRldmVsb3BpbmcgbmV3IGZlYXR1cmVzIGFuZCBlbmhhbmNpbmcgZXhpc3RpbmcgY29kZS4gWW91J2xsIHdvcmsgYWNyb3NzIHRoZSBmdWxsIGRldmVsb3BtZW50IGxpZmVjeWNsZSBhcyBwYXJ0IG9mIGEgY29sbGFib3JhdGl2ZSBBZ2lsZSB0ZWFtIHVzaW5nIFNPTElEIGRlc2lnbiAgcHJpbmNpcGxlcyB0aHJvdWdoIHRvIHVuaXQgdGVzdGluZzsgYXR0ZW5kaW5nIGRhaWx5IFNwcmludCBwbGFubmluZyBzZXNzaW9ucyBhbmQgY29sbGFib3JhdGl2ZWx5IHByb2JsZW0gc29sdmluZy4gPGJyIC8+PGJyIC8+WW91J2xsIGJlIHdvcmtpbmcgaW4gYSB0ZWNoIGRyaXZlbiBlbnZpcm9ubWVudCwgY29udGludWFsbHkgbGVhcm5pbmcgYW5kIGRldmVsb3BpbmcgeW91ciBza2lsbHMgd2l0aCBleGNlbGxlbnQgY2FyZWVyIHByb2dyZXNzaW9uIG9wcG9ydHVuaXRpZXM7IHlvdSdsbCBhbHNvIHBpY2sgdXAgdmFsdWFibGUga25vd2xlZGdlIG9mIGluc3VyYW5jZSAvIGZpbmFuY2lhbCBzb2Z0d2FyZSBzeXN0ZW1zLiA8YnIgLz48YnIgLz5UaGVyZSdzIGEgcmVtb3RlIGludGVydmlldyBwcm9jZXNzLCBmb2xsb3dpbmcgdGhhdCB5b3UnbGwgam9pbiBjb2xsZWFndWVzIGluIHRoZSBSZWlnYXRlIG9mZmljZSBzaXggdGltZXMgYSBtb250aCBmb3IgdGVhbSBtZWV0LXVwcyB3aXRoIHRoZSBtYWpvcml0eSBvZiB0aGUgdGltZSB3b3JrIGZyb20gaG9tZSAoaWYgZGVzaXJlZCkuPGJyIC8+PGJyIC8+UmVxdWlyZW1lbnRzOjxiciAvPipZb3UgaGF2ZSBzdHJvbmcgQyMgLk5ldCBiYWNrZW5kIC8gc2VydmVyc2lkZSBkZXZlbG9wbWVudCBleHBlcmllbmNlPGJyIC8+KllvdSBoYXZlIGEgc3Ryb25nIGtub3dsZWRnZSBvZiBDb21wdXRlciBTY2llbmNlIGZ1bmRhbWVudGFscyBzdWNoIGFzIE9iamVjdCBPcmllbnRhdGVkIFByb2dyYW1taW5nLCBEYXRhIFN0cnVjdHVyZXMsIEFsZ29yaXRobXMgYW5kIERlc2lnbiBQYXR0ZXJucyBpbmNsdWRpbmcgU09MSUQ8YnIgLz4qWW91IGhhdmUgQWdpbGUgdGVhbSBleHBlcmllbmNlIGFuZCBlbmpveSBjb2xsYWJvcmF0aXZlbHkgcHJvYmxlbSBzb2x2aW5nLCB3b3JraW5nIG9uIGNvbXBsZXggaXNzdWVzPGJyIC8+KllvdSdyZSBsaWtlbHkgdG8gYmUgZGVncmVlIGVkdWNhdGVkLCBDb21wdXRlciBTY2llbmNlIHByZWZlcnJlZDxiciAvPjxiciAvPkFzIGEgQyMgRGV2ZWxvcGVyIC8gQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB5b3Ugd2lsbCBlYXJuIGEgY29tcGV0aXRpdmUgc2FsYXJ5ICh0byAmIzE2Mzs4MGspIHBsdXMgYm9udXMgYW5kIGJlbmVmaXRzLjxiciAvPjxiciAvPkFwcGx5IG5vdyBvciBjYWxsIHRvIGZpbmQgb3V0IG1vcmUgYWJvdXQgdGhpcyBDIyBEZXZlbG9wZXIgLyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIChDIyAuTmV0IFNPTElEKSBvcHBvcnR1bml0eS4iLCJsb2NhdGlvbiI6IlJlaWdhdGUiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjgwMDAwLjAsInllYXJfbWluIjo2NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYy1kZXZlbG9wZXItYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci80NDk3NDQwMyIsImlzX2Z1bGwiOnRydWV9LHsiam9iX2lkIjo0NDkwMjkzNiwiZGJfaWQiOjExNDcsInRpdGxlIjoiQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciBKYXZhIFNwcmluZ0Jvb3QiLCJkZXNjcmlwdGlvbiI6IkJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgLyBEZXZlbG9wZXIgKEphdmEgU3ByaW5nQm9vdCBtaWNyb3NlcnZpY2VzKSAqSHlicmlkIFdmSCouIFdvdWxkIHlvdSBsaWtlIHRvIHdvcmsgb24gYSBtb2Rlcm4gbWljcm9zZXJ2aWNlcyB0ZWNoIHN0YWNrIHdpdGggb3Bwb3J0dW5pdGllcyB0byBleHBlcmltZW50IGFuZCB0cnkgbmV3IHRoaW5ncyBpbiBhIHN1cHBvcnRpdmUgQWdpbGUgZW52aXJvbm1lbnQ/IFlvdSBjb3VsZCBiZSBqb2luaW5nICBhIG1hcmtldCBsZWFkaW5nLCByZXNwb25zaWJsZSBvbmxpbmUgZ2FtaW5nIC8gZ2FtYmxpbmcgc2l0ZS48YnIgLz48YnIgLz5BcyBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgeW91IHdpbGwgam9pbiBhIGNyb3NzIGZ1bmN0aW9uYWwgQWdpbGUgZGV2ZWxvcG1lbnQgdGVhbSB3aXRoIGEgZm9jdXMgb24gYnVpbGRpbmcgbWljcm9zZXJ2aWNlcy4gWW91IHdpbGwgd29yayBhY3Jvc3MgdGhlIGZ1bGwgc29mdHdhcmUgZGV2ZWxvcG1lbnQgbGlmZWN5Y2xlLCBjb2xsYWJvcmF0aXZlbHkgcHJvYmxlbSBzb2x2aW5nIGluIGRlc2lnbiBkaXNjdXNzaW9ucyB0byBmaW5kIHRoZSBiZXN0ICBwb3NzaWJsZSBlbmdpbmVlcmluZyBzb2x1dGlvbiwgeW91J2xsIGhhdmUgZXhwb3N1cmUgdG8gYSB3aWRlIHJhbmdlIG9mIHByb2plY3RzIHdpdGggdGVjaG5pY2FsIG93bmVyc2hpcCBvZiBjb21wb25lbnRzIGFuZCBjYW4gYWxzbyBnYWluIGV4cG9zdXJlIHRvIGZyb250IGVuZCBkZXZlbG9wbWVudCBpZiBkZXNpcmVkLiA8YnIgLz5UaGVyZSdzIGEgbW9kZXJuIHRlY2ggc3RhY2sgaW5jbHVkaW5nIEphdmEsIFNwcmluZ0Jvb3QgYW5kIENJL0NEIHdpdGggb3ZlciAxNTAgbWljcm9zZXJ2aWNlcyBmb3IgdGhlIGNvcmUgcGxhdGZvcm0uIDxiciAvPjxiciAvPlRoZXJlJ3MgYSBoeWJyaWQgd29yayBmcm9tIHBvbGljeSwgeW91J2xsIGpvaW4gY29sbGVhZ3VlcyBpbiB0aGUgV2ltYmxlZG9uIG9mZmljZSAxIC0gMiBkYXlzIGEgd2VlayBmb3IgbWVldC11cHMgYW5kIGlubm92YXRpb24gc2Vzc2lvbnMuIDxiciAvPjxiciAvPlJlcXVpcmVtZW50czo8YnIgLz4qWW91J3JlIGEgc2tpbGxlZCBKYXZhIERldmVsb3BlciB3aXRoIHN0cm9uZyBtaWNyb3NlcnZpY2VzIGV4cGVyaWVuY2UgaW5jbHVkaW5nIFNwcmluZywgU3ByaW5nQm9vdCwgSk1TLCBIaWJlcm5hdGUsIEpTT048YnIgLz4qWW91IGJlbGlldmUgaW4gdGFraW5nIG93bmVyc2hpcCwgcHJvZHVjaW5nIGhpZ2ggcXVhbGl0eSwgd2VsbCB0ZXN0ZWQgY29kZSBhbmQgaGF2ZSBhIGdvb2Qga25vd2xlZGdlIG9mIHNvZnR3YXJlIGRldmVsb3BtZW50IGJlc3QgcHJhY3RpY2UgYW5kIENvbnRpbnVvdXMgRGVsaXZlcnk8YnIgLz4qWW91J3JlIGZhbWlsaWFyIHdpdGggQVdTPGJyIC8+KllvdSdyZSBjb2xsYWJvcmF0aXZlIGFuZCBoYXZlIGdyZWF0IGNvbW11bmljYXRpb24gc2tpbGxzPGJyIC8+PGJyIC8+QXMgYSBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIC8gRGV2ZWxvcGVyIHlvdSB3aWxsIGVhcm4gYSBjb21wZXRpdGl2ZSBzYWxhcnkgKHRvICYjMTYzOzc1aykgcGx1cyBiZW5lZml0cy48YnIgLz48YnIgLz5BcHBseSBub3cgb3IgY2FsbCB0byBmaW5kIG91dCBtb3JlIGFib3V0IHRoaXMgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAvIERldmVsb3BlciAoSmF2YSBTcHJpbmdCb290IG1pY3Jvc2VydmljZXMpIG9wcG9ydHVuaXR5LiIsImxvY2F0aW9uIjoiV2ltYmxlZG9uIiwic2FsYXJ5Ijp7InllYXJfbWF4Ijo3NTAwMC4wLCJ5ZWFyX21pbiI6NjUwMDAuMCwiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtc29mdHdhcmUtZW5naW5lZXItamF2YS1zcHJpbmdib290LzQ0OTAyOTM2IiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ0OTAyMzU4LCJkYl9pZCI6MTE0OSwidGl0bGUiOiJTZW5pb3IgU29mdHdhcmUgRW5naW5lZXIgQmFja2VuZCBHb2xhbmcgQysrIiwiZGVzY3JpcHRpb24iOiJTZW5pb3IgU29mdHdhcmUgRW5naW5lZXIgLyBCYWNrZW5kIERldmVsb3BlciAoR29sYW5nIEMmIzQzOyYjNDM7IEphdmEgUHl0aG9uKSAqUmVtb3RlIC8gSHlicmlkIFdmSCouIEFyZSB5b3UgYSB0ZWNobm9sb2dpc3Qgc2Vla2luZyBhIHJvbGUgd2hlcmUgeW91J2xsIGJlIGNoYWxsZW5nZWQsIGNvbGxhYm9yYXRpbmcgdG8gc29sdmUgcmVhbCB3b3JsZCBwcm9ibGVtcyBhbmQgY29udGludWFsbHkgbGVhcm5pbmcgb24gYSBtb2Rlcm4gdGVjaCBzdGFjaz8gWW91ICBjb3VsZCBiZSBqb2luaW5nIGEgZmFzdCBncm93aW5nIEZpblRlY2ggYmFua2luZyBzb2x1dGlvbnMgcHJvdmlkZXIgYW5kIGdhaW5pbmcgdmFsdWFibGUga25vd2xlZGdlIG9mIE9wZW4gQmFua2luZyB0ZWNobm9sb2d5LjxiciAvPjxiciAvPkFzIGEgU2VuaW9yIFNvZnR3YXJlIEVuZ2luZWVyIHlvdSB3aWxsIGZvY3VzIG9uIHNvbHZpbmcgc29tZSBvZiB0aGUgY29tcGFueSdzIG1vc3QgY2hhbGxlbmdpbmcgYW5kIGNvbXBsZXggdGVjaG5vbG9neSBwcm9ibGVtczsgYXJjaGl0ZWN0aW5nIGFuZCBkZXNpZ25pbmcgbmV3IGZlYXR1cmVzIGFuZCBlbmhhbmNlbWVudHMgb24gdGhlIGNvcmUgT3BlbiBCYW5raW5nIEFQSSBmb2N1c3NlZCBwcm9kdWN0LiBZb3UnbGwgYmUgd29ya2luZyBvbiBoaWdobHkgIHNjYWxhYmxlLCBwZXJmb3JtYW50LCByZWFsLXRpbWUsIGNvbXBsZXggc3lzdGVtcyAoQVBJcywgSFRUUCwgR1JQQykgd2l0aGluIGEgY29udGFpbmVyaXNlZCBtaWNyb3NlcnZpY2VzIGVudmlyb25tZW50IGVuY29tcGFzc2luZyBEb2NrZXIsIEt1YmVybmV0ZXMgYW5kIEFXUy4gPGJyIC8+PGJyIC8+WW91J2xsIGJlIGFuIGludGVncmFsIHBhcnQgb2YgYW4gQWdpbGUgdGVhbSB1c2luZyBQYWlyIFByb2dyYW1taW5nIHRvIGNyYWZ0IHdlbGwgdGVzdGVkIHNvZnR3YXJlIHdpdGggU09MSUQgZGVzaWduIHByaW5jaXBsZXMsIHRha2luZyB0ZWNobmljYWwgb3duZXJzaGlwIGFuZCBwcm92aWRpbmcgbWVudG9yaW5nIHRvIG1vcmUganVuaW9yIHRlYW0gbWVtYmVycyAobm8gZGlyZWN0IHJlcG9ydHMpLjxiciAvPjxiciAvPlRoZSBjb21wYW55IGlzIGN1cnJlbnRseSBhYmxlIHRvIG9mZmVyIGEgcmVtb3RlIGludGVydmlldyBhbmQgb25ib2FyZGluZyBwcm9jZXNzIGFzIHdlbGwgYXMgdGhlIGFiaWxpdHkgdG8gd29yayBmdWxsLXRpbWUgZnJvbSBob21lIGZvciB0aGUgZm9yZXNlZWFibGUgd2l0aCBwbGFucyB0byByZXR1cm4gdG8gdGhlIG9mZmljZSBpbiBFYXN0IExvbmRvbiBpbiB0aGUgY29tcGluZyBtb250aHMsIHRoZXJlJ3MgY29udGludWVkIGZsZXhpYmlsaXR5IHRvICB3b3JrIGZyb20gaG9tZSBmdWxsLXRpbWUgKHJlbW90ZWx5IGluIHRoZSBVSykgb3Igam9pbiBjb2xsZWFndWVzIGluIHRoZSBvZmZpY2UgYXMgb2Z0ZW4gYXMgZGVzaXJlZC48YnIgLz48YnIgLz5SZXF1aXJlbWVudHM6PGJyIC8+KllvdSBoYXZlIGEgc3Ryb25nIHNvZnR3YXJlIGVuZ2luZWVyaW5nIGV4cGVyaWVuY2UgKGxpa2VseSB0byBoYXZlIGEgYmFja2dyb3VuZCB3aXRoIEMgLyBDJiM0MzsmIzQzOywgSmF2YSBvciBQeXRob24pPGJyIC8+KllvdSBoYXZlIGNvbW1lcmNpYWwgR28gLyBHb2xhbmcgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZSBhcmUgaGFwcHkgdG8gdXNlIHRoaXMgZ29pbmcgZm9yd2FyZDxiciAvPipZb3UgaGF2ZSBhIHRob3JvdWdoIHVuZGVyc3RhbmRpbmcgb2YgQ29tcHV0ZXIgU2NpZW5jZSBmdW5kYW1lbnRhbHMgaW5jbHVkaW5nIE9PUCwgRGVzaWduIFBhdHRlcm5zIGFuZCBEYXRhIFN0cnVjdHVyZXM8YnIgLz4qWW91IGhhdmUgYSBnb29kIGtub3dsZWRnZSBvZiBTT0xJRCBkZXNpZ24gcHJpbmNpcGxlczsgQVBJIGRlc2lnbiBhbmQgbWljcm9zZXJ2aWNlcyBlbnZpcm9ubWVudHMgPGJyIC8+KllvdSBoYXZlIGEgZ2VudWluZSBlbnRodXNpYXNtIGZvciB0ZWNobm9sb2d5LCB5b3UnbGwgbGlrZWx5IGF0dGVuZCBjb25mZXJlbmNlcywgdGVjaCBtZWV0LXVwcyBhbmQgcmVhZCAvIHdyaXRlIGJsb2dzPGJyIC8+KllvdSdyZSBjb2xsYWJvcmF0aXZlIHdpdGggc3Ryb25nIGNvbW11bmljYXRpb24gc2tpbGxzLCBoYXBweSB0byBtZW50b3IgYW5kIGNvYWNoPGJyIC8+PGJyIC8+QXMgYSBTZW5pb3IgU29mdHdhcmUgRW5naW5lZXIgeW91IHdpbGwgZWFybiBhIGNvbXBldGl0aXZlIHNhbGFyeSAodG8gJiMxNjM7MTEwaykgcGx1cyBiZW5lZml0cyBpbmNsdWRpbmcgbmV3IE1hY0Jvb2sgUHJvIGFuZCAmIzE2Mzs1MDAgcC9hbm51bSB0byBhdHRlbmQgY29uZmVyZW5jZXMgLyBtZWV0LXVwcyAvIHNlbGYtZGV2ZWxvcG1lbnQgYW5kIHNoYXJlIG9wdGlvbnMuPGJyIC8+PGJyIC8+QXBwbHkgbm93IG9yIGNhbGwgdG8gZmluZCBvdXQgbW9yZSBhYm91dCB0aGlzIFNlbmlvciBTb2Z0d2FyZSBFbmdpbmVlciAoR29sYW5nIEMmIzQzOyYjNDM7IEphdmEgUHl0aG9uKSBvcHBvcnR1bml0eS4iLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTEwMDAwLjAsInllYXJfbWluIjo5MDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc2VuaW9yLXNvZnR3YXJlLWVuZ2luZWVyLWJhY2tlbmQtZ29sYW5nLWMvNDQ5MDIzNTgiLCJpc19mdWxsIjp0cnVlfSx7ImpvYl9pZCI6NDQ4OTcwNjMsImRiX2lkIjoxMTU2LCJ0aXRsZSI6IkJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgQyMgLk5ldCBDb3JlIG1pY3Jvc2VydmljZXMiLCJkZXNjcmlwdGlvbiI6IkJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgLyBEZXZlbG9wZXIgKC5OZXQgQ29yZSBtaWNyb3NlcnZpY2VzIEFXUyBTUUwpICpIeWJyaWQgV2ZIKi4gRG8geW91IGhhdmUgZXhwZXJ0aXNlIHdpdGggYmFja2VuZCAuTmV0IGRldmVsb3BtZW50PyBZb3UgY291bGQgYmUgcHJvZ3Jlc3NpbmcgeW91ciBjYXJlZXIgd29ya2luZyBvbiBjb21wbGV4IGFuZCBjaGFsbGVuZ2luZyAmcXVvdDt0ZWNoIGZvciBnb29kJnF1b3Q7IHN5c3RlbXMgd2l0aGluIGEgc3VjY2Vzc2Z1bCAgYW5kIGdyb3dpbmcgSGVhbHRoVGVjaCBjb21wYW55LjxiciAvPjxiciAvPkFzIGEgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB5b3UnbGwgZGVzaWduIGFuZCBkZXZlbG9wIG5ldyBmZWF0dXJlcyBhbmQgZW5oYW5jZW1lbnRzIHRvIHRoZSBjb21wYW55J3MgY29yZSBwcm9kdWN0IHRoYXQgdXRpbGlzZXMgQ29tcHV0ZXIgVmlzaW9uIGNvbmNlcHRzIHRvIG1hcCB0aGUgdXNlcnMgc2tlbGV0b247IGl0J3MgYmVpbmcgdXNlZCBieSBkb2N0b3JzIHRvIGhlbHAgbWFrZSBhY2N1cmF0ZSBkaWFnbm9zaXMgb2YgdmFyaW91cyBjb25kaXRpb25zLCAgdGhlcmUncyBhbHNvIGEgbmV3IFNhYVMgcHJvZHVjdCB0aGF0IGlzIHVzZWQgYnkgbGFyZ2UgY29ycG9yYXRlIGNsaWVudHMgdG8gZW5zdXJlIHRoZSB3ZWxsLWJlaW5nIG9mIHRoZWlyIHJlbW90ZSB3b3JrZXJzIGJ5IGFuYWx5c2luZyBzaXR0aW5nIC8gd29ya2luZyBwb3NpdGlvbnMgdG8gaW1wcm92ZSBvbiBob21lIHdvcmtpbmcgY29uZGl0aW9ucy4gPGJyIC8+PGJyIC8+WW91J2xsIGJlIGpvaW5pbmcgYSBzbWFsbCwgZnJpZW5kbHkgdGVhbSBidXQgd2lsbCBiZSBhYmxlIHRvIHdvcmsgd2l0aCBhIGdyZWF0IGRlYWwgb2YgYXV0b25vbXksIHRha2luZyBvd25lcnNoaXAgb2YgbmV3IGZlYXR1cmVzIGFuZCBhZHZvY2F0aW5nIGJlc3QgcHJhY3RpY2UgdXNpbmcgQyMgLk5ldCBDb3JlIHdpdGggYSBUREQgaW4gYSBtaWNyb3NlcnZpY2VzLCBjbG91ZCBBV1MgZW52aXJvbm1lbnQuIFRoZXJlJ3MgYSByYW5nZSBvZiBuZXcgcHJvamVjdHMgIHRvIGdldCBpbnZvbHZlZCB3aXRoIGFuZCBleGNlbGxlbnQgY2FyZWVyIGdyb3d0aCBvcHBvcnR1bml0aWVzIGluIGxpbmUgd2l0aCB0aGUgY29tcGFueSdzIHRyYWplY3Rvcnkgb2YgZ3Jvd3RoLiA8YnIgLz48YnIgLz5UaGVyZSdzIGEgcmVtb3RlIGludGVydmlldyBwcm9jZXNzLCBmb2xsb3dpbmcgdGhpcyB5b3UnbGwgYmUgYmFzZWQgaW4gbW9kZXJuIG9mZmljZXMgaW4gYSB2aWJyYW50IGFyZWEgb2YgTm9ydGggTG9uZG9uIGZvciB0aHJlZSBkYXlzIGEgd2VlayB3aXRoIHRoZSBvdGhlciB0d28gd29yayBmcm9tIGhvbWUuPGJyIC8+PGJyIC8+UmVxdWlyZW1lbnRzOjxiciAvPipZb3UgaGF2ZSBzdHJvbmcgc2VydmVyc2lkZSBDIyAuTmV0IENvcmUgZGV2ZWxvcG1lbnQgc2tpbGxzIDxiciAvPipZb3UgaGF2ZSBhIGdvb2Qga25vd2xlZGdlIG9mIG1pY3Jvc2VydmljZXMgYW5kIGNsb3VkIGJhc2VkIHNlcnZpY2VzIHdpdGggQVdTPGJyIC8+KllvdSBoYXZlIGdvb2QgU1FMIHNraWxsczxiciAvPipZb3UncmUgY29sbGFib3JhdGl2ZSwgYWJsZSB0byB0YWtlIG93bmVyc2hpcCBhbmQgY29tbXVuaWNhdGUgaWRlYXMgPGJyIC8+KllvdSdyZSBrZWVuIHRvIHdvcmsgaW4gYSBzY2FsZS11cCBlbnZpcm9ubWVudCB3aGVyZSB5b3UgY2FuIG1ha2UgYSBkaWZmZXJlbmNlIGFuZCBxdWlja2x5IHByb2dyZXNzIHlvdXIgY2FyZWVyPGJyIC8+PGJyIC8+QXMgYSBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHlvdSB3aWxsIGVhcm4gYSBjb21wZXRpdGl2ZSBzYWxhcnkgKHRvICYjMTYzOzgwaykgcGx1cyBlcXVpdHkgYW5kIGJlbmVmaXRzLjxiciAvPjxiciAvPkFwcGx5IG5vdyBvciBjYWxsIHRvIGZpbmQgb3V0IG1vcmUgYWJvdXQgdGhpcyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIC8gRGV2ZWxvcGVyICguTmV0IENvcmUgQmFja2VuZCkgb3Bwb3J0dW5pdHkuIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsieWVhcl9tYXgiOjgwMDAwLjAsInllYXJfbWluIjo2NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci1jLW5ldC1jb3JlLW1pY3Jvc2VydmljZXMvNDQ4OTcwNjMiLCJpc19mdWxsIjp0cnVlfSx7ImpvYl9pZCI6NDQ5NDI0NzIsImRiX2lkIjoxMTY0LCJ0aXRsZSI6IkNvbnRyYWN0IE5vZGVKUyBEZXZlbG9wZXIgLSBTQyBDbGVhcmVkIiwiZGVzY3JpcHRpb24iOiIgPHA+PHN0cm9uZz5DT05UUkFDVCBCQUNLRU5EIERFVkVMT1BFUiAtIFNDIENMRUFSRUQ8L3N0cm9uZz48L3A+IDxwPjxzdHJvbmc+QlJBTkQgTkVXIENPTlRSQUNUIE9QUE9SVFVOSVRZIEFWQUlMQUJMRSBXSVRISU4gQSBHTE9CQUxMWSBMRUFESU5HIE5BVElPTkFMIFNFQ1VSSVRZIENPTVBBTlkgRk9SIEEgQ09OVFJBQ1QgQkFDS0VORCBERVZFTE9QRVIgV0lUSCBTQyBDTEVBUkFOQ0U8L3N0cm9uZz48L3A+IDx1bD4gPGxpPkNvbnRyYWN0IGpvYiBvcHBvcnR1bml0eSBmb3IgYSBiYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyPC9saT48bGk+TVVTVCBob2xkIFNDIGNsZWFyYW5jZTwvbGk+PGxpPkdsb2JhbGx5IGxlYWRpbmcgZGVmZW5jZSAvIGN5YmVyIHNlY3VyaXR5IGNvbXBhbnk8L2xpPjxsaT5HZW5lcm91cyBkYXkgcmF0ZTwvbGk+PGxpPjEyIG1vbnRoIG1pbmltdW0gcm9sbGluZyBjb250cmFjdDwvbGk+PGxpPkxvbmRvbiBiYXNlZCBvcmdhbmlzYXRpb24gaW4gYW4gZWFzaWx5IGFjY2Vzc2libGUgbG9jYXRpb248L2xpPjxsaT5UbyBhcHBseSBwbGVhc2UgY2FsbCBvciBlbWFpbCA8L2xpPjwvdWw+IDxwPjxzdHJvbmc+V0hPIFdFIEFSRT88L3N0cm9uZz48L3A+IDxwPldlIGFyZSByZWNydWl0aW5nIGEgU2VuaW9yIFNvZnR3YXJlIEVuZ2luZWVyIHRvIHdvcmsgd2l0aCBhIG11bHRpLW5hdGlvbmFsLCBpbmR1c3RyeSBsZWFkaW5nIG5hdGlvbmFsIHNlY3VyaXR5IGNvbXBhbnkgaW4gY2VudHJhbCBMb25kb24uIER1ZSB0byB0aGUgbmF0dXJlIG9mIHRoZSBjdXN0b21lciB5b3UgbXVzdCBob2xkIFNDIGNsZWFyYW5jZSB0aGF0IGhhcyBiZWVuIGlzc3VlZCB3aXRoaW4gdGhlIGxhc3QgMyB5ZWFycy48L3A+IDxwPjxzdHJvbmc+V0hBVCBXSUxMIFRIRSBCQUNLRU5EIERFVkVMT1BFUiBCRSBET0lORz88L3N0cm9uZz48L3A+IDxwPldlIGFyZSBsb29raW5nIGZvciBhIGJhY2tlbmQgc29mdHdhcmUgZW5naW5lZXIgdG8gd29yayBpbiBOb2RlSlMgZm9yIGEgbGFyZ2Ugc2VjdXJlIHByb2plY3QgaW4gTG9uZG9uLiBEdWUgdG8gdGhlIHNlbnNpdGl2ZSBuYXR1cmUgb2YgdGhlIHJvbGUgdGhlIHByb2plY3QgZGV0YWlscyB3aWxsIGJlIGRpc2N1c3NlZCB3aXRoIHlvdSBkaXJlY3RseS48L3A+IDxwPjxzdHJvbmc+V0UgTkVFRCBUSEUgQkFDS0VORCBERVZFTE9QRVIgVE8gSEFWReKApi48L3N0cm9uZz48L3A+IDx1bD4gPGxpPkN1cnJlbnQgU0MgY2xlYXJhbmNlPC9saT48bGk+Tm9kZUpTIGV4cGVyaWVuY2UgYXMgYSBiYWNrZW5kIGRldmVsb3BtZW50IGxhbmd1YWdlPC9saT48bGk+RXhwZXJpZW5jZSB3aXRoIERvY2tlcjwvbGk+PGxpPkV4cGVyaWVuY2Ugd2l0aCBNaWNyb3NlcnZpY2VzPC9saT48bGk+RXhwZXJpZW5jZSB3aXRoIE9wZW5TaGlmdCBvciBBV1M8L2xpPjwvdWw+IDxwPjxzdHJvbmc+VE8gQkUgQ09OU0lERVJFROKApi48L3N0cm9uZz48L3A+IDxwPlBsZWFzZSBlaXRoZXIgYXBwbHkgYnkgY2xpY2tpbmcgb25saW5lIG9yIGVtYWlsaW5nIG1lIGRpcmVjdGx5IHRvIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uIHBsZWFzZSBjYWxsIG1lIG9uIG9yIC4gSSBjYW4gbWFrZSBteXNlbGYgYXZhaWxhYmxlIG91dHNpZGUgb2Ygbm9ybWFsIHdvcmtpbmcgaG91cnMgdG8gc3VpdCBmcm9tIDdhbSB1bnRpbCAxMHBtLiBJZiB1bmF2YWlsYWJsZSwgcGxlYXNlIGxlYXZlIGEgbWVzc2FnZSBhbmQgZWl0aGVyIG15c2VsZiAgb3Igb25lIG9mIG15IGNvbGxlYWd1ZXMgd2lsbCByZXNwb25kLiBCeSBhcHBseWluZyBmb3IgdGhpcyByb2xlIHlvdSBnaXZlIGV4cHJlc3MgY29uc2VudCBmb3IgdXMgdG8gcHJvY2VzcyAmYW1wOyBzdWJtaXQgKHN1YmplY3QgdG8gcmVxdWlyZWQgc2tpbGxzKSB5b3VyIGFwcGxpY2F0aW9uIHRvIG91ciBjbGllbnQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGlzIHZhY2FuY3kgb25seS4gQWxzbyBmZWVsIGZyZWUgdG8gY29ubmVjdCB3aXRoIG1lIG9uIExpbmtlZEluLCAganVzdCBzZWFyY2ggRG9taW5pYyBCYXJiZXQuIEkgbG9vayBmb3J3YXJkIHRvIGhlYXJpbmcgZnJvbSB5b3UuPC9wPiA8cD48c3Ryb25nPkNPTlRSQUNUIEJBQ0tFTkQgU09GVFdBUkUgRU5HSU5FRVIgLSBTQyBDTEVBUkVEPC9zdHJvbmc+PC9wPiA8cD48c3Ryb25nPktFWSBTS0lMTFM6PC9zdHJvbmc+PC9wPiA8cD48c3Ryb25nPlNFTklPUiBTT0ZUV0FSRSBFTkdJTkVFUiAvIFNFTklPUiBTT0ZUV0FSRSBERVZFTE9QRVIgLyAvIExFQUQgU09GVFdBUkUgRU5HSU5FRVIgLyBTRU5JT1IgU09GVFdBUkUgRU5HSU5FRVIgLyBOT0RFIERFVkVMT1BFUiAvIE5PREVKUyBFTkdJTkVFUiAvIExFQUQgU09GVFdBUkUgREVWRUxPUEVSIC8gU0VOSU9SIFNPRlRXQVJFIERFVkVMT1BFUiAvIERWIENMRUFSRUQgLyBEViBDTEVBUkFOQ0UgLyBERVZFTE9QUEVEIFZFVFRJTkcgLyAgREVWRUxPUEVEIFZFVFRFRCAvIERFRVAgVkVUVElORyAvIERFRVAgVkVUVEVEIC8gU0MgQ0xFQVJFRCAvIFNDIENMRUFSQU5DRSAvIFNFQ1VSSVRZIENMRUFSRUQgLyBTRUNVUklUWSBDTEVBUkFOQ0U8L3N0cm9uZz48L3A+ICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7InllYXJfbWF4IjoxNjkwMDAuMCwieWVhcl9taW4iOjEwNDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvY29udHJhY3Qtbm9kZWpzLWRldmVsb3Blci1zYy1jbGVhcmVkLzQ0OTQyNDcyIiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ1MDE1OTkxLCJkYl9pZCI6MTMwMSwidGl0bGUiOiJCYWNrZW5kIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiIgPHA+QmFja2VuZCBFbmdpbmVlciAoSmF2YS9Lb3RsaW4vQyYjNDM7JiM0MzsvLk5ldC9SdXN0L1J1YnkpIC0gPHN0cm9uZz4mIzE2Mzs1NSwwMDAgLSAmIzE2Mzs2NSwwMDA8L3N0cm9uZz4gLSA8c3Ryb25nPihGdWxseSBSZW1vdGUpPC9zdHJvbmc+PC9wPiA8cD48c3Ryb25nPk5PIFNQT05TT1JTSElQPC9zdHJvbmc+PC9wPiA8cD48c3Ryb25nPkJhY2tlbmQgRW5naW5lZXI8L3N0cm9uZz4gZm9yIGEgPHN0cm9uZz5GaW50ZWNoPC9zdHJvbmc+IGFuZCA8c3Ryb25nPlJldGFpbCBzY2FsZS11cDwvc3Ryb25nPiBiYXNlZCBpbiA8c3Ryb25nPkxvbmRvbjwvc3Ryb25nPjwvcD4gPHA+U2FsYXJ5IC0gPHN0cm9uZz4mIzE2Mzs1NSwwMDAgLSAmIzE2Mzs2NSwwMDA8L3N0cm9uZz4gcGVyIGFubnVtICYjNDM7IDxzdHJvbmc+U2hhcmVzIDwvc3Ryb25nPiAmIzQzOyA8c3Ryb25nPmJlbmVmaXRzPC9zdHJvbmc+PC9wPiA8cD5Kb2IgdGl0bGU6IDxzdHJvbmc+QmFja2VuZCBFbmdpbmVlcjwvc3Ryb25nPjwvcD4gPHA+Sm9iIHR5cGU6IDxzdHJvbmc+UGVybWFuZW50PC9zdHJvbmc+PC9wPiA8cD5Mb2NhdGlvbjogPHN0cm9uZz5DZW50cmFsIExvbmRvbjwvc3Ryb25nPjwvcD4gPHA+V0ZIOiA8c3Ryb25nPlJlbW90ZSA8L3N0cm9uZz4oQ2FuIHdvcmsgaW4gb2ZmaWNlIGlmIHlvdSB3YW50KTwvcD4gPHA+U3RhcnQ6IDxzdHJvbmc+QVNBUDwvc3Ryb25nPjwvcD4gPHA+Sm9pbiBhIDxzdHJvbmc+RmludGVjaCA8L3N0cm9uZz5jb21wYW55IG9wZXJhdGluZyB3aXRoIGNsaWVudHMgaW4gdGhlIDxzdHJvbmc+IHJldGFpbCBtYXJrZXQ8L3N0cm9uZz4gd2hvIDxzdHJvbmc+cHJvdmlkZSBpbnNpZ2h0cyA8L3N0cm9uZz50byA8c3Ryb25nPnByb2R1Y2Ugc29sdXRpb25zPC9zdHJvbmc+IHRvIHRoZWlyIHByZXNzaW5nIGJ1c2luZXNzIGlzc3Vlcy4gVGhyb3VnaCB5b3VyIHdvcmsgeW91IHdpbGwgaGVscCB0aGUgZW5kIGNsaWVudCB3aXRoIDxzdHJvbmc+ZGVjaXNpb24gbWFraW5nPC9zdHJvbmc+IGluIDxzdHJvbmc+ZW5nYWdlbWVudDwvc3Ryb25nPiwgPHN0cm9uZz5yZXRlbnRpb248L3N0cm9uZz4sIDxzdHJvbmc+cmV0dXJuczwvc3Ryb25nPiwgYW5kIDxzdHJvbmc+ZnV0dXJlIHJldmVudWUgc3RyZWFtcy48L3N0cm9uZz48L3A+IDxwPllvdSB3aWxsIGJlIDxzdHJvbmc+aW50ZWdyYXRpbmcgc3lzdGVtczwvc3Ryb25nPiwgPHN0cm9uZz5idWlsZGluZyBjb3JlIHByb2R1Y3QgaW1wcm92ZW1lbnRzPC9zdHJvbmc+LCA8c3Ryb25nPm93bmluZyBwcm9qZWN0czwvc3Ryb25nPiBhbmQgY29uc3RhbnRseSBkZXZlbG9waW5nIGFzIHlvdSA8c3Ryb25nPnVwc2tpbGwgPC9zdHJvbmc+aW4gYSBjb21wYW55IHdpdGggYSA8c3Ryb25nPmNsZWFyIGNhcmVlciBwYXRod2F5IGZvciBncm93dGguPC9zdHJvbmc+PC9wPiA8cD5NdXN0IEhhdmVzOjwvcD4gPHVsPiA8bGk+PHN0cm9uZz4yJiM0MzsgeWVhcnMnIGNvbW1lcmNpYWwgZXhwZXJpZW5jZTwvc3Ryb25nPiB3aXRoIGEgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UsIGlkZWFsbHkgPHN0cm9uZz5Lb3RsaW48L3N0cm9uZz4gKDxzdHJvbmc+Sjwvc3Ryb25nPjxzdHJvbmc+YXZhLCBHbywgUnVzdCwgUnVieSwgLk5ldCwgQy9DJiM0MzsmIzQzOyA8L3N0cm9uZz5hcmUgc3Vic3RpdHV0ZXMpPC9saT48bGk+PHN0cm9uZz4xJiM0MzsgeWVhcnMnPC9zdHJvbmc+IHdvcmtpbmcgd2l0aCA8c3Ryb25nPmNsb3VkIGVudmlyb25tZW50czwvc3Ryb25nPjwvbGk+PGxpPlN0cm9uZyBleHBlcmllbmNlIHdvcmtpbmcgb24gPHN0cm9uZz5pbnRlZ3JhdGlvbiBhbmQgQVBJIHByb2plY3RzPC9zdHJvbmc+PC9saT48bGk+RXhwZXJ0IHdvcmtpbmcgd2l0aCA8c3Ryb25nPmRhdGFiYXNlczwvc3Ryb25nPjwvbGk+PGxpPlVuZGVyc3RhbmRpbmcgb2YgZW50aXJlIDxzdHJvbmc+c3lzdGVtIGluZnJhc3RydWN0dXJlPC9zdHJvbmc+IGFuZCBoYXMgZXhwZXJpZW5jZSA8c3Ryb25nPmJ1aWxkaW5nIGZyb20gc2NyYXRjaDwvc3Ryb25nPjwvbGk+PC91bD4gPHA+TmljZSB0byBoYXZlOjwvcD4gPHVsPiA8bGk+S25vd2xlZGdlIG9mIDxzdHJvbmc+SmF2YVNjcmlwdDwvc3Ryb25nPiBvciA8c3Ryb25nPlJlYWN0PC9zdHJvbmc+PC9saT48bGk+RXhwZXJpZW5jZSBpbiA8c3Ryb25nPlRlcnJhZm9ybTwvc3Ryb25nPjwvbGk+PC91bD4gPHA+QmVuZWZpdHM6PC9wPiA8dWw+IDxsaT48c3Ryb25nPkVxdWl0eSAtIHNoYXJlIG9wdGlvbnM8L3N0cm9uZz48L2xpPjxsaT48c3Ryb25nPlBlcnNvbmFsIERldmVsb3BtZW50IEZ1bmQ8L3N0cm9uZz4gb2YgdXAgdG8gPHN0cm9uZz4mIzE2MzsxLDIwMC95cjwvc3Ryb25nPiB0byA8c3Ryb25nPnVwc2tpbGwgPC9zdHJvbmc+eW91cnNlbGY8L2xpPjxsaT5TZXQtdXAgaW5jbHVkaW5nIDxzdHJvbmc+TWFjYm9vayBQcm88L3N0cm9uZz48L2xpPjxsaT48c3Ryb25nPiYjMTYzOzEsMjAwL3lyIGJ1ZGdldCB3aXRoIGNsaWVudHM8L3N0cm9uZz48L2xpPjxsaT48c3Ryb25nPjM2PC9zdHJvbmc+IGRheXMgSG9saWRheTwvbGk+PGxpPjxzdHJvbmc+TWVudGFsIEhlYWx0aCBzdXBwb3J0PC9zdHJvbmc+IGZyb20gcGFydG5lcjwvbGk+PGxpPjxzdHJvbmc+UGVyc29uYWwgZGF5czwvc3Ryb25nPiBmb3IgbWVudGFsIGhlYWx0aDwvbGk+PGxpPjxzdHJvbmc+RnVsbHkgcmVtb3RlPC9zdHJvbmc+IChkb2cgZnJpZW5kbHkgb2ZmaWNlIGVudmlyb25tZW50KTwvbGk+PC91bD4gPHA+PHN0cm9uZz5BcHBseSBOb3c8L3N0cm9uZz4hIFRoaXMgaXMgdGhlIDxzdHJvbmc+b3Bwb3J0dW5pdHkgPC9zdHJvbmc+dG8gPHN0cm9uZz4gZ3JvdyA8L3N0cm9uZz53aXRoIHRoZSBidXNpbmVzcyBpbiBhIDxzdHJvbmc+Zm9yZXZlciBjaHVybmluZyBtYXJrZXQhPC9zdHJvbmc+PC9wPiA8cD48c3Ryb25nPkVtYWlsIGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSByb2xlPC9zdHJvbmc+PC9wPiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJ5ZWFyX21heCI6NjUwMDAuMCwieWVhcl9taW4iOjU1MDAwLjAsImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9iYWNrZW5kLWVuZ2luZWVyLzQ1MDE1OTkxIiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ1MDE1NzMzLCJkYl9pZCI6MTMwMiwidGl0bGUiOiJCYWNrZW5kIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiIgPHA+PHN0cm9uZz5CQUNLRU5EIEVOR0lORUVSL1BZVEhPTiwgQVdTPC9zdHJvbmc+PC9wPiA8cD48c3Ryb25nPkxPTkRPTi9IWUJSSUQ8L3N0cm9uZz48L3A+IDxwPjxzdHJvbmc+JiMxNjM7NTAsMDAwLSYjMTYzOzYwLDAwMDwvc3Ryb25nPjwvcD4gPHA+PHN0cm9uZz5PVkVSVklFVzo8L3N0cm9uZz48L3A+IDxwPkhhcm5oYW0gaXMgd29ya2luZyB3aXRoIGEgc29jaWFsIG1lZGlhIGdhbWluZyBjb21wYW55IGJhc2VkIGluIExvbmRvbi4gVGhpcyBjYW5kaWRhdGUgd2lsbCBidWlsZCBTb2Z0d2FyZSBpbiBBV1MgYW5kIHdpbGwgYnVpbGQgZmFzdCBhbmQgYW1iaXRpb3VzIEFQSXMuIFlvdSdsbCBiZSB3b3JraW5nIHByaW1hcmlseSBpbiBQeXRob24gYnV0IGV4cGVyaWVuY2UgaW4gb3RoZXIgbGFuZ3VhZ2VzIHdpbGwgYmUgYmVuZWZpY2lhbC4gPC9wPiA8cD48c3Ryb25nPlRIRSBDT01QQU5ZOjwvc3Ryb25nPjwvcD4gPHA+T3VyIGNsaWVudCBoYXMgYW1iaXRpb3VzIHBsYW5zIHRvIGdyb3cgYW5kIGlzIGN1cnJlbnRseSB3b3JraW5nIG9uIGV4Y2l0aW5nIG5ldyBkZXZlbG9wbWVudHMuIE91ciBjbGllbnQgaXMgbG9va2luZyB0byBzaGFrZSB1cCB0aGUgbm9ybSBhbmQgYnJlYWsgdGhlIGN1cnJlbnQgYm91bmRhcmllcyB3aXRoaW4gdGhlIGdhbWluZyBpbmR1c3RyeSB0aHJvdWdoIHRoZSB1c2Ugb2YgYXVnbWVudGVkIHJlYWxpdHkgYW5kIGNvbXB1dGVyIHZpc2lvbi4gIFRoZXkgY3VycmVudGx5IHdvcmsgYXMgYSBIeWJyaWQgc3lzdGVtLCBjb25zaXN0aW5nIG9mIHJlbW90ZSBhbmQgb2ZmaWNlIHdvcmtpbmcuIDwvcD4gPHA+PHN0cm9uZz5USEUgUk9MRTogPC9zdHJvbmc+PC9wPiA8cD5BcyBhIEJhY2tlbmQgRW5naW5lZXIsIHlvdSB3aWxsIGFzc2lzdCBpbjogPC9wPiA8dWw+IDxsaT5CdWlsZGluZyBhbmQgb3duaW5nIHRoZSBBV1MgTGFtYmRhcyA8L2xpPjxsaT5CdWlsZCBmYXN0IGFuZCBhbWJpdGlvdXMgQVBJcyA8L2xpPjxsaT5Db2xsYWJvcmF0ZSB3aXRoIHRoZSBkYXRhIHRlYW0gdG8gZGV2ZWxvcCB0aGUgYW5hbHl0aWNzIHBpcGVuZSA8L2xpPjxsaT5GaW5kIG5ld3MgbWV0aG9kcyB0byBjb25uZWN0IHdpdGggdGhlIGZyb250ZW5kIGVjb3N5c3RlbXMgdGhyb3VnaCBBV1MgPC9saT48bGk+VXNpbmcgUHl0aG9uIGZvciBkZXZlbG9wbWVudDwvbGk+PC91bD4gPHA+PHN0cm9uZz5ZT1VSIFNLSUxMUyBBTkQgRVhQRVJUSVNFOjwvc3Ryb25nPjwvcD4gPHA+QXMgYSBCYWNrZW5kIEVuZ2luZWVyLCB5b3Ugd2lsbCBuZWVkOjwvcD4gPHVsPiA8bGk+RXh0ZW5zaXZlIGV4cGVyaWVuY2UgdXNpbmcgUHl0aG9uIDwvbGk+PGxpPktub3dsZWRnZSBhbmQgZXhwZXJpZW5jZSB3aXRoIEFXUyA8L2xpPjxsaT5TdHJvbmcgZXhwZXJpZW5jZSB3aXRoIE5PIFNRTCBkYXRhYmFzZXMgPC9saT48bGk+U3Ryb25nIGtub3dsZWRnZSBvZiBidWlsZGluZyBzZXJ2ZXJsZXNzIGFyY2hpdGVjdHVyZSA8L2xpPjxsaT5FeHBlcmllbmNlIHdpdGggZGVwbG95bWVudCBvZiBKU09OIEFQSXMvIFJlc3QgQVBJczwvbGk+PC91bD4gPHA+PHN0cm9uZz5USEUgQkVORUZJVFM6PC9zdHJvbmc+PC9wPiA8dWw+IDxsaT5BIHNhbGFyeSBiZXR3ZWVuICYjMTYzOzUwLDAwMC0mIzE2Mzs2MCwwMDA8L2xpPjxsaT5GbGV4aWJsZSB3b3JraW5nPC9saT48bGk+VW5saW1pdGVkIGhvbGlkYXksIHBsdXMgdGhlIHVzdWFsIGJhbmsgaG9saWRheXM8L2xpPjxsaT5FcXVpcG1lbnQ8L2xpPjxsaT5XZWVrbHkgbHVuY2hlcyA8L2xpPjxsaT5QZW5zaW9uIDwvbGk+PC91bD4gPHA+PHN0cm9uZz5IT1cgVE8gQVBQTFk6PC9zdHJvbmc+PC9wPiA8cD5UbyBiZSBjb25zaWRlcmVkIGZvciB0aGlzIGV4Y2l0aW5nIG9wcG9ydHVuaXR5LCBwbGVhc2Ugc3VibWl0IHlvdXIgZGV0YWlscyB1c2luZyB0aGUgQXBwbHkgYnV0dG9uIG9uIHRoaXMgcGFnZS4gT3IgZm9yIG1vcmUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIG90aGVyIHJvbGVzIHBsZWFzZSBjb250YWN0IEpvc2h1YSBXaWNobWFuIGF0IEhhcm5oYW0uPC9wPiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJ5ZWFyX21heCI6NjAwMDAuMCwieWVhcl9taW4iOjUwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9iYWNrZW5kLWVuZ2luZWVyLzQ1MDE1NzMzIiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ1MDE1NzEwLCJkYl9pZCI6MTMwMywidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiIDxwPkJhY2tlbmQgRW5naW5lZXIgKEphdmEvS290bGluKSAtIDxzdHJvbmc+JiMxNjM7NzUsMDAwIC0gJiMxNjM7ODUsMDAwPC9zdHJvbmc+IC0gPHN0cm9uZz4gKEZ1bGx5IFJlbW90ZSk8L3N0cm9uZz48L3A+IDxwPjxzdHJvbmc+Tk8gU1BPTlNPUlNISVA8L3N0cm9uZz48L3A+IDxwPjxzdHJvbmc+QmFja2VuZCBFbmdpbmVlcjwvc3Ryb25nPiBmb3IgYSA8c3Ryb25nPkZpbnRlY2g8L3N0cm9uZz4gYW5kIDxzdHJvbmc+UmV0YWlsIHNjYWxlLXVwPC9zdHJvbmc+IGJhc2VkIGluIDxzdHJvbmc+TG9uZG9uPC9zdHJvbmc+PC9wPiA8cD5TYWxhcnkgLSA8c3Ryb25nPiYjMTYzOzY1LDAwMCAtICYjMTYzOzg1LDAwMDwvc3Ryb25nPiBwZXIgYW5udW0gJiM0MzsgPHN0cm9uZz5iZW5lZml0czwvc3Ryb25nPjwvcD4gPHA+Sm9iIHRpdGxlOiA8c3Ryb25nPlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyPC9zdHJvbmc+PC9wPiA8cD5Kb2IgdHlwZTogPHN0cm9uZz5QZXJtYW5lbnQ8L3N0cm9uZz48L3A+IDxwPkxvY2F0aW9uOiA8c3Ryb25nPkNlbnRyYWwgTG9uZG9uPC9zdHJvbmc+PC9wPiA8cD5XRkg6IDxzdHJvbmc+UmVtb3RlIDwvc3Ryb25nPihDYW4gd29yayBpbiBvZmZpY2UgaWYgeW91IHdhbnQpPC9wPiA8cD5TdGFydDogPHN0cm9uZz5BU0FQPC9zdHJvbmc+PC9wPiA8cD5Kb2luIGEgPHN0cm9uZz5GaW50ZWNoIDwvc3Ryb25nPmNvbXBhbnkgb3BlcmF0aW5nIHdpdGggY2xpZW50cyBpbiB0aGUgPHN0cm9uZz4gcmV0YWlsIG1hcmtldDwvc3Ryb25nPiB3aG8gPHN0cm9uZz5wcm92aWRlIGluc2lnaHRzIDwvc3Ryb25nPnRvIDxzdHJvbmc+cHJvZHVjZSBzb2x1dGlvbnM8L3N0cm9uZz4gdG8gdGhlaXIgcHJlc3NpbmcgYnVzaW5lc3MgaXNzdWVzLiBUaHJvdWdoIHlvdXIgd29yayB5b3Ugd2lsbCBoZWxwIHRoZSBlbmQgY2xpZW50IHdpdGggPHN0cm9uZz5kZWNpc2lvbiBtYWtpbmc8L3N0cm9uZz4gaW4gPHN0cm9uZz5lbmdhZ2VtZW50PC9zdHJvbmc+LCA8c3Ryb25nPnJldGVudGlvbjwvc3Ryb25nPiwgPHN0cm9uZz5yZXR1cm5zPC9zdHJvbmc+LCBhbmQgPHN0cm9uZz5mdXR1cmUgcmV2ZW51ZSBzdHJlYW1zLjwvc3Ryb25nPjwvcD4gPHA+WW91IHdpbGwgYmUgPHN0cm9uZz5pbnRlZ3JhdGluZyBzeXN0ZW1zPC9zdHJvbmc+LCA8c3Ryb25nPmJ1aWxkaW5nIGNvcmUgcHJvZHVjdCBpbXByb3ZlbWVudHM8L3N0cm9uZz4sIDxzdHJvbmc+b3duaW5nIHByb2plY3RzPC9zdHJvbmc+IGFuZCBjb25zdGFudGx5IGRldmVsb3BpbmcgYXMgeW91IDxzdHJvbmc+dXBza2lsbCA8L3N0cm9uZz5pbiBhIGNvbXBhbnkgd2l0aCBhIDxzdHJvbmc+Y2xlYXIgY2FyZWVyIHBhdGh3YXkgZm9yIGdyb3d0aC4gPC9zdHJvbmc+PC9wPiA8cD5NdXN0IEhhdmVzOjwvcD4gPHVsPiA8bGk+PHN0cm9uZz40JiM0MzsgeWVhcnMnIGNvbW1lcmNpYWwgZXhwZXJpZW5jZTwvc3Ryb25nPiB3aXRoIGEgaWRlYWxseSA8c3Ryb25nPktvdGxpbjwvc3Ryb25nPiAoPHN0cm9uZz5KVk08L3N0cm9uZz4sIG9yIDxzdHJvbmc+SmF2YSA8L3N0cm9uZz5hcmUgc3Ryb25nIHN1YnN0aXR1dGVzKTwvbGk+PGxpPjxzdHJvbmc+MiYjNDM7IHllYXJzJzwvc3Ryb25nPiB3b3JraW5nIHdpdGggPHN0cm9uZz5jbG91ZCBlbnZpcm9ubWVudHM8L3N0cm9uZz48L2xpPjxsaT5TdHJvbmcgZXhwZXJpZW5jZSB3b3JraW5nIG9uIDxzdHJvbmc+aW50ZWdyYXRpb24gYW5kIEFQSSBwcm9qZWN0czwvc3Ryb25nPjwvbGk+PGxpPkV4cGVydCB3b3JraW5nIHdpdGggPHN0cm9uZz5kYXRhYmFzZXM8L3N0cm9uZz48L2xpPjxsaT5VbmRlcnN0YW5kaW5nIG9mIGVudGlyZSA8c3Ryb25nPnN5c3RlbSBpbmZyYXN0cnVjdHVyZTwvc3Ryb25nPiBhbmQgaGFzIGV4cGVyaWVuY2UgPHN0cm9uZz5idWlsZGluZyBmcm9tIHNjcmF0Y2g8L3N0cm9uZz48L2xpPjwvdWw+IDxwPk5pY2UgdG8gaGF2ZTo8L3A+IDx1bD4gPGxpPktub3dsZWRnZSBvZiA8c3Ryb25nPkphdmFTY3JpcHQ8L3N0cm9uZz4gb3IgPHN0cm9uZz5SZWFjdDwvc3Ryb25nPjwvbGk+PGxpPkV4cGVyaWVuY2UgaW4gPHN0cm9uZz5UZXJyYWZvcm08L3N0cm9uZz48L2xpPjwvdWw+IDxwPkJlbmVmaXRzOjwvcD4gPHVsPiA8bGk+PHN0cm9uZz5QZXJzb25hbCBEZXZlbG9wbWVudCBGdW5kPC9zdHJvbmc+IG9mIHVwIHRvIDxzdHJvbmc+JiMxNjM7MSwyMDAveXI8L3N0cm9uZz4gdG8gPHN0cm9uZz51cHNraWxsIDwvc3Ryb25nPnlvdXJzZWxmPC9saT48bGk+U2V0LXVwIGluY2x1ZGluZyA8c3Ryb25nPk1hY2Jvb2sgUHJvPC9zdHJvbmc+PC9saT48bGk+PHN0cm9uZz4mIzE2MzsxLDIwMC95ciBidWRnZXQgd2l0aCBjbGllbnRzPC9zdHJvbmc+PC9saT48bGk+PHN0cm9uZz4zNjwvc3Ryb25nPiBkYXlzIEhvbGlkYXk8L2xpPjxsaT48c3Ryb25nPk1lbnRhbCBIZWFsdGggc3VwcG9ydDwvc3Ryb25nPiBmcm9tIHBhcnRuZXI8L2xpPjxsaT48c3Ryb25nPlBlcnNvbmFsIGRheXM8L3N0cm9uZz4gZm9yIG1lbnRhbCBoZWFsdGg8L2xpPjxsaT48c3Ryb25nPkZ1bGx5IHJlbW90ZTwvc3Ryb25nPiAoZG9nIGZyaWVuZGx5IG9mZmljZSBlbnZpcm9ubWVudCk8L2xpPjwvdWw+IDxwPjxzdHJvbmc+QXBwbHkgTm93PC9zdHJvbmc+ISBUaGlzIGlzIHRoZSA8c3Ryb25nPm9wcG9ydHVuaXR5IDwvc3Ryb25nPnRvIDxzdHJvbmc+IGdyb3cgPC9zdHJvbmc+d2l0aCB0aGUgYnVzaW5lc3MgaW4gYSA8c3Ryb25nPmZvcmV2ZXIgY2h1cm5pbmcgbWFya2V0ISA8L3N0cm9uZz48L3A+IDxwPjxzdHJvbmc+RW1haWwgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJvbGU8L3N0cm9uZz48L3A+ICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7InllYXJfbWF4Ijo4NTAwMC4wLCJ5ZWFyX21pbiI6NjUwMDAuMCwiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1iYWNrZW5kLWVuZ2luZWVyLzQ1MDE1NzEwIiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ1MDEyMjcxLCJkYl9pZCI6MTEwMSwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyICguTkVUICsgTm9kZSkgLSBSZW1vdGUgKEV1cm9wZWFuLVdpZGUpIC0gUGVybWFuZW50IiwiZGVzY3JpcHRpb24iOiIgPHA+PHN0cm9uZz5CYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyICguTkVUICYjNDM7IE5vZGUpIC0gUmVtb3RlIChFdXJvcGVhbi1XaWRlKSAtIFBlcm1hbmVudCA8L3N0cm9uZz48L3A+IDxwPjxzdHJvbmc+QmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAoLk5FVCAmIzQzOyBOb2RlKSAtIFJlbW90ZSAoRXVyb3BlYW4tV2lkZSkgLSBQZXJtYW5lbnQgPC9zdHJvbmc+PC9wPiA8cD5QbGV4dXMgaGFzIHRlYW1lZCB1cCB3aXRoIGFuIGV4Y2l0aW5nIHdlYjMgYW5hbHl0aWNzIHBsYXRmb3JtLCB0aGV5IGFyZSByZXZvbHV0aW9uaXNpbmcgY3J5cHRvIGRhdGEgbW9uaXRvcmluZy48L3A+IDxwPldlIGFyZSBsb29raW5nIGZvciBhIGdpZnRlZCBhbmQgbW90aXZhdGVkIGJhY2tlbmQgc29mdHdhcmUgZW5naW5lZXIgd2l0aCBzdHJvbmcgLk5ldCBleHBlcmllbmNlLCBhcyB3ZWxsIGFzIGEgcHJvZmVzc2lvbmFsIGludGVyZXN0IGluIE5vZGUuIFRoZSByb2xlIGludm9sdmVzIHdvcmtpbmcgd2l0aGluIHRoZWlyIGludGVybmFsIEFQSSwgYWxvbmcgd2l0aCBlbmhhbmNpbmcsIHRoZSBkZXZlbG9wbWVudCBvZiBrZXkgc2VydmljZXMgZm9yIHRoZWlyICBwYXJ0bmVycyBhbmQgcGxldGhvcmEgb2YgdXNlcnMgZ2xvYmFsbHkuPC9wPiA8cD5Xb3VsZCB5b3UgbGlrZSB0bzo8L3A+IDx1bD4gPGxpPldvcmsgd2l0aCBhIHRlYW0gb2YgaW1tZW5zZWx5IHNraWxsZWQgYW5kIGFtYml0aW91cyBjb2xsZWFndWVzPzwvbGk+PGxpPkVhcm4gYSBjb21wZXRpdGl2ZSBzYWxhcnkgYW5kIGZhc2NpbmF0aW5nIHN0b2NrcyBvcHRpb25zPzwvbGk+PGxpPldvcmsgcmVtb3RlbHkgd2l0aCBmbGV4aWJsZSBob3VycywgZGV2ZWxvcG1lbnQgb3Bwb3J0dW5pdGllcyBhbmQgd29yayB3aXRoaW4gYSBjb21wYW55IGN1bHR1cmUgdGhhdCBlbmNvdXJhZ2VzIGxlYXJuaW5nLCBibG9ja2NoYWluIGFuZCBjdXJpb3VzIGNvbnZlcnNhdGlvbnMuPC9saT48L3VsPiA8cD5BYm91dCB0aGUgcm9sZTo8L3A+IDx1bD4gPGxpPllvdSB3b3VsZCBiZSBjcmVhdGluZywgZnJvbSBzY3JhdGNoLCBwcm90b3R5cGVzLCBhbmQgYXBwbGljYXRpb25zIGluIHRoZSBtb3N0IGlubm92YXRpdmUgYW5kIHRpbWVseSBvZiBtYW5uZXJzLjwvbGk+PGxpPkluZmx1ZW50aWFsIGluIHByb3ZpZGluZyBpbm5vdmF0aXZlIHNvbHV0aW9ucyBmb3IgdGhlIGVudGl0eS48L2xpPjxsaT5IZWxwaW5nIHRvIHdvcmsgb3V0IGNvbXBsaWNhdGVkIHByb2JsZW1zIGFuZCBzdXBlcnZpc2UgdGhlIHVzZSBvZiBzdHJvbmcgcHJhY3RpY2VzIGFuZCB0ZWNobm9sb2dpZXMuPC9saT48bGk+RWZmZWN0aXZlbHkgbGVhZCBvdGhlciB0ZWFtIG1lbWJlcnMgdG8gYnVpbGQgYXBwbGljYXRpb25zIHVzaW5nIGJsb2NrY2hhaW4gdGVjaG5vbG9naWVzLjwvbGk+PC91bD4gPHA+QWJvdXQgeW91ICguTkVUICYjNDM7IE5vZGUuanMgJiM0MzsgU1FMKTo8L3A+IDx1bD4gPGxpPk91dHN0YW5kaW5nIGtub3dsZWRnZSBvZiAuTkVULjwvbGk+PGxpPkZhbWlsaWFyaXR5IG9mIE5vZGUuanMgYW5kIFNRTC48L2xpPjxsaT5FeHBlcmllbmNlZCB3aXRoIGRldmVsb3BpbmcgYXBwbGljYXRpb25zIHVzaW5nIC5ORVQgQ29yZSBhbmQgRXhwcmVzcy5qcyBvciBvdGhlciBmcmFtZXdvcmtzLjwvbGk+PC91bD4gPHA+Qm9udXMgUG9pbnRzOjwvcD4gPHVsPiA8bGk+TW9uZ28gb3Igb3RoZXIgTm9TUUwgc3RvcmFnZSBleHBlcmllbmNlLjwvbGk+PGxpPlJlZGlzICZhbXA7IEplbmtpbnMgZXhwZXJpZW5jZS48L2xpPjxsaT5FeHBlcmllbmNlIHdpdGggRG9ja2VyLjwvbGk+PGxpPkV4Y2VsbGVudCBjb21tdW5pY2F0aW9uIGFuZCBhbmFseXRpY2FsIHNraWxscy48L2xpPjxsaT5CbG9ja2NoYWluLyBjcnlwdG8gZXhwZXJpZW5jZS48L2xpPjwvdWw+IDxwPklmIHlvdSBvciBzb21lb25lIHlvdSBrbm93IGlzIGludGVyZXN0ZWQgaW4gdGhpcyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHBvc2l0aW9uLCB0aGVuIGFwcGx5IG5vdyBieSBzZW5kaW5nIG92ZXIgYW4gdXBkYXRlZCB2ZXJzaW9uIG9mIHlvdXIgQ1YhPC9wPiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9iYWNrZW5kLXNvZnR3YXJlLWVuZ2luZWVyLW5ldC0tbm9kZS1yZW1vdGUtZXVyb3BlYW4td2lkZS1wZXJtYW5lbnQvNDUwMTIyNzEiLCJpc19mdWxsIjp0cnVlfSx7ImpvYl9pZCI6NDUwMDkxNTIsImRiX2lkIjoxMTA2LCJ0aXRsZSI6IkphdmEgRGV2ZWxvcGVyIC8gQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAtIFJlbW90ZSIsImRlc2NyaXB0aW9uIjoiSmF2YSBEZXZlbG9wZXIgLyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIChBZ2lsZSBUREQpICpSZW1vdGUgVUsqLiBBcmUgeW91IGEgZGF0YSBzYXZ2eSBKYXZhIHRlY2hub2xvZ2lzdD8gWW91IGNvdWxkIGJlIHByb2dyZXNzaW5nIHlvdXIgY2FyZWVyIGluIGEgc2VuaW9yIGhhbmRzLW9uIHJvbGUgYXQgYSBncm93aW5nIEZpblRlY2ggd2l0aCBhbiBhd2FyZCB3aW5uaW5nIGRhdGEgYW5hbHl0aWNzIHBsYXRmb3JtIHNvbGQgaW50byBtYWpvciAgZmluYW5jaWFsIGluc3RpdHV0aW9ucyBhY3Jvc3MgdGhlIGdsb2JlLjxiciAvPjxiciAvPkFzIGEgSmF2YSBEZXZlbG9wZXIgLyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHlvdSB3aWxsIGJlIGFuIGluc3RydW1lbnRhbCBwYXJ0IG9mIGEgc21hbGwgZW5naW5lZXJpbmcgdGVhbSB0byBidWlsZCBvdXQgdGhlIGNvcmUgcGxhdGZvcm0uIFlvdSdsbCBnZXQgaW52b2x2ZWQgd2l0aCBwcm9qZWN0cyBhY3Jvc3MgdGhlIHBsYXRmb3JtIGluY2x1ZGluZyBkZXNpZ25pbmcgYW5kIGJ1aWxkaW5nIEFQSXMgKHZpYSBnUlBDIC8gUHJvdG9idWYpLCBkYXRhICBwcm9jZXNzaW5nIGFuZCBzdXBwb3J0aW5nIHNlcnZpY2VzLCBjb2xsYWJvcmF0aW5nIHJlbW90ZWx5IHdpdGggY3Jvc3MgZnVuY3Rpb25hbCBlbmdpbmVlcmluZyB0ZWFtcywgRGF0YSBTY2llbnRpc3RzIGFuZCBidXNpbmVzcyBzdGFrZWhvbGRlcnMuIFRoZXJlJ3MgYSBiaWcgZW1waGFzaXMgb24gQ29tcHV0ZXIgU2NpZW5jZSBmdW5kYW1lbnRhbHMsIGNvZGUgcXVhbGl0eSBhbmQgY29sbGFib3JhdGlvbiB1c2luZyBBZ2lsZSBUREQsIFhQLCBTY3J1bS9LYW5iYW4gIG1ldGhvZG9sb2dpZXM7IHlvdSdsbCBiZSBhbiBhZHZvY2F0ZSBhbmQgY29udHJpYnV0b3IgdG8gYmVzdCBwcmFjdGljZS4gPGJyIC8+PGJyIC8+VGhlcmUgYXJlIHJlZ3VsYXIgY29tcGFueSB3aWRlICdsdW5jaCBhbmQgbGVhcm4nIHNlc3Npb25zLCB3ZWVrbHkgZ2VuZXJhbCBrbm93bGVkZ2UgU2xhY2sgcXVpenplcyBhbmQgRnJpZGF5ICd2aXJ0dWFsIHB1Yicgc2Vzc2lvbnMgdG8gZ2V0IGludm9sdmVkIHdpdGg7IGlmIHlvdSBsaXZlIG5lYXIgTG9uZG9uIG9yIEh1bGwgdGhlcmUncyBhbHNvIG9wcG9ydHVuaXRpZXMgdG8gZ28gaW50byB0aGUgb2ZmaWNlIGlmIGRlc2lyZWQuPGJyIC8+PGJyIC8+UmVxdWlyZW1lbnRzOjxiciAvPipZb3UgaGF2ZSBhZHZhbmNlZCBjb3JlIEphdmEgZGV2ZWxvcG1lbnQgc2tpbGxzPGJyIC8+KllvdSBoYXZlIGEgdGhvcm91Z2ggdW5kZXJzdGFuZGluZyBvZiBDb21wdXRpbmcgU2NpZW5jZSBmdW5kYW1lbnRhbHMgc3VjaCBhcyBPT1AsIERhdGEgU3RydWN0dXJlcywgQWxnb3JpdGhtPGJyIC8+WW91J3JlIGFuIGFkdm9jYXRlIG9mIGNvbGxhYm9yYXRpb24gYW5kIGhhdmUgZXhwZXJpZW5jZSB3aXRoIEFnaWxlIG1ldGhvZG9sb2dpZXMgc3VjaCBhcyBYUCwgU2NydW0sIEthbmJhbjxiciAvPllvdSBoYXZlIHN0cm9uZyBwcm9ibGVtIHNvbHZpbmcgYW5kIGFuYWx5c2lzIHNraWxscywgaGFwcHkgdG8gd29yayB3aXRoIG90aGVycyB0byBjcmVhdGUgYSBmZWF0dXJlIGZyb20gc2NyYXRjaCA8YnIgLz4qSWRlYWxseSB5b3UgaGF2ZSBzb21lIGV4cGVyaWVuY2Ugb2YgYnVpbGRpbmcgQVBJcywgaGF2ZSB3b3JrZWQgb24gaGlnaCB2b2x1bWUgLyBwZXJmb3JtYW5jZSBzeXN0ZW1zLCBiZSBmYW1pbGlhciB3aXRoIEJpZyBEYXRhIHByb2Nlc3NpbmcgYW5kIHRlY2hub2xvZ2llcyBzdWNoIGFzIEthZmthLCBBV1MsIERvY2tlciwgS3ViZXJuZXRlcyAtIGFsdGhvdWdoIHlvdSdsbCBwaWNrIHRoZXNlIHVwPGJyIC8+PGJyIC8+QXMgYSBKYXZhIERldmVsb3BlciAvIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgeW91IHdpbGwgZWFybiBhIGNvbXBldGl0aXZlIHNhbGFyeSAodG8gJiMxNjM7OTVrKSBwbHVzIGJlbmVmaXRzIGluY2x1ZGluZyBzdG9jayBvcHRpb25zLCBwcml2YXRlIG1lZGljYWwgY2FyZSwgbGlmZSBhc3N1cmFuY2UsIHBlbnNpb24gYW5kIDI1IGRheXMgaG9saWRheS48YnIgLz48YnIgLz5BcHBseSBub3cgb3IgY2FsbCB0byBmaW5kIG91dCBtb3JlIGFib3V0IHRoaXMgSmF2YSBEZXZlbG9wZXIgLyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIG9wcG9ydHVuaXR5LiIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7InllYXJfbWF4Ijo5NTAwMC4wLCJ5ZWFyX21pbiI6ODAwMDAuMCwiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2phdmEtZGV2ZWxvcGVyLWJhY2tlbmQtc29mdHdhcmUtZW5naW5lZXItcmVtb3RlLzQ1MDA5MTUyIiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ1MDA5MTQwLCJkYl9pZCI6MTEwNywidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIEphdmEgU3ByaW5nQm9vdCIsImRlc2NyaXB0aW9uIjoiQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAvIEphdmEgRGV2ZWxvcGVyIChTcHJpbmdCb290IG1pY3Jvc2VydmljZXMpICpSZW1vdGUgSW50ZXJ2aWV3IFdmSCouIEZhc3QgZ3Jvd2luZyBGaW5UZWNoIHRoYXQncyBTYWFTIHNvbHV0aW9ucyBhcmUgaGVscGluZyBIaWdoIFN0cmVldCBiYW5rcyB0byBjb21wZXRlIHdpdGggdGhlIGNoYWxsZW5nZSBmcm9tIHRoZWlyIG9ubGluZSB0ZWNoIGRyaXZlbiByaXZhbHMsIGlzIHNlZWtpbmcgYSBza2lsbGVkICBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHRvIHdvcmsgb24gY2hhbGxlbmdpbmcgc3lzdGVtcy48YnIgLz48YnIgLz5BcyBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgeW91IHdpbGwgZGVzaWduIGFuZCBkZXZlbG9wIGN1c3RvbWVyIGZvY3VzZWQgb24tYm9hcmRpbmcgYW5kIGNsaWVudCByZXBvcnRpbmcgc3lzdGVtcy4gWW91J2xsIGJlIGZvY3Vzc2VkIG9uIGNvZGluZyBtdWx0aS10aHJlYWRlZCBjb3JlIEphdmEgc3lzdGVtcyB3aXRoIGEgZm9jdXMgb24gY29uY3VycmVuY3kgYW5kIGFzeW5jaHJvbm91cyBwcm9ncmFtbWluZyB3aXRoaW4gYSBtb2Rlcm4gZGV2ZWxvcG1lbnQgIGVudmlyb25tZW50IGVuY29tcGFzc2luZyBDSS9DRCwgbWljcm9zZXJ2aWNlcyBhbmQgQVdTLiA8YnIgLz48YnIgLz5UaGVyZSdzIGEgZnVsbHkgcmVtb3RlIGludGVydmlldyBhbmQgb25ib2FyZGluZyBwcm9jZXNzIGFzIHdlbGwgYXMgdGhlIGFiaWxpdHkgdG8gd29yayBmcm9tIGhvbWUgZnVsbHRpbWUgZm9yIHRoZSBmb3Jlc2VlYWJsZTsgaW4gdGltZSB5b3UnbGwgam9pbiBjb2xsZWFndWVzIGluIHRoZSBMb25kb24gb2ZmaWNlIGZvciAxLTIgZGF5cyBhIHdlZWsuPGJyIC8+PGJyIC8+UmVxdWlyZW1lbnRzOjxiciAvPipZb3UgaGF2ZSBpbmRlcHRoIGNvcmUgSmF2YSBkZXZlbG9wbWVudCBleHBlcmllbmNlIGluY2x1ZGluZyBtdWx0aS10aHJlYWRpbmc8YnIgLz4qWW91IGhhdmUgYSBnb29kIGtub3dsZWRnZSBvZiBtaWNyb3NlcnZpY2VzIGFuZCBoYXZlIFNwcmluZ0Jvb3QgZXhwZXJpZW5jZTxiciAvPipZb3UgaGF2ZSBhIGdvb2Qgd29ya2luZyBrbm93bGVkZ2Ugb2YgQVdTLCBDSS9DRCwgUkVTVGZ1bCBBUElzPGJyIC8+KllvdSBoYXZlIGEgc3Ryb25nIENvbXB1dGVyIFNjaWVuY2UgYmFja2dyb3VuZCBpbmNsdWRpbmcgZnVuZGFtZW50YWxzIHN1Y2ggYXMgT09QLCBEYXRhIFN0cnVjdHVyZXMgYW5kIEFsZ29yaXRobXM8YnIgLz4qWW91IGJlbGlldmUgaW4gd2VsbCB0ZXN0ZWQgY29kZSBhbmQgaGF2ZSBhIFRERCBtaW5kc2V0IDxiciAvPipZb3UncmUgY29sbGFib3JhdGl2ZSwga2VlbiB0byB3b3JrIG9uIGNvbXBsZXggc3lzdGVtcyBhbmQgY29udHJpYnV0ZSB0byB0aGUgZnVsbCBzb2Z0d2FyZSBkZXZlbG9wbWVudCBsaWZlY3ljbGU8YnIgLz48YnIgLz5BcyBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgLyBKYXZhIERldmVsb3BlciB5b3Ugd2lsbCBlYXJuIGEgY29tcGV0aXRpdmUgc2FsYXJ5ICh0byAmIzE2MzsxMDBrKSBwbHVzIGJlbmVmaXRzLjxiciAvPjxiciAvPkFwcGx5IG5vdyBvciBjYWxsIHRvIGZpbmQgb3V0IG1vcmUgYWJvdXQgdGhpcyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIC8gSmF2YSBEZXZlbG9wZXIgKFNwcmluZ0Jvb3QgbWljcm9zZXJ2aWNlcykgb3Bwb3J0dW5pdHkuIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsieWVhcl9tYXgiOjEwMDAwMC4wLCJ5ZWFyX21pbiI6ODUwMDAuMCwiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtc29mdHdhcmUtZW5naW5lZXItamF2YS1zcHJpbmdib290LzQ1MDA5MTQwIiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ0ODY1OTY1LCJkYl9pZCI6MTEwOCwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIE5vZGVKUywgRnVsbHkgUmVtb3RlfSIsImRlc2NyaXB0aW9uIjoiIDxwPjxzdHJvbmc+QmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB7PC9zdHJvbmc+PGVtPk5vZGVKUywgPC9lbT48ZW0+RnVsbHkgUmVtb3RlPC9lbT48c3Ryb25nPn08L3N0cm9uZz48L3A+IDxwPjEwMCUgUmVtb3RlPC9wPiA8cD48c3Ryb25nPiYjMTYzOzcwLDAwMCAmIzQzOyA8L3N0cm9uZz5Db21wYW55IEJlbmVmaXRzPC9wPiA8cD48ZW0+QXJlIHlvdSBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgbG9va2luZyB0byBoYXZlIGEgZ3JlYXQgd29yay9saWZlIGJhbGFuY2UgYXMgd2VsbCBhcyB3b3JrIGluIGEgZGlzcnVwdGl2ZSBUZWNoIFN0YXJ0LXVwPyA8L2VtPjwvcD4gPHA+T24gb2ZmZXIgaXMgYSBncmVhdCBvcHBvcnR1bml0eSBmb3IgYW4gZXhwZXJpZW5jZWQgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB0byBqb2luIGEgZGlzcnVwdGl2ZSB0ZWNoIHN0YXJ0LXVwLCByZXZvbHV0aW9uaXNpbmcgdGhlIHdheSB3ZSBjb21tdW5pY2F0ZSB3aXRoIG9uZSBhbm90aGVyLiBIYXZpbmcgYWxyZWFkeSBtYWRlIHRoZWlyIG1hcmsgaW4gdGhlIHdvcmxkIGFuZCB3aXRoIG11Y2ggbW9yZSBmdW5kaW5nIG9uIHRoZSB3YXkuIFRoaXMgIGlzIGEgdW5pcXVlIGNoYW5jZSBmb3IgYSBKYXZhU2NyaXB0IERldmVsb3BlciB0byBqb2luIGEgZm9yd2FyZC10aGlua2luZyBidXNpbmVzcyBhbmQgZ3JvdyB3aXRoIGl0IGFzIHRoZXkgZXhwZXJpZW5jZSBhIHJhcGlkIHBlcmlvZCBvZiBncm93dGguPC9wPiA8cD5UaGlzIHJvbGUgd291bGQgc3VpdCBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgd2l0aCBjb21tZXJjaWFsIGV4cGVyaWVuY2Ugd2hvIGlzIGxvb2tpbmcgdG8gam9pbiBhIFRlY2ggU3RhcnQtdXAgYW5kIHRha2UgY29udHJvbCBvZiB0aGUgZnVsbCBmcm9udC1lbmQuIFNvbWVvbmUgd2hvIGhhcyBhIHJlYWwgZ3Jhc3Agb2YgSmF2YVNjcmlwdCBhbmQgdGhlIHJlbGF0ZWQgdGVjaG5vbG9naWVzIGFuZCBpcyBrZWVuIHRvIGxlYXZlIHRoZWlyICBtYXJrIG9uIHRoZSB3b3JsZC48L3A+IDxwPjxzdHJvbmc+VGhlIFJvbGU6PC9zdHJvbmc+PC9wPiA8dWw+IDxsaT5Xb3JrIG9uIGxlYWRpbmcgZWRnZSB0ZWNoIHN0YWNrLiBOb2RlSlMsIFJlYWN0LCBBV1MsIERldk9wczwvbGk+PGxpPlVzZSB5b3VyIGltYWdpbmF0aW9uIHRvIGNyZWF0ZSBjdXR0aW5nIGVkZ2UgZnJvbnRlbmQgVUkvVVguPC9saT48bGk+T24tZ29pbmcgcGVyc29uYWwgZGV2ZWxvcG1lbnQgYXMgd2VsbCBhcyBtZW50b3Jpbmcgb2YganVuaW9yIG1lbWJlcnMuPC9saT48L3VsPiA8cD48c3Ryb25nPlRoZSBQZXJzb246PC9zdHJvbmc+PC9wPiA8dWw+IDxsaT5CYWNrZW5kIEphdmFTY3JpcHQgZXhwZXJpZW5jZSB7PGVtPk5vZGVKUywgVHlwZVNjcmlwdCwgUmVhY3QsIFJlZHV44oCmPC9lbT59LjwvbGk+PGxpPkVudGh1c2lhc3RpYyBhbmQgYW1iaXRpb3VzLjwvbGk+PGxpPldhbnQgdG8gd29yayBpbiBhIFRlY2ggU3RhcnQtdXAuPC9saT48L3VsPiA8cD48c3Ryb25nPktleXdvcmRzOiA8L3N0cm9uZz48ZW0+SmF2YVNjcmlwdCwgTm9kZUpTLCBSZWFjdCwgUmVkdXgsIEZyb250ZW5kLCBGcm9udCBFbmQsIFVJLCBVc2VyIEludGVyZmFjZSwgVVgsIFVzZXIgRXhwZXJpZW5jZSwgVGVjaCwgU3RhcnQgdXAuIDwvZW0+PC9wPiA8cD5JZiB5b3UncmUgaW50ZXJlc3RlZCBpbiB0aGlzIHJvbGUsIGNsaWNrIDxzdHJvbmc+J2FwcGx5IG5vdyc8L3N0cm9uZz4gdG8gZm9yd2FyZCBhbiB1cC10by1kYXRlIGNvcHkgb2YgeW91ciBDViwgb3IgY2FsbCB1cyBub3cuPGJyIC8+PGJyIC8+SWYgdGhpcyBqb2IgaXNuJ3QgcXVpdGUgcmlnaHQgZm9yIHlvdSBidXQgeW91IGFyZSBsb29raW5nIGZvciBhIG5ldyBwb3NpdGlvbiwgcGxlYXNlIGNvbnRhY3QgdXMgZm9yIGEgY29uZmlkZW50aWFsIGRpc2N1c3Npb24gb24geW91ciBjYXJlZXIuPGJyIC8+PGJyIC8+RXJuZXN0IEdvcmRvbiBSZWNydWl0bWVudCBMaW1pdGVkIGFjdHMgYXMgYW4gZW1wbG95bWVudCBhZ2VuY3kgZm9yIHBlcm1hbmVudCByZWNydWl0bWVudCBhbmQgZW1wbG95bWVudCBidXNpbmVzcyBmb3IgdGhlIHN1cHBseSBvZiB0ZW1wb3Jhcnkgd29ya2Vycy4gQnkgYXBwbHlpbmcgZm9yIHRoaXMgam9iLCB5b3UgYWNjZXB0IHRoZSBUJmFtcDtDJ3MsIFByaXZhY3kgUG9saWN5IGFuZCBEaXNjbGFpbWVycyB3aGljaCBjYW4gYmUgZm91bmQgYXQgb3VyIHdlYnNpdGUuPC9wPiAiLCJsb2NhdGlvbiI6IkJpcm1pbmdoYW0iLCJzYWxhcnkiOnsieWVhcl9tYXgiOjcwMDAwLjAsInllYXJfbWluIjo3MDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci1ub2RlanMtZnVsbHktcmVtb3RlLzQ0ODY1OTY1IiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ0ODY1OTU4LCJkYl9pZCI6MTEwOSwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIE5vZGVKUywgRnVsbHkgUmVtb3RlfSIsImRlc2NyaXB0aW9uIjoiIDxwPjxzdHJvbmc+QmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB7PC9zdHJvbmc+PGVtPk5vZGVKUywgPC9lbT48ZW0+RnVsbHkgUmVtb3RlPC9lbT48c3Ryb25nPn08L3N0cm9uZz48L3A+IDxwPjEwMCUgUmVtb3RlPC9wPiA8cD48c3Ryb25nPiYjMTYzOzcwLDAwMCAmIzQzOyA8L3N0cm9uZz5Db21wYW55IEJlbmVmaXRzPC9wPiA8cD48ZW0+QXJlIHlvdSBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgbG9va2luZyB0byBoYXZlIGEgZ3JlYXQgd29yay9saWZlIGJhbGFuY2UgYXMgd2VsbCBhcyB3b3JrIGluIGEgZGlzcnVwdGl2ZSBUZWNoIFN0YXJ0LXVwPyA8L2VtPjwvcD4gPHA+T24gb2ZmZXIgaXMgYSBncmVhdCBvcHBvcnR1bml0eSBmb3IgYW4gZXhwZXJpZW5jZWQgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB0byBqb2luIGEgZGlzcnVwdGl2ZSB0ZWNoIHN0YXJ0LXVwLCByZXZvbHV0aW9uaXNpbmcgdGhlIHdheSB3ZSBjb21tdW5pY2F0ZSB3aXRoIG9uZSBhbm90aGVyLiBIYXZpbmcgYWxyZWFkeSBtYWRlIHRoZWlyIG1hcmsgaW4gdGhlIHdvcmxkIGFuZCB3aXRoIG11Y2ggbW9yZSBmdW5kaW5nIG9uIHRoZSB3YXkuIFRoaXMgIGlzIGEgdW5pcXVlIGNoYW5jZSBmb3IgYSBKYXZhU2NyaXB0IERldmVsb3BlciB0byBqb2luIGEgZm9yd2FyZC10aGlua2luZyBidXNpbmVzcyBhbmQgZ3JvdyB3aXRoIGl0IGFzIHRoZXkgZXhwZXJpZW5jZSBhIHJhcGlkIHBlcmlvZCBvZiBncm93dGguPC9wPiA8cD5UaGlzIHJvbGUgd291bGQgc3VpdCBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgd2l0aCBjb21tZXJjaWFsIGV4cGVyaWVuY2Ugd2hvIGlzIGxvb2tpbmcgdG8gam9pbiBhIFRlY2ggU3RhcnQtdXAgYW5kIHRha2UgY29udHJvbCBvZiB0aGUgZnVsbCBmcm9udC1lbmQuIFNvbWVvbmUgd2hvIGhhcyBhIHJlYWwgZ3Jhc3Agb2YgSmF2YVNjcmlwdCBhbmQgdGhlIHJlbGF0ZWQgdGVjaG5vbG9naWVzIGFuZCBpcyBrZWVuIHRvIGxlYXZlIHRoZWlyICBtYXJrIG9uIHRoZSB3b3JsZC48L3A+IDxwPjxzdHJvbmc+VGhlIFJvbGU6PC9zdHJvbmc+PC9wPiA8dWw+IDxsaT5Xb3JrIG9uIGxlYWRpbmcgZWRnZSB0ZWNoIHN0YWNrLiBOb2RlSlMsIFJlYWN0LCBBV1MsIERldk9wczwvbGk+PGxpPlVzZSB5b3VyIGltYWdpbmF0aW9uIHRvIGNyZWF0ZSBjdXR0aW5nIGVkZ2UgZnJvbnRlbmQgVUkvVVguPC9saT48bGk+T24tZ29pbmcgcGVyc29uYWwgZGV2ZWxvcG1lbnQgYXMgd2VsbCBhcyBtZW50b3Jpbmcgb2YganVuaW9yIG1lbWJlcnMuPC9saT48L3VsPiA8cD48c3Ryb25nPlRoZSBQZXJzb246PC9zdHJvbmc+PC9wPiA8dWw+IDxsaT5CYWNrZW5kIEphdmFTY3JpcHQgZXhwZXJpZW5jZSB7PGVtPk5vZGVKUywgVHlwZVNjcmlwdCwgUmVhY3QsIFJlZHV44oCmPC9lbT59LjwvbGk+PGxpPkVudGh1c2lhc3RpYyBhbmQgYW1iaXRpb3VzLjwvbGk+PGxpPldhbnQgdG8gd29yayBpbiBhIFRlY2ggU3RhcnQtdXAuPC9saT48L3VsPiA8cD48c3Ryb25nPktleXdvcmRzOiA8L3N0cm9uZz48ZW0+SmF2YVNjcmlwdCwgTm9kZUpTLCBSZWFjdCwgUmVkdXgsIEZyb250ZW5kLCBGcm9udCBFbmQsIFVJLCBVc2VyIEludGVyZmFjZSwgVVgsIFVzZXIgRXhwZXJpZW5jZSwgVGVjaCwgU3RhcnQgdXAuIDwvZW0+PC9wPiA8cD5JZiB5b3UncmUgaW50ZXJlc3RlZCBpbiB0aGlzIHJvbGUsIGNsaWNrIDxzdHJvbmc+J2FwcGx5IG5vdyc8L3N0cm9uZz4gdG8gZm9yd2FyZCBhbiB1cC10by1kYXRlIGNvcHkgb2YgeW91ciBDViwgb3IgY2FsbCB1cyBub3cuPGJyIC8+PGJyIC8+SWYgdGhpcyBqb2IgaXNuJ3QgcXVpdGUgcmlnaHQgZm9yIHlvdSBidXQgeW91IGFyZSBsb29raW5nIGZvciBhIG5ldyBwb3NpdGlvbiwgcGxlYXNlIGNvbnRhY3QgdXMgZm9yIGEgY29uZmlkZW50aWFsIGRpc2N1c3Npb24gb24geW91ciBjYXJlZXIuPGJyIC8+PGJyIC8+RXJuZXN0IEdvcmRvbiBSZWNydWl0bWVudCBMaW1pdGVkIGFjdHMgYXMgYW4gZW1wbG95bWVudCBhZ2VuY3kgZm9yIHBlcm1hbmVudCByZWNydWl0bWVudCBhbmQgZW1wbG95bWVudCBidXNpbmVzcyBmb3IgdGhlIHN1cHBseSBvZiB0ZW1wb3Jhcnkgd29ya2Vycy4gQnkgYXBwbHlpbmcgZm9yIHRoaXMgam9iLCB5b3UgYWNjZXB0IHRoZSBUJmFtcDtDJ3MsIFByaXZhY3kgUG9saWN5IGFuZCBEaXNjbGFpbWVycyB3aGljaCBjYW4gYmUgZm91bmQgYXQgb3VyIHdlYnNpdGUuPC9wPiAiLCJsb2NhdGlvbiI6IkJpcm1pbmdoYW0iLCJzYWxhcnkiOnsieWVhcl9tYXgiOjcwMDAwLjAsInllYXJfbWluIjo3MDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci1ub2RlanMtZnVsbHktcmVtb3RlLzQ0ODY1OTU4IiwiaXNfZnVsbCI6dHJ1ZX0seyJqb2JfaWQiOjQ0ODYxMDI3LCJkYl9pZCI6MTExNCwidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIFJlbW90ZSAtIMKjNzAsMDAwIiwiZGVzY3JpcHRpb24iOiIgU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgUmVtb3RlIHdvcmtpbmcgLSBVcCB0byAmIzE2Mzs3MGsgSW50ZXJuYXRpb25hbCBTYWFTIHN0YXJ0LXVwIGJ1aWxkaW5nIHByb2R1Y3RzIHRvIHByb3RlY3QgZGF0YSA/Pz8mIzU1MzU2Oz8gQXJlIHlvdSBhIFNlbmlvciBCYWNrZW5kIEVuZ2luZWVyIHdpdGggYW4gaW50ZXJlc3QgdG8gd29yayBvbiBhIGNoYWxsZW5naW5nIGJ1dCBmdW4gY29kZWJhc2UgYW5kIHdhbnRpbmcgdG8gZG8gc29tZXRoaW5nIGEgYml0IGRpZmZlcmVudD8gTG9va2luZyBmb3IgY2FyZWVyIHByb2dyZXNzaW9uIGFuZCBjb250aW51b3VzIHRyYWluaW5nL2xlYXJuaW5nIG9wcG9ydHVuaXRpZXM/IENoZWNrIG91dCB0aGlzIGJyYW5kLW5ldyByb2xlIHdlIGFyZSB3b3JraW5nIG8uLi4gIiwibG9jYXRpb24iOiJCYXRoIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItYmFja2VuZC1lbmdpbmVlci1yZW1vdGUtNzAwMDAvNDQ4NjEwMjciLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODU5NjA0LCJkYl9pZCI6MTExNSwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIEphdmEgU3ByaW5nQm9vdCIsImRlc2NyaXB0aW9uIjoiQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAoSmF2YSBTcHJpbmdCb290IG1pY3Jvc2VydmljZXMpICpSZW1vdGUgSW50ZXJ2aWV3IFdmSCouIEFyZSB5b3UgYSBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHdpdGggYSBnZW51aW5lIGVudGh1c2lhc20gZm9yIHRlY2hub2xvZ3k/IFlvdSBjb3VsZCBiZSBqb2luaW5nIG9uZSBvZiB0aGUgY291bnRyeSdzIGxlYWRpbmcgUHJvcFRlY2ggY29tcGFuaWVzIHRoYXQgaGF2ZSByZXZvbHV0aW9uaXNlZCAgdGhlIHdheSB3ZSBmaW5kIHByb3BlcnR5IGZvciByZW50IGFuZCBzYWxlIGFuZCB3b3JraW5nIG9uIGFwcHMgdGhhdCBhcmUgdXNlZCBieSBtaWxsaW9ucyBvbiBhIGRhaWx5IGJhc2lzLiBBcyBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgeW91IHdpbGwgZGVzaWduIGFuZCBkZXZlbG9wIG5ldyBmZWF0dXJlcyBhbmQuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtc29mdHdhcmUtZW5naW5lZXItamF2YS1zcHJpbmdib290LzQ0ODU5NjA0IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0MzM0NjI3MiwiZGJfaWQiOjExMTcsInRpdGxlIjoiUHl0aG9uIEJhY2tlbmQgRW5naW5lZXIgLSBNYWNoaW5lIExlYXJuaW5nIiwiZGVzY3JpcHRpb24iOiIgMTAwJSBSZW1vdGUgcG9zaXRpb24gY3VycmVudGx5LCBwbGFuIG9uIG9jY2FzaW9uYWwgb2ZmaWNlIHdvcmsgd2hlbiBzYWZlIHRvIHJldHVybiwgYmFzZWQgb24gaW5kaXZpZHVhbHMuICBNYWNoaW5lIExlYXJuaW5nIHRlY2hub2xvZ3kgc3RhcnR1cCBpbiBDZW50cmFsIEJpcm1pbmdoYW0gYXJlIGhpcmluZyBmb3IgYW4gYWRkaXRpb25hbCBQeXRob24gQmFja2VuZCBFbmdpbmVlciB0byBqb2luIHRoZSBleGlzdGluZyB0ZWNoIHRlYW0gb2YgMjAgdGVjaG5vbG9naXN0cyBzb2x2aW5nIHRoZSBoYXJkIHByb2JsZW0gb2YgZ2V0dGluZyBjb21wdXRlcnMgdG8gdW5kZXJzdGFuZCBjb252ZXJzYXRpb25zLiBUaGlzIHRlY2ggdGVhbSAgaGF2ZSBzaWduaWZpY2FudCBmdW5kaW5nIGFuZCBhcmUgZ3Jvd2luZyB2ZXJ5IGZhc3QuICBZb3Ugdy4uLiAiLCJsb2NhdGlvbiI6IkJpcm1pbmdoYW0iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3B5dGhvbi1iYWNrZW5kLWVuZ2luZWVyLW1hY2hpbmUtbGVhcm5pbmcvNDMzNDYyNzIiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODUzODc3LCJkYl9pZCI6MTExOSwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIEMjIC5OZXQgQ29yZSIsImRlc2NyaXB0aW9uIjoiQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAvIExlYWQgRGV2ZWxvcGVyICguTmV0IENvcmUpICpSZW1vdGUgV2ZIKi4gRG8geW91IGhhdmUgc3Ryb25nIEMjIC5OZXQgQ29yZSBza2lsbHMgYW5kIGEgZ29vZCBrbm93bGVkZ2Ugb2YgbWljcm9zZXJ2aWNlcz8gWW91IGNvdWxkIGJlIHByb2dyZXNzaW5nIHlvdXIgY2FyZWVyIGluIGEgc2VuaW9yIGhhbmRzLW9uIHJvbGUgYXQgYSBwaW9uZWVyaW5nIGRpZ2l0YWwgY2hhbGxlbmdlciBiYW5rIHdpdGggIG92ZXIgMS42IG1pbGxpb24gdXNlcnMuQXMgYSBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHlvdSB3aWxsIGxlYWQgYSBzbWFsbCBBZ2lsZSBTY3J1bSB0ZWFtIHRvIGJ1aWxkIHJlbGlhYmxlLCBzY2FsYWJsZSBhbmQgc2VjdXJlIGJhbmtpbmcgYXBwbGljYXRpb25zLCBwcm92aWRpbmcgbGVhZGVyc2hpcCwgbWVudG8uLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtc29mdHdhcmUtZW5naW5lZXItYy1uZXQtY29yZS80NDg1Mzg3NyIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ4MTk0OTMsImRiX2lkIjoxMTI2LCJ0aXRsZSI6IkJhY2tlbmQgRW5naW5lZXIiLCJkZXNjcmlwdGlvbiI6IkJBQ0tFTkQgRU5HSU5FRVJGVUxMWSBSRU1PVEUgb3IgQ0VOVFJBTCBMT05ET05VUCBUTyAmIzE2Mzs5NSwwMDAgVGVjIFBhcnRuZXJzIGFyZSB3b3JraW5nIHdpdGggYW4gaW5ub3ZhdGl2ZSBTZXJpZXMgQSBzY2FsZS11cCB0aGF0IGhhcyBiZWVuIGJlaGluZCBhIHNpZ25pZmljYW50IGNoYW5nZSBpbiBob3cgdGhlIGluc3VyYW5jZSBpbmR1c3RyeSB3b3Jrcy4gVGhleSBhcmUgbG9va2luZyBmb3IgYSBCYWNrZW5kIEVuZ2luZWVyIHRvIGNvbWUgaW4gYW5kIHdvcmsgb24gdGhlaXIgc3lzdGVtcyB0aGF0IGFyZSBidWlsdCBpbiBHb2xhbmcuIEFzIGEgQmFja2VuZCBFbmdpbmVlciwgeW91IHdpbGwgd3JpdGUgY29kZSBpbiBHb2xhbmcgYmFjayBieSBlaXRoZXIgUG9zdGdyZVNRTCAuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtZW5naW5lZXIvNDQ4MTk0OTMiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODQ4ODQxLCJkYl9pZCI6MTEyOCwidGl0bGUiOiJDKysgRGV2ZWxvcGVyIC8gQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiQyYjNDM7JiM0MzsgRGV2ZWxvcGVyIC8gQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAoTGludXggRGlzdHJpYnV0ZWQgU3lzdGVtcykuIFRlY2hub2xvZ3kgZHJpdmVuIGUtdHJhZGluZyBmaXJtIGlzIHNlZWtpbmcgYSBza2lsbGVkIEMmIzQzOyYjNDM7IERldmVsb3BlciB3aXRoIGxvdyBsYXRlbmN5IHRyYWRpbmcgZXhwZXJ0aXNlLkFzIGEgQyYjNDM7JiM0MzsgRGV2ZWxvcGVyIHlvdSdsbCBqb2luIGEgc21hbGwgdGVhbSwgZGlzY3Vzc2luZyBpZGVhcyBhbmQgY29sbGFib3JhdGluZyB0byBzb2x2ZSBwcm9ibGVtcyBhbmQgb3B0aW1pc2UgZS10cmFkaW5nIHN5c3RlbXMgcGVyZm9ybWFuY2UgaW4gYSBjb2xsZWdpYXRlIHRlYW0gZW52aXJvbm1lbnQgdGhhdCB3aWxsIGNoYWxsZW5nZSB5b3UgYW5kIHByb3ZpZGUgY29udGludWFsbHkgbGVhcm5pbmcgb3Bwb3J0dW4uLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2MtZGV2ZWxvcGVyLWJhY2tlbmQtc29mdHdhcmUtZW5naW5lZXIvNDQ4NDg4NDEiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODQ4NzYyLCJkYl9pZCI6MTEyOSwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiIgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciBGdWxseSByZW1vdGUgVEVDIFBhcnRuZXJzIGFyZSB3b3JraW5nIHdpdGggb25lIG9mIHRoZSB3b3JsZCdzIGZhc3Rlc3QgZ3Jvd2luZyBnYW1pbmcgc3R1ZGlvcyB3aG8gYXJlIGxvb2tpbmcgdG8gaGlyZSBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgZXhwZXJpZW5jZWQgaW4gdGhlIEphdmFTY3JpcHQgZnJhbWV3b3JrLCBOb2RlLmpzLCB0byBqb2luIGEgZmFzdC1wYWNlZCwgaGlnaGx5IGNvbGxhYm9yYXRpdmUgdGVhbS4gVGhpcyBnYW1pbmcgc3R1ZGlvIGhhcyBjcmVhdGVkIHNvbWUgb2YgdGhlIG1vc3QgcmVjb2duaXNhYmxlIG1vYmlsZSBnYW1lcyBhbmQgaGFzIGEgcHJlc2VuY2UgaW4gb3ZlciAxMzYgY291bnRyaWVzLiBUaGlzLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9iYWNrZW5kLXNvZnR3YXJlLWVuZ2luZWVyLzQ0ODQ4NzYyIiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDgxODI3NiwiZGJfaWQiOjExMzAsInRpdGxlIjoiQmFja2VuZCBFbmdpbmVlciAtIFJlbW90ZSBFdXJvcGUiLCJkZXNjcmlwdGlvbiI6IiBCYWNrLWVuZCBFbmdpbmVlciAtIEdPIC0gUmVtb3RlICBXaG8gd2UgYXJlIFNlYXJjaERBVEEgR3JvdXAgaXMgY3VycmVudGx5IHJlY3J1aXRpbmcgYSBCYWNrLWVuZCBFbmdpbmVlciBmb3IgYSBTYWFTIHN0YXJ0LXVwIGNyZWF0aW5nIGEgbmV3IGJlc3Qgb2YgYnJlZWQgQ2xvdWQgRGF0YSBXYXJlaG91c2Ugc29sdXRpb24uIFlvdSdsbCBiZSBqb2luaW5nIGEgZ2xvYmFsIHRlYW0gb3BlcmF0aW5nIDEwMCUgcmVtb3RlbHksIGNvbnRyaWJ1dGluZyB0byB0aGUgZGVzaWduLCBkZXZlbG9wbWVudCBhbmQgb3B0aW1pemF0aW9uIG9mIGEgdHJ1bHkgZ3JvdW5kLWJyZWFraW5nIHByb2R1Y3QgYW5kIGEgY29tcGFueSB0aGF0IGhhcyByZWNlaXZlZCBzaWduaWZpY2FudCBpbnZlc3RtZW50IGEuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtZW5naW5lZXItcmVtb3RlLWV1cm9wZS80NDgxODI3NiIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ5NzkxOTcsImRiX2lkIjoxMTMxLCJ0aXRsZSI6IkJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgQyMgLk5ldCBUREQiLCJkZXNjcmlwdGlvbiI6IkJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgLyBEZXZlbG9wZXIgKEMjIC5OZXQgQWdpbGUgVEREKSAqSHlicmlkIFdmSCouIEdsb2JhbCBGaW5UZWNoIGlzIHNlZWtpbmcgYSBza2lsbGVkIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgd2l0aCBzdHJvbmcgQyMgLk5ldCBza2lsbHM7IGFzIGEga2V5IG1lbWJlciBvZiBhIG11bHRpLWRpc2NpcGxpbmFyeSBBZ2lsZSBkZXZlbG9wbWVudCB0ZWFtIHlvdSB3aWxsIGRlc2lnbiBhbmQgZGV2ZWxvcCAgZmxhZ3NoaXAgcmVhbC10aW1lLCBtaXNzaW9uIGNyaXRpY2FsIGludGVybmV0IHRyYWRpbmcgc3lzdGVtcywgQnJva2VyIFRyYWRpbmcgYW5kIEV4Y2hhbmdlIFRyYWRpbmcgU3lzdGVtIGdhdGV3YXlzLkFzIGEgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB5b3UnbGwgd29yayBhY3Jvc3MgdGhlIGZ1bGwgZGV2ZWxvcG1lLi4uICIsImxvY2F0aW9uIjoiU2hvcmVkaXRjaCIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci1jLW5ldC10ZGQvNDQ5NzkxOTciLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODEzOTk5LCJkYl9pZCI6MTEzNywidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIEMjIC5OZXQgU1FMIC0gRnJvbnQgT2ZmaWNlIiwiZGVzY3JpcHRpb24iOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIC8gRGV2ZWxvcGVyIChDIyAuTmV0IFNRTCkuIEFyZSB5b3UgYSBza2lsbGVkIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgd2l0aCBzdHJvbmcgQyMgLk5ldCBza2lsbHMgYW5kIEZyb250IE9mZmljZSB0cmFkaW5nIHN5c3RlbXMgZXhwZXJpZW5jZT8gWW91IGNvdWxkIGJlIHByb2dyZXNzaW5nIHlvdXIgY2FyZWVyIGF0IGEgaHVnZWx5IHN1Y2Nlc3NmdWwgQXNzZXQgTWFuYWdlci4gQXMgYSBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHlvdSB3aWxsIHdvcmsgb24gRnJvbnQgT2ZmaWNlIGFwcGxpY2F0aW9ucyB3aXRoIGEgZm9jdXMgb24gdGhlIGluLWhvdXNlIGJ1aWx0IHBvcnRmb2xpbyBtYW5hZ2VtZW50IHN5c3RlbS4gWW91J2xsIGNvbGxhYm9yYXRlIGNsb3NlbHkgd2l0aCBidXNpbmVzcyB1c2VycyAodHJhZGVycy4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci1jLW5ldC1zcWwtZnJvbnQtb2ZmaWNlLzQ0ODEzOTk5IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDgxMjg3MSwiZGJfaWQiOjExNDAsInRpdGxlIjoiQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciBDIyAuTmV0IENvcmUgQXp1cmUgQVdTIiwiZGVzY3JpcHRpb24iOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIC8gRGV2ZWxvcGVyIChDIyAuTmV0IENvcmUgQXp1cmUgQVdTKSAqSHlicmlkIFdmSCouIEFyZSB5b3UgYSB0ZWNobm9sb2dpc3Qgd2l0aCBzdHJvbmcgQ2xvdWQgYW5kIG1pY3Jvc2VydmljZXMgZXhwZXJpZW5jZT8gWW91IGNvdWxkIGJlIHByb2dyZXNzaW5nIHlvdXIgY2FyZWVyIGluIGEgc2VuaW9yIGhhbmRzLW9uIHJvbGUgYXQgYSBnbG9iYWwgRmluVGVjaCB3aXRoIHRoZSBpbnN1cmFuY2Ugc3BhY2UuIEFzIGEgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB5b3Ugd2lsbCBwcm92aWRlIHN1YmplY3QgbWF0dGVyIGV4cGVydGlzZSwgY29sbGFib3JhdGluZyB3aXRoIHRoZSBMZWFkIEFyY2hpdGVjdCB0byBndWlkZSBiZXN0IHByYWN0aWNlIGZvciBTYWFTIGNsb3VkIGJhc2VkIG1pY3Jvc2VydmljZXMgYmFja2VuZCBzeS4uLiAiLCJsb2NhdGlvbiI6IlJlaWdhdGUiLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtc29mdHdhcmUtZW5naW5lZXItYy1uZXQtY29yZS1henVyZS1hd3MvNDQ4MTI4NzEiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODA1MTU1LCJkYl9pZCI6MTE1OCwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIFB5dGhvbiBEYXRhIiwiZGVzY3JpcHRpb24iOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIC8gRGV2ZWxvcGVyIChNYWNoaW5lIExlYXJuaW5nIFB5dGhvbiBEYXRhIEFXUykgKkh5YnJpZCBXZkgqLiBBcmUgeW91IGEgc2tpbGxlZCBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHdpdGggc3Ryb25nIFB5dGhvbiBza2lsbHMgYW5kIGFuIGludGVyZXN0IGluIERhdGEgLyBNYWNoaW5lIExlYXJuaW5nPyBZb3UgY291bGQgYmUgcHJvZ3Jlc3NpbmcgeW91ciBjYXJlZXIgYXQgYSB0ZWNoIGRyaXZlbiBjb21tdW5pY2F0aW9ucyBzb2Z0d2FyZSBob3VzZSBpbiBhbiBvcGVuLCBjb2xsYWJvcmF0aXZlIGVudmlyb25tZW50IHdoZXJlIGxlYXJuaW5nIGFuZCBwZXJzb25hbCBkZXZlbG9wbWVudCBhcmUga2V5IGFuZCB0aGVyZSdzIGEgc3Ryb25nIHBpcGVsaW5lIG9mIEdyZWVuZmllbGQgcHJvamVjdHMgYXMgd2VsbCBhcyBmbC4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci1weXRob24tZGF0YS80NDgwNTE1NSIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ4MDMwMDEsImRiX2lkIjoxMTYyLCJ0aXRsZSI6IkphdmEgRGV2ZWxvcGVyIC8gQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiSmF2YSBEZXZlbG9wZXIgLyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyICpIeWJyaWQgV2ZIKi4gV291bGQgeW91IGxpa2UgdG8gd29yayBvbiBjb21wbGV4IGFuZCBpbnRlcmVzdGluZyByZWFsLXRpbWUsIGxvdyBsYXRlbmN5IHRyYWRpbmcgc3lzdGVtcyB0aGF0IHByb3ZpZGUgZGFpbHkgY2hhbGxlbmdlcyB3aGlsc3QgY29sbGFib3JhdGluZyB3aXRoIGEgZnJpZW5kbHkgYW5kIHVwYmVhdCB0ZWFtIHdpdGggY29udGludWFsIGxlYXJuaW5nICBhbmQgc2VsZi1kZXZlbG9wbWVudCBvcHBvcnR1bml0aWVzP1lvdSBjb3VsZCBiZSBqb2luaW5nIGEgRmluVGVjaCB0aGF0IGhhcyBiZWVuIGNvbnNpc3RlbnRseSB2b3RlZCBhcyBvbmUgb2YgdGhlIFVLcyB0b3AgZW1wbG95ZXJzLiBBcyBhIEphdmEgRGV2ZWxvcGVyIHlvdSB3aWxsIGRlc2lnbiBhbmQuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2phdmEtZGV2ZWxvcGVyLWJhY2tlbmQtc29mdHdhcmUtZW5naW5lZXIvNDQ4MDMwMDEiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODAyODc5LCJkYl9pZCI6MTE2MywidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIEMrKyIsImRlc2NyaXB0aW9uIjoiQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAvIERldmVsb3BlciAoQyYjNDM7JiM0MzspICpIeWJyaWQgV2ZIKi4gQXJlIHlvdSBhIGRhdGEgY2VudHJpYyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHdpdGggYW4gaW50ZXJlc3QgaW4gRjEgcmFjaW5nPyBZb3UgY291bGQgYmUgY29tYmluaW5nIHRoZSB0d28gd2hpbHN0IGNvbnRpbnVhbGx5IGxlYXJuaW5nIGFuZCBkZXZlbG9waW5nIHlvdXIgY2FyZWVyIGF0IGEgZ3Jvd2luZyBzb2Z0d2FyZSBob3VzZS4gQXMgYSBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHlvdSdsbCB3b3JrIG9uIGEgY29tcGxleCBkYXRhIGFuYWx5dGljcyBwcm9kdWN0IHVzZWQgYnkgc3BvcnRzIHRlYW1zIGFjcm9zcyBhIHJhbmdlIG9mIGRpc2NpcGxpbmVzIHRvIGRlbGl2ZXIgbGl2ZSBkYXRhIGFuYWx5c2lzIGFuZCBwcmVkaWN0aW9ucywuLi4gIiwibG9jYXRpb24iOiJTb3V0aHdhcmsiLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtc29mdHdhcmUtZW5naW5lZXItYy80NDgwMjg3OSIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ3NzU4MzcsImRiX2lkIjoxMTc3LCJ0aXRsZSI6IkJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgSmF2YSBtaWNyb3NlcnZpY2VzIiwiZGVzY3JpcHRpb24iOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIC8gRGV2ZWxvcGVyIChKYXZhIG1pY3Jvc2VydmljZXMpICpIeWJyaWQgV2ZIKi4gQXJlIHlvdSBhIHNlbmlvciBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIHNlZWtpbmcgYSByb2xlIHdoZXJlIHlvdSBjYW4gcmVtYWluIGhhbmRzLW9uIGFuZCB0YWtlIG93bmVyc2hpcCB3aGlsc3Qgd29ya2luZyBvbiBhIG1vZGVybiBtaWNyb3NlcnZpY2VzIHRlY2ggc3RhY2s/WW91IGNvdWxkIGJlIHByb2dyZXNzaW5nIHlvdXIgY2FyZWVyIGF0IGEgaGlnaCBncm93dGggRmluVGVjaCBzY2FsZS11cCB0aGF0IHByb3ZpZGVzIGEgcmFuZ2Ugb2YgU2FhUyBvcGVuIGJhbmtpbmcgc29sdXRpb25zLkFzIGEgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB5b3Ugd2lsbCBqb2luIGEgc21hbGwsIEFnaWxlIHRlYW0gcmVzcC4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci1qYXZhLW1pY3Jvc2VydmljZXMvNDQ3NzU4MzciLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0Nzc0NzEzLCJkYl9pZCI6MTE3OSwidGl0bGUiOiJHcmFkdWF0ZSBTb2Z0d2FyZSBFbmdpbmVlciAyMDIyICBQeXRob24gLyAgQmFja2VuZCAgLyBEaXN0cmlidXRlZCBTeXN0ZW1zIiwiZGVzY3JpcHRpb24iOiJHcmFkdWF0ZSBTb2Z0d2FyZSBFbmdpbmVlcnMgMjAyMiByZXF1aXJlZCB3aXRoIGFuIGludGVyZXN0IGluIGRpc3RyaWJ1dGVkIHN5c3RlbXMgYW5kIHN0cm9uZyBzb2Z0d2FyZSBFbmdpbmVlcmluZyBza2lsbHMgLiBpbnRlcmVzdCBpbiBzb21lIG9mIChQeXRob24sIEMsIEMjIE9PUCwgbmV0d29yayBwcm9ncmFtbWluZywgZXZlbnQtZHJpdmVuIHN5c3RlbXMgU0lQLCBILjMyMywgV2ViUlRDLCBMaW51eCBhZG1pbmlzdHJhdGlvbiwgICwgd2ViIGRldmVsb3BtZW50OiBKYXZhc2NyaXB0LCBUeXBlc2NyaXB0LCBBbmd1bGFyLCB0ZXN0IGF1dG9tYXRpb24pIGlzIHJlcXVpcmVkIGJ5IGZhc3QgZ3Jvd2luZyBhbmQgd29ybGQgbGVhZGluZyBWaWRlbyBDb2xsYWJvcmF0aW9uIGNvbXBhbnkgaW4gUmVhZGluZy5TdGFydGluZyBTYWxhcnkgJiMuLi4gIiwibG9jYXRpb24iOiJSZWFkaW5nIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9ncmFkdWF0ZS1zb2Z0d2FyZS1lbmdpbmVlci0yMDIyLXB5dGhvbi1iYWNrZW5kLWRpc3RyaWJ1dGVkLXN5c3RlbXMvNDQ3NzQ3MTMiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0Nzc0MDMwLCJkYl9pZCI6MTE4MCwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiJFeGNpdGluZyBjaGFuY2UgdG8gam9pbiBhIGJsb2NrY2hhaW4gc3RhcnQtdXAgYmFzZWQgaW4gTG9uZG9uL0Jpcm1pbmdoYW0gd2hvIGhhdmUgcmVjZW50bHkgYmVlbiBiYWNrZWQgYnkgYSBtYWpvciBhbW91bnQgb2YgZnVuZGluZyBhbmQgaW52ZXN0bWVudC5DT01QQU5ZIENVTFRVUkXigKIgVmFsdWUgaW5kZXBlbmRlbnQgdGhpbmtpbmcgYW5kIHNlbGYtbW90aXZhdGlvbuKAoiBObyBtaWNyby1tYW5hZ2luZyBldmVyeSB0YXNr4oCiIExvdmUg4oCcY3JhennigJ0gaWRlYXMsIGFuZCBnaXZpbmcgb3VyIHBlb3BsZSB0aGUgdGltZSBhbmQgcmVzb3VyY2VzIG5lZWRlZCB0byBtYWtlIHRob3NlIGlkZWFzIHJlYWzigKIgRm9sbG93IGEgdmVyeSBhZ2lsZSBtaW5kc2V04oCiIEEgZmxhdCBoaWVyYXJjaHkgLSBlbmpveSBtZWV0aW5nIHVwIGluLi4uICIsImxvY2F0aW9uIjoiQmlybWluZ2hhbSIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9iYWNrZW5kLXNvZnR3YXJlLWVuZ2luZWVyLzQ0Nzc0MDMwIiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDc3MjU4NSwiZGJfaWQiOjExODIsInRpdGxlIjoiSmF2YSBEZXZlbG9wZXIgLyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiJKYXZhIERldmVsb3BlciAvIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgKEphdmEgTWF0aHMpICpIeWJyaWQgV2ZIKi4gQXJlIHlvdSBhIEphdmEgRGV2ZWxvcGVyIHdpdGggZmluYW5jaWFsIHN5c3RlbXMgZXhwZXJpZW5jZSBzZWVraW5nIGEgbmV3IHJvbGUgd2hlcmUgeW91IGNhbiBhcHBseSBhbmQgZGV2ZWxvcCB5b3VyIHNraWxscz8gWW91IGNvdWxkIGJlIGpvaW5pbmcgYSBDaXR5IGJhc2VkIHRyYWRpbmcgZmlybSwgd29ya2luZyBvbiAgY29tcGxleCBhbmQgaW50ZXJlc3Rpbmcgc3lzdGVtcyBhbmQgcHJvZ3Jlc3NpbmcgeW91ciBjYXJlZXIuIEFzIGEgSmF2YSBEZXZlbG9wZXIgeW91IHdpbGwgZGVzaWduIGFuZCBkZXZlbG9wIFByaWNpbmcgJmFtcDsgUmlzayBzeXN0ZW1zIGFjcm9zcyBtdWx0aXBsZSBhc3NldCBjbGFzc2VzIChFcXVpdGllcywgRlgsIENvbS4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvamF2YS1kZXZlbG9wZXItYmFja2VuZC1zb2Z0d2FyZS1lbmdpbmVlci80NDc3MjU4NSIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ3NTMwNDIsImRiX2lkIjoxMTg0LCJ0aXRsZSI6IlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyICIsImRlc2NyaXB0aW9uIjoiIFRoZSBvcHBvcnR1bml0eTogIFNlbmlvciBiYWNrLWVuZCBFbmdpbmVlciBuZWVkZWQgdG8gam9pbiB0aGUgZWFybHkgc3RhZ2VzIG9mIGEgaGlnaGx5IGlubm92YXRpdmUgYW5kIGV4Y2l0aW5nIG5ldyBwbGF0Zm9ybSB0cmFuc2Zvcm1pbmcgdGhlIHdheSBjaGlsZGNhcmUgaXMgYXJyYW5nZWQuIEluIHRoaXMgcG9zaXRpb24sIHlvdSB3aWxsIGJlIGFjdGl2ZSBpbiBzaGFwaW5nIHRoZSBncm93dGggb2YgdGhlIHBsYXRmb3JtIGFuZCB0aGUgY3VsdHVyZSBvZiB0aGlzIG5ldyBidXNpbmVzcy4gIFlvdXIgdGFzazogSW4gdGhpcyByb2xlIHlvdSB3aWxsIGNvbGxhYm9yYXRlIHdpdGggdGhlIEVuZ2luZWVyaW5nIExlYWRlcnNoaXAgdG8gYnVpbGQgYW5kIG93biB0aGUgYmFja2VuZCBvZi4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc2VuaW9yLWJhY2tlbmQtZW5naW5lZXIvNDQ3NTMwNDIiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzQ2ODczLCJkYl9pZCI6MTE4OCwidGl0bGUiOiJCYWNrZW5kIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiIgQmFja2VuZCBFbmdpbmVlciYjMTYzOzUwLDAwMCAtICYjMTYzOzYwLDAwMCAmIzQzOyBCZW5lZml0c0xvbmRvbiAtIE1vc3RseSBSZW1vdGUgQSBnYW1pbmcgc3RhcnQtdXAgaXMgaGlyaW5nIGEgQmFja2VuZCBQeXRob24gRW5naW5lZXIgdG8gam9pbiB0aGVpciBleHBhbmRpbmcgRWRpbmJ1cmdoLWJhc2VkIHRlYW0sIHNlZWtpbmcgdG8gcmV2b2x1dGlvbml6ZSB0aGUgJnF1b3Q7Z2FtZXImcXVvdDsgc3RlcmVvdHlwZS4gVGhlaXIgdGVjaG5vbG9neSBzZWVrcyB0byBwcm92aWRlIGludGVyZXN0aW5nLCB3ZWlyZCwgYW5kIHdvbmRlcmZ1bCB0aGluZ3MuIFRoZXkgYXJlIHNlZWtpbmcgYSBtb3RpdmF0ZWQgIGFuZCBjb21tZXJjaWFsbHkgZXhwZXJpZW5jZWQgLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9iYWNrZW5kLWVuZ2luZWVyLzQ0NzQ2ODczIiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDc0Njg3NywiZGJfaWQiOjExODksInRpdGxlIjoiQmFja2VuZCBzb2Z0d2FyZSBlbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiIEJBQ0tFTkQgU09GVFdBUkUgRU5HSU5FRVIgTE9ORE9OL0hZQlJJRCAmIzE2Mzs1MCwwMDAtJiMxNjM7NjAsMDAwIEhhcm5oYW0gaXMgd29ya2luZyBleGNsdXNpdmVseSB3aXRoIGEgbmV3IGNsaWVudCwgd2hvIGFyZSBhIGZyZXNoIHN0YXJ0LXVwLCBpbiB0aGUgc29jaWFsIG1lZGlhIGdhbWluZyBzZWN0b3IuIFRoaXMgcG9zaXRpb24gb2ZmZXJzIHRoZSBvcHBvcnR1bml0eSB0byBqb2luIGFuIGV4Y2l0aW5nIG5ldyBjb21wYW55IGR1cmluZyBpdHMgZ3Jvd3RoIHBoYXNlLCBnaXZpbmcgdGhlIGNvcnJlY3QgY2FuZGlkYXRlIGEgbG90IG9mIG93bmVyc2hpcCBhbmQgIGNhcmVlciBwcm9ncmVzc2lvbi4gVEhFIENPTVBBTlk6PC8uLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtc29mdHdhcmUtZW5naW5lZXIvNDQ3NDY4NzciLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0MjY3MTcyLCJkYl9pZCI6MTE5MSwidGl0bGUiOiJCYWNrZW5kIEphdmFTY3JpcHQgRW5naW5lZXIiLCJkZXNjcmlwdGlvbiI6IiBKb2JUaXRsZTogQmFja2VuZCBKYXZhU2NyaXB0IEVuZ2luZWVyIExvY2F0aW9uOiBIeWJyaWQgd29ya2luZywgMiBkYXlzIHAvdyBpbiB0aGUgb2ZmaWNlIChMb25kb24pIEVtcGxveW1lbnQgVHlwZTogUGVybWFuZW50IFNhbGFyeSBSYW5nZTogJiMxNjM7ODUsMDAwIHRvICYjMTYzOzEwMCwwMDAgKGRlcGVuZGFudCBvbiBleHBlcmllbmNlKSBwbHVzIGEgZ3JlYXQgYmVuZWZpdHMgcGFja2FnZSBKb2luIG9uZSBvZiB0aGUgVUsncyBsZWFkaW5nIEZpdG5lc3MgVGVjaCBjb21wYW5pZXMgYW5kIGJlIGEgcGFydCBvZiBhIGh1Z2VseSBzdWNjZXNzZnVsICcuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtamF2YXNjcmlwdC1lbmdpbmVlci80NDI2NzE3MiIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ3MzE4MTQsImRiX2lkIjoxMTk2LCJ0aXRsZSI6IlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyIC0gUHl0aG9uLCBEamFuZ28iLCJkZXNjcmlwdGlvbiI6IiBTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIFB5dGhvbiwgRGphbmdvIE94U291cmNlIGlzIGN1cnJlbnRseSBvbiB0aGUgbG9va291dCBmb3IgYSBTZW5pb3IgQmFja2VuZCBFbmdpbmVlciB0byBqb2luIGEgcmFwaWRseSBncm93aW5nIHNjYWxlLXVwIHdvcmtpbmcgYXQgdGhlIGZvcmVmcm9udCBvZiB0ZWNobm9sb2d5LiBUaGUgc3VjY2Vzc2Z1bCBCYWNrZW5kIEVuZ2luZWVyIHdpbGwgaGF2ZSBhIGJhY2tncm91bmQgaW4gUHl0aG9uIGFuZCBrbm93bGVkZ2Ugb2YgdGVjaG5vbG9naWVzIHN1Y2ggYXMgRGphbmdvIG9yIEZsYXNrLiBUaGUgc3VjY2Vzc2Z1bCBhcHBsaWNhbnQgd2lsbCBqb2luIGEgZ3Jvd2luZyB0ZWFtIHRvIGxlYWQgdGhlIGRldmVsb3BtZW50LCBpbnRlZ3JhdGlvbiwgYW5kIG1haW50ZW5hbmNlIG9mIGEga2UuLi4gIiwibG9jYXRpb24iOiJPeGZvcmQiLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1iYWNrZW5kLWVuZ2luZWVyLXB5dGhvbi1kamFuZ28vNDQ3MzE4MTQiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzE2NDQ5LCJkYl9pZCI6MTMwNCwidGl0bGUiOiJCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiIgT3V0c2lkZSBJUjM1LTEgRGF5IFBlciBXZWVrLSAzLTYgTW9udGhzIENvbnRyYWN0LSBSZW1vdGUgU2FsdCBhcmUgbG9va2luZyB0byBzcGVhayB0byBhIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgb24gYmVoYWxmIG9mIG91ciBjbGllbnQuIE91ciBjbGllbnQgaXMgYSBzdGFydCB1cCBzb2Z0d2FyZSBjb21wYW55IHdobyBhcmUgZ29pbmcgdGhyb3VnaCBhbiBleGNpdGluZyBwZXJpb2Qgb2YgZ3Jvd3RoLiBUaGV5IGFyZSBsb29raW5nIHRvIGJyaW5nIG9uIGEgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciAxIGRheSBhIHdlZWsgdG8gYmUgdGhlICBzb2xlIGRldmVsb3BlciB3b3JraW5nIG9uIHByb2plY3RzIHN1Y2ggYXMgYnVnIGZpeGluZyBhbmQgZmluaXNoaW5nIHVwIHRoZSBjbG91ZC4gUHJldmlvdXMgZXhwZXJpZW5jZSBpbiB0aGUgZm9sbG93aW4uLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtc29mdHdhcmUtZW5naW5lZXIvNDQ3MTY0NDkiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzAyMjUwLCJkYl9pZCI6MTMwNSwidGl0bGUiOiJCYWNrZW5kIFN0YWZmIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiJCYWNrZW5kIFN0YWZmIEVuZ2luZWVyR2VybWFueSAtIFJlbW90ZTgwLTEwMGsgJiM0MzsgR3JlYXQgQmVuZWZpdHNPdXIgaW5mb3JtYXRpb24gdGVjaG5vbG9neSBhbmQgc2VydmljZXMgY29tcGFueSBkZXNpZ25zIGFuZCBkZWxpdmVycyBpbnR1aXRpdmUgdG9vbHMgdG8gdGhlIGJ1c2luZXNzIGNvbW11bml0eS4gVG8gYnVpbGQgdXBvbiB0aGVpciBlbnZpYWJsZSBwb3NpdGlvbiwgdGhleSBoYXZlIGFuIGltbWVkaWF0ZSBvcGVuaW5nIGZvciBhIEJhY2tlbmQgU3RhZmYgRW5naW5lZXIgdG8gYmUgYmFzZWQgaW4gR2VybWFueS5BcyBhIEJhY2tlbmQgU3RhZmYgRW5naW5lZXIsIHlvdSB3aWxsOiAqIExlYWQgYmFja2VuZCBhcmNoaXRlY3R1cmUqIE92ZXJzZWUgb25nb2luZyBwcm9qZWN0cyBhbi4uLiAiLCJsb2NhdGlvbiI6Ikdlcm1hbnkiLCJzYWxhcnkiOnt9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYmFja2VuZC1zdGFmZi1lbmdpbmVlci80NDcwMjI1MCIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ2ODI1NTIsImRiX2lkIjoxMzA2LCJ0aXRsZSI6IlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyIC0gSlZNIC0gRmluVGVjaCBGWCIsImRlc2NyaXB0aW9uIjoiIEEgaGlnaC1ncm93dGggYW5kIGlubm92YXRpdmUgRmludGVjaCBTdGFydHVwIHRoYXQgaGVscHMgU01FIGJ1c2luZXNzZXMgZGVhbCB3aXRoIGlzc3VlcyBvZiBDdXJyZW5jeSBSaXNrIGlzIGxvb2tpbmcgZm9yIGEgc2VuaW9yIGJhY2tlbmQgZW5naW5lZXIgKEphdmEgS290bGluKSB0byBqb2luIHRoZWlyIGVhcmx5IHN0YWdlIHRlYW0uIEEgcHJvYmxlbSB0aGF0IGFmZmVjdHMgbWlsbGlvbnMgb2YgYnVzaW5lc3NlcyBnbG9iYWxseSBldmVyeSBkYXkuICBUaGlzIHByb2JsZW0gY2FuIG9mdGVuIGJlIGF2ZXJ0ZWQgYnkgbGFyZ2UgYnVzaW5lc3NlcyBidXQgY2FuIGJlIGEgcmVhbCBpc3N1ZSBmb3Igc21hbGxlciBidXNpbmVzc2VzIHRoYXQgaGF2ZSBzbWFsbGVyIGNhcGl0YWwgYW5kIGxlc3MgZXhwZXJ0aXNlIG9uIHRoZSBtYXR0ZXIuIFRoaXMgc3RhcnQtdXAgaXMgYi4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc2VuaW9yLWJhY2tlbmQtZW5naW5lZXItanZtLWZpbnRlY2gtZngvNDQ2ODI1NTIiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NjMxMjY1LCJkYl9pZCI6MTMwNywidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIMKjMTMgbWlsbGlvbiBTZXJpZXMgQSIsImRlc2NyaXB0aW9uIjoiIFRoZSBDb21wYW55IEEgaGlnaC1ncm93dGggdGVjaG5vbG9neSBzY2FsZS11cCB3aG9zZSBwcm9kdWN0IGlzIHVzZWQgYnkgc29tZSBvZiB0aGUgd29ybGQncyBsYXJnZXN0IGNsb3RoaW5nIGJyYW5kcyB0byBvZmZlciBjdXN0b21pemF0aW9uIGFuZCBwZXJzb25hbGl6YXRpb24gaXMgbG9va2luZyBmb3IgYSBicmFuZCBuZXcgc2VuaW9yIGJhY2tlbmQgZW5naW5lZXIgdG8gam9pbiBpdHMgZ3Jvd2luZyB0ZWFtISBCeSBqb2luaW5nIGEgc21hbGwgYWdpbGUgYnVzaW5lc3Mgd2l0aCBhbiBlbmdpbmVlcmluZyB0ZWFtIG9mIDEwIHlvdSB3aWxsIGhhdmUgYSBncmVhdCBvcHBvcnR1bml0eSB0byBtYWtlIGEgbWFzc2l2ZSBpbXBhY3Qgd2l0aGluIHRoZSBidXNpbmVzcyBhbmQgZXhwZXJpZW5jZSBxdWkuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1iYWNrZW5kLWVuZ2luZWVyLTEzLW1pbGxpb24tc2VyaWVzLWEvNDQ2MzEyNjUiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NjEyNDM2LCJkYl9pZCI6MTMwOCwidGl0bGUiOiJCYWNrZW5kIE5vZGUuanMgU29mdHdhcmUgRW5naW5lZXIgKEh5YnJpZCBXb3JraW5nIE9wdGlvbnMpIiwiZGVzY3JpcHRpb24iOiIgUG9zaXRpb246IEJhY2tlbmQgTm9kZS5qcyBTb2Z0d2FyZSBFbmdpbmVlciBTYWxhcnk6ICYjMTYzOzM1LDAwMCAtICYjMTYzOzQ1LDAwMCBwZXIgeWVhciAoZGVwZW5kZW50IG9uIGV4cGVyaWVuY2UpTG9jYXRpb246IFRldGJ1cnkgJiM0MzsgaHlicmlkIHJlbW90ZSB3b3JraW5nIG9wdGlvbnNFbXBsb3ltZW50IEhvdXJzOiA0MCBob3VycyBwZXIgd2VlayAoTW9uZGF5IHRvIEZyaWRheSlTdGFydCBEYXRlOiBBU0FQIER1ZSB0byBwaGVub21lbmFsIGdyb3d0aCwgb3VyIGNsaWVudCBpcyBsb29raW5nIGZvciBhIGJhY2tlbmQgc29mdHdhcmUgZW5naW5lZXIgdG8gd29yayB3aS4uLiAiLCJsb2NhdGlvbiI6IlRldGJ1cnkiLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtbm9kZWpzLXNvZnR3YXJlLWVuZ2luZWVyLWh5YnJpZC13b3JraW5nLW9wdGlvbnMvNDQ2MTI0MzYiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NjA0OTIzLCJkYl9pZCI6MTMwOSwidGl0bGUiOiJCYWNrZW5kIGVuZ2luZWVyLCBiYWNrIGVuZCBkZXZlbG9wZXIsIEdvbGFuZyBEZXZlbG9wZXIiLCJkZXNjcmlwdGlvbiI6IiBCYWNrZW5kIGVuZ2luZWVyLCBzb2Z0d2FyZSBlbmdpbmVlciBHb2xhbmcgZGV2ZWxvcGVyLCBUaGUgSm9iIFlvdSB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciB0aGUgY29udGludWVkIGRldmVsb3BtZW50IG9mIG91ciBiYWNrLWVuZCBwbGF0Zm9ybS4gV2UgYXJlIGxvb2tpbmcgZm9yIHNvbWVvbmUgd2hvIGlzIHBhc3Npb25hdGUgYW5kIGNyZWF0aXZlLCB3aG8gd2lsbCBiZSBhYmxlIHRvIGRyaXZlIGlubm92YXRpb24gYW5kIGVuc3VyZSB3ZSBoYXZlIHRoZSBiZXN0IHNvbHV0aW9uIHBvc3NpYmxlLiBPdXIgY2hhbGxlbmdlcyBpbmNsdWRlOiAgRGV2ZWxvcGluZyB0aGUgYmVzdCBwbGF0Zm9ybXMgd2UgY2FuLCB1c2luZyB0aGUgbGF0ZXN0IHRlY2hub2xvZ2llcywuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtZW5naW5lZXItYmFjay1lbmQtZGV2ZWxvcGVyLWdvbGFuZy1kZXZlbG9wZXIvNDQ2MDQ5MjMiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NTU4NDM1LCJkYl9pZCI6MTMxMCwidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIFdvcmsgaW4gR29sYW5nIHdpdGhpbiBBSS9NTCIsImRlc2NyaXB0aW9uIjoiIFNlbmlvciBCYWNrZW5kIEVuZ2luZWVyIC0gV29yayBpbiBHb2xhbmcgd2l0aGluIEFJL01MIEhpZ2ggZ3Jvd3RoIGFuZCBkaXNydXB0aXZlIG1hY2hpbmUgbGVhcm5pbmcgc2NhbGUtdXAgYXJlIGxvb2tpbmcgdG8gaGlyZSBtdWx0aXBsZSBiYWNrZW5kIGVuZ2luZWVycyB0byB3b3JrIG9uIHRoZWlyIEdvbGFuZyBiYWNrZW5kIGFuZCBtYWNoaW5lIGxlYXJuaW5nIHN5c3RlbXMuIEhhdmluZyByZWNlbnRseSByZWNlaXZlZCBhIHNpZ25pZmljYW50IGZ1bmRpbmcgcm91bmQgb2YgJDE1IE1pbGxpb24gdGhpcyBBSSBDeWJlciBzZWN1cml0eSBzY2FsZS11cCAgaXMgbG9va2luZyB0byBoaXJlIHN0cm9uZyBiYWNrZW5kIGVuZ2luZWVycyBmb3IgdGhlaXIgcmVtb3RlIFVLIHRlYW0uIFdvcmtpbmcgZGlyZWN0bHkgd2l0aCBhIG51bWJlciBvZiBzZW5pb3IgdGVjLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItYmFja2VuZC1lbmdpbmVlci13b3JrLWluLWdvbGFuZy13aXRoaW4tYWktbWwvNDQ1NTg0MzUiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0OTg5NDE5LCJkYl9pZCI6MTMxMSwidGl0bGUiOiJQeXRob24gRGV2ZWxvcGVyIC8gUHl0aG9uIEVuZ2luZWVyIC0gSW52ZXN0bWVudCBCYW5raW5nIiwiZGVzY3JpcHRpb24iOiJQeXRob24gRGV2ZWxvcGVyLCBTb2Z0d2FyZSBFbmdpbmVlciwgQmFja2VuZCBEZXZlbG9wZXIsIEJhY2tlbmQgRW5naW5lZXIsIEJhbmtpbmcsIEF0aGVuYSwgUXVhcnR6LCBGaW5hbmNlLCBGWCwgRm9yZWlnbiBFeGNoYW5nZSwgU3dhcHMsIFJhdGVzLCBCb25kcywgRXhvdGljcyBXZSBhcmUgbG9va2luZyB0byBvbiBib2FyZCBhIFB5dGhvbiBEZXZlbG9wZXIgd2l0aCBiYW5raW5nIC8gZmluYW5jaWFsIHNlcnZpY2VzIGV4cGVyaWVuY2U7IHNwZWNpZmljYWxseSAgRlggKEZvcmVpZ24gRXhjaGFuZ2UpIHdvcmtpbmcgZm9yIGVtYWdpbmUgb25zaXRlIHdpdGggYSBsZWFkaW5nIEdsb2JhbCBJbnZlc3RtZW50IEJhbmsuIEFzIHRoaXMgaXMgYSBicmFuZCBuZXcgdHJhZGluZyBmbG9vciwgdGhlIHN1Y2Nlc3NmdWwgUHl0aG9uIERldmVsb3BlciB3aWxsIGJlIGVzc2VudGlhbCBpbiBoZWxwaS4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9weXRob24tZGV2ZWxvcGVyLXB5dGhvbi1lbmdpbmVlci1pbnZlc3RtZW50LWJhbmtpbmcvNDQ5ODk0MTkiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0OTg4MTg5LCJkYl9pZCI6MTMxMiwidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIEphdmEiLCJkZXNjcmlwdGlvbiI6IlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyIC0gSmF2YUJpcm1pbmdoYW0sIFVuaXRlZCBLaW5nZG9tIHwgTWlkLUxldmVsIHwgRW5naW5lZXJpbmdTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIEphdmEgKHcvbS9kKUFib3V0IExpdmVQZXJzb25UaGUgd29ybGQncyBtb3N0IGlubm92YXRpdmUgYnJhbmRzIGNob29zZSBMaXZlUGVyc29uJ3MgQ29udmVyc2F0aW9uYWwgQ2xvdWQuIE91ciBBSS1wb3dlcmVkIENvbnZlcnNhdGlvbmFsIENsb3VkIGhhcyAgbWFkZSBvdmVyIGEgYmlsbGlvbiBicmFuZC10by1jb25zdW1lciBjb252ZXJzYXRpb25zIHBvc3NpYmxlLiBXZSBtYWtlIGl0IGVhc3kgZm9yIGNvbnN1bWVycyB0byBhc2sgcXVlc3Rpb25zIGFuZCBtYWtlIHB1cmNoYXNlcyBpbiB0aGUgbWVzc2FnaW5nIGNoYW5uZWxzIHRoZXkgdXNlIGV2ZXJ5IGRheS4gV2Ugc2VydmUgMTgwMDAmIzQzOyBjLi4uICIsImxvY2F0aW9uIjoiQmlybWluZ2hhbSIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItYmFja2VuZC1lbmdpbmVlci1qYXZhLzQ0OTg4MTg5IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDk4MzczMCwiZGJfaWQiOjEzMTMsInRpdGxlIjoiU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgLSBKYXZhIiwiZGVzY3JpcHRpb24iOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIEphdmFNYW5jaGVzdGVyLCBVbml0ZWQgS2luZ2RvbSB8IE1pZC1MZXZlbCB8IEVuZ2luZWVyaW5nU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgLSBKYXZhICh3L20vZClBYm91dCBMaXZlUGVyc29uVGhlIHdvcmxkJ3MgbW9zdCBpbm5vdmF0aXZlIGJyYW5kcyBjaG9vc2UgTGl2ZVBlcnNvbidzIENvbnZlcnNhdGlvbmFsIENsb3VkLiBPdXIgQUktcG93ZXJlZCBDb252ZXJzYXRpb25hbCBDbG91ZCBoYXMgIG1hZGUgb3ZlciBhIGJpbGxpb24gYnJhbmQtdG8tY29uc3VtZXIgY29udmVyc2F0aW9ucyBwb3NzaWJsZS4gV2UgbWFrZSBpdCBlYXN5IGZvciBjb25zdW1lcnMgdG8gYXNrIHF1ZXN0aW9ucyBhbmQgbWFrZSBwdXJjaGFzZXMgaW4gdGhlIG1lc3NhZ2luZyBjaGFubmVscyB0aGV5IHVzZSBldmVyeSBkYXkuIFdlIHNlcnZlIDE4MDAwJiM0MzsgYy4uLiAiLCJsb2NhdGlvbiI6Ik1hbmNoZXN0ZXIiLCJzYWxhcnkiOnt9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc2VuaW9yLWJhY2tlbmQtZW5naW5lZXItamF2YS80NDk4MzczMCIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ5Nzc0NDQsImRiX2lkIjoxMzE0LCJ0aXRsZSI6IlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyIC0gSmF2YSIsImRlc2NyaXB0aW9uIjoiU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgLSBKYXZhTG9uZG9uLCBVbml0ZWQgS2luZ2RvbSB8IE1pZC1MZXZlbCB8IEVuZ2luZWVyaW5nU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgLSBKYXZhICh3L20vZClBYm91dCBMaXZlUGVyc29uVGhlIHdvcmxkJ3MgbW9zdCBpbm5vdmF0aXZlIGJyYW5kcyBjaG9vc2UgTGl2ZVBlcnNvbidzIENvbnZlcnNhdGlvbmFsIENsb3VkLiBPdXIgQUktcG93ZXJlZCBDb252ZXJzYXRpb25hbCBDbG91ZCBoYXMgbWFkZSAgb3ZlciBhIGJpbGxpb24gYnJhbmQtdG8tY29uc3VtZXIgY29udmVyc2F0aW9ucyBwb3NzaWJsZS4gV2UgbWFrZSBpdCBlYXN5IGZvciBjb25zdW1lcnMgdG8gYXNrIHF1ZXN0aW9ucyBhbmQgbWFrZSBwdXJjaGFzZXMgaW4gdGhlIG1lc3NhZ2luZyBjaGFubmVscyB0aGV5IHVzZSBldmVyeSBkYXkuIFdlIHNlcnZlIDE4MDAwJiM0MzsgY3VzdG8uLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnt9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc2VuaW9yLWJhY2tlbmQtZW5naW5lZXItamF2YS80NDk3NzQ0NCIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ5NTA1MzgsImRiX2lkIjoxMzE1LCJ0aXRsZSI6IlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyIC0gSmF2YSIsImRlc2NyaXB0aW9uIjoiU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgLSBKYXZhTWFuY2hlc3RlciwgVW5pdGVkIEtpbmdkb20gfCBNaWQtTGV2ZWwgfCBFbmdpbmVlcmluZ1NlbmlvciBCYWNrZW5kIEVuZ2luZWVyIC0gSmF2YSAody9tL2QpQWJvdXQgTGl2ZVBlcnNvblRoZSB3b3JsZCdzIG1vc3QgaW5ub3ZhdGl2ZSBicmFuZHMgY2hvb3NlIExpdmVQZXJzb24ncyBDb252ZXJzYXRpb25hbCBDbG91ZC4gT3VyIEFJLXBvd2VyZWQgQ29udmVyc2F0aW9uYWwgQ2xvdWQgaGFzICBtYWRlIG92ZXIgYSBiaWxsaW9uIGJyYW5kLXRvLWNvbnN1bWVyIGNvbnZlcnNhdGlvbnMgcG9zc2libGUuIFdlIG1ha2UgaXQgZWFzeSBmb3IgY29uc3VtZXJzIHRvIGFzayBxdWVzdGlvbnMgYW5kIG1ha2UgcHVyY2hhc2VzIGluIHRoZSBtZXNzYWdpbmcgY2hhbm5lbHMgdGhleSB1c2UgZXZlcnkgZGF5LiBXZSBzZXJ2ZSAxODAwMCYjNDM7IGMuLi4gIiwibG9jYXRpb24iOiJNYW5jaGVzdGVyIiwic2FsYXJ5Ijp7fSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1iYWNrZW5kLWVuZ2luZWVyLWphdmEvNDQ5NTA1MzgiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0OTUwMTc5LCJkYl9pZCI6MTMxNiwidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIEphdmEiLCJkZXNjcmlwdGlvbiI6IlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyIC0gSmF2YUJpcm1pbmdoYW0sIFVuaXRlZCBLaW5nZG9tIHwgTWlkLUxldmVsIHwgRW5naW5lZXJpbmdTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIEphdmEgKHcvbS9kKUFib3V0IExpdmVQZXJzb25UaGUgd29ybGQncyBtb3N0IGlubm92YXRpdmUgYnJhbmRzIGNob29zZSBMaXZlUGVyc29uJ3MgQ29udmVyc2F0aW9uYWwgQ2xvdWQuIE91ciBBSS1wb3dlcmVkIENvbnZlcnNhdGlvbmFsIENsb3VkIGhhcyAgbWFkZSBvdmVyIGEgYmlsbGlvbiBicmFuZC10by1jb25zdW1lciBjb252ZXJzYXRpb25zIHBvc3NpYmxlLiBXZSBtYWtlIGl0IGVhc3kgZm9yIGNvbnN1bWVycyB0byBhc2sgcXVlc3Rpb25zIGFuZCBtYWtlIHB1cmNoYXNlcyBpbiB0aGUgbWVzc2FnaW5nIGNoYW5uZWxzIHRoZXkgdXNlIGV2ZXJ5IGRheS4gV2Ugc2VydmUgMTgwMDAmIzQzOyBjLi4uICIsImxvY2F0aW9uIjoiQmlybWluZ2hhbSIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItYmFja2VuZC1lbmdpbmVlci1qYXZhLzQ0OTUwMTc5IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDkzNjc5NCwiZGJfaWQiOjEzMTcsInRpdGxlIjoiU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgQysrIiwiZGVzY3JpcHRpb24iOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciBDJiM0MzsmIzQzO0xvbmRvbiwgVW5pdGVkIEtpbmdkb20gfCBNaWQtTGV2ZWwgfCBFbmdpbmVlcmluZ1RoZSB3b3JsZCdzIG1vc3QgaW5ub3ZhdGl2ZSBicmFuZHMgY2hvb3NlIExpdmVQZXJzb24ncyBDb252ZXJzYXRpb25hbCBDbG91ZC4gT3VyIEFJLXBvd2VyZWQgQ29udmVyc2F0aW9uYWwgQ2xvdWQgaGFzIG1hZGUgb3ZlciBhIGJpbGxpb24gYnJhbmQtdG8tY29uc3VtZXIgY29udmVyc2F0aW9ucyBwb3NzaWJsZS4gIFdlIG1ha2UgaXQgZWFzeSBmb3IgY29uc3VtZXJzIHRvIGFzayBxdWVzdGlvbnMgYW5kIG1ha2UgcHVyY2hhc2VzIGluIHRoZSBtZXNzYWdpbmcgY2hhbm5lbHMgdGhleSB1c2UgZXZlcnkgZGF5LiBXZSBzZXJ2ZSAxODAwMCYjNDM7IGxlYWRpbmcgY3VzdG9tZXJzIGJyYW5kcyBsaWtlIENpdGliYW5rLCBIU0JDLCBPcmFuZ2UsIC4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItYmFja2VuZC1lbmdpbmVlci1jLzQ0OTM2Nzk0IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDkzNTk0MSwiZGJfaWQiOjEzMTgsInRpdGxlIjoiU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgLSBKYXZhIiwiZGVzY3JpcHRpb24iOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIEphdmFMb25kb24sIFVuaXRlZCBLaW5nZG9tIHwgTWlkLUxldmVsIHwgRW5naW5lZXJpbmdTZW5pb3IgQmFja2VuZCBFbmdpbmVlciAtIEphdmEgKHcvbS9kKUFib3V0IExpdmVQZXJzb25UaGUgd29ybGQncyBtb3N0IGlubm92YXRpdmUgYnJhbmRzIGNob29zZSBMaXZlUGVyc29uJ3MgQ29udmVyc2F0aW9uYWwgQ2xvdWQuIE91ciBBSS1wb3dlcmVkIENvbnZlcnNhdGlvbmFsIENsb3VkIGhhcyBtYWRlICBvdmVyIGEgYmlsbGlvbiBicmFuZC10by1jb25zdW1lciBjb252ZXJzYXRpb25zIHBvc3NpYmxlLiBXZSBtYWtlIGl0IGVhc3kgZm9yIGNvbnN1bWVycyB0byBhc2sgcXVlc3Rpb25zIGFuZCBtYWtlIHB1cmNoYXNlcyBpbiB0aGUgbWVzc2FnaW5nIGNoYW5uZWxzIHRoZXkgdXNlIGV2ZXJ5IGRheS4gV2Ugc2VydmUgMTgwMDAmIzQzOyBjdXN0by4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItYmFja2VuZC1lbmdpbmVlci1qYXZhLzQ0OTM1OTQxIiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDkzNDE4NiwiZGJfaWQiOjEzMTksInRpdGxlIjoiU2VuaW9yIEJhY2tlbmQgRW5naW5lZXIgQysrIiwiZGVzY3JpcHRpb24iOiJTZW5pb3IgQmFja2VuZCBFbmdpbmVlciBDJiM0MzsmIzQzO01hbmNoZXN0ZXIsIFVuaXRlZCBLaW5nZG9tIHwgTWlkLUxldmVsIHwgRW5naW5lZXJpbmdUaGUgd29ybGQncyBtb3N0IGlubm92YXRpdmUgYnJhbmRzIGNob29zZSBMaXZlUGVyc29uJ3MgQ29udmVyc2F0aW9uYWwgQ2xvdWQuIE91ciBBSS1wb3dlcmVkIENvbnZlcnNhdGlvbmFsIENsb3VkIGhhcyBtYWRlIG92ZXIgYSBiaWxsaW9uIGJyYW5kLXRvLWNvbnN1bWVyIGNvbnZlcnNhdGlvbnMgcG9zc2libGUuICBXZSBtYWtlIGl0IGVhc3kgZm9yIGNvbnN1bWVycyB0byBhc2sgcXVlc3Rpb25zIGFuZCBtYWtlIHB1cmNoYXNlcyBpbiB0aGUgbWVzc2FnaW5nIGNoYW5uZWxzIHRoZXkgdXNlIGV2ZXJ5IGRheS4gV2Ugc2VydmUgMTgwMDAmIzQzOyBsZWFkaW5nIGN1c3RvbWVycyBicmFuZHMgbGlrZSBDaXRpYmFuaywgSFNCQywgT3Jhbi4uLiAiLCJsb2NhdGlvbiI6Ik1hbmNoZXN0ZXIiLCJzYWxhcnkiOnt9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc2VuaW9yLWJhY2tlbmQtZW5naW5lZXItYy80NDkzNDE4NiIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ4NDI0MzMsImRiX2lkIjoxMzIwLCJ0aXRsZSI6IkphdmEgRGV2ZWxvcGVyIC0gQ2xvdWQsIERldk9wcywgQXBhY2hlIEJlYW0iLCJkZXNjcmlwdGlvbiI6IkphdmEgRGV2ZWxvcGVyLCBTb2Z0d2FyZSBFbmdpbmVlciwgQmFja2VuZCBEZXZlbG9wZXIsIEJhY2tlbmQgRW5naW5lZXIsIENsb3VkIERldmVsb3BlciBCYW5raW5nLCBGaW5hbmNlLCBBcGFjaGUgQmVhbSwgR0NQLCBDbG91ZCwgR3JlZW5maWVsZCBXZSBhcmUgbG9va2luZyB0byBvbiBib2FyZCBhIEphdmEgRGV2ZWxvcGVyIHdobyBpcyBwcm9maWNpZW50IGluIEFwYWNoZSBCZWFtLCBNb25nb0RCIGFuZCBDbG91ZCB0ZWNobm9sb2dpZXMgaWRlYWxseSAgd2l0aCBzb21lIGJhbmtpbmcgLyBmaW5hbmNpYWwgc2VydmljZXMgZXhwZXJpZW5jZSwgYWx0aG91Z2ggd2lsbCBjb25zaWRlciB0aG9zZSBmcm9tIG91dHNpZGUgb2YgZmluYW5jZS9iYW5raW5nIHRvIHdvcmsgZm9yIGVtYWdpbmUgb25zaXRlIHdpdGggYSBsZWFkaW5nIEdsb2JhbCBJbnZlc3RtZW50IEJhbmsuIFRoZSBzdWNjZXNzLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7fSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2phdmEtZGV2ZWxvcGVyLWNsb3VkLWRldm9wcy1hcGFjaGUtYmVhbS80NDg0MjQzMyIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ4MjY3MDIsImRiX2lkIjoxMzIxLCJ0aXRsZSI6IlNlbmlvciBCYWNrZW5kIEVuZ2luZWVyLSBHbG9iYWwgQ3J5cHRvY3VycmVuY3kgTWFya2V0IERhdGEgUHJvdmlkZXIiLCJkZXNjcmlwdGlvbiI6IlNhbGFyeTogJiMxNjM7ODAtOTBrIGJhc2UgJiM0MzsgMTAlIGJvbnVzIHR3aWNlIGEgeWVhciBTdW1tYXJ5OiBFeGNpdGluZyBvcHBvcnR1bml0eSB0byBqb2luIGEgZ3Jvd2luZyBzY2FsZS11cCB3aGVyZSB5b3Ugd2lsbCBoYXZlIGFuIGltcGFjdCBvbiBtaWxsaW9ucyBvZiB1c2Vycy4gQSBnbG9iYWwgbGVhZGVyIGluIGRpZ2l0YWwgYXNzZXQgZGF0YSwgbXkgY2xpZW50IHByb3ZpZGVzIGludmVzdG9ycyB3aXRoIHJlYWwtdGltZSBhbmQgaGlzdG9yaWNhbCAgY3J5cHRvIGRhdGEgc3Bhbm5pbmcgNWsmIzQzOyBjb2lucyBhbmQgMjUwayBjdXJyZW5jeSBwYWlycy4gVGhlIFJvbGU6IFdvcmtpbmcgY2xvc2VseSB3aXRoIHRoZSBDVE8gYW5kIFNlbmlvciBQcm9kdWN0IE1hbmFnZXJzLCB0aGV5IHJlcXVpcmUgYSBTZW5pb3IgRW5naW5lZXIgdG8gam9pbiB0aGUgZGF0YSBBUEkgYW5kIFN0Li4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7fSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1iYWNrZW5kLWVuZ2luZWVyLWdsb2JhbC1jcnlwdG9jdXJyZW5jeS1tYXJrZXQtZGF0YS1wcm92aWRlci80NDgyNjcwMiIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ4MjQwNzEsImRiX2lkIjoxMzIyLCJ0aXRsZSI6IlNlbmlvciBCYWNrZW5kIFB5dGhvbiBFbmdpbmVlciAtIEFwcGxpZWQgQUkgU3lzdGVtcyAtIExvbmRvbiIsImRlc2NyaXB0aW9uIjoiSi5QLiBNb3JnYW4gaXMgY3VycmVudGx5IHNlZWtpbmcgYSBTZW5pb3IgQmFja2VuZCBQeXRob24gKFZpY2UgUHJlc2lkZW50KSBlbmdpbmVlciB0aGF0IGhhcyBhbiBpbnRlcmVzdCBpbiBNYWNoaW5lIExlYXJuaW5nIGRldmVsb3BtZW50IHRvIGFzc2lzdCBpbiB0aGUgZW5naW5lZXJpbmcgYW5kIGRlcGxveW1lbnQgb2YgaW5ub3ZhdGl2ZSBNYWNoaW5lIExlYXJuaW5nIHNvbHV0aW9ucyBpbnRvIHByb2R1Y3Rpb24uIFlvdSB3aWxsIGhhdmUgIHRoZSBvcHBvcnR1bml0eSB0byBlbmdhZ2Ugd2l0aCBtdWx0aXBsZSBuZXcgYW5kIG9uZ29pbmcgcHJvamVjdHMgaW4gY29sbGFib3JhdGlvbiB3aXRoIHRoZSBNYWNoaW5lIExlYXJuaW5nIENlbnRlciBvZiBFeGNlbGxlbmNlIGFuZCBkZXZlbG9wbWVudCB0ZWFtcyBmcm9tIGFjcm9zcyB0aGUgVGVjaG5vbG9neSBvcmdhbml6YXRpb24gb24gYXIuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnt9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc2VuaW9yLWJhY2tlbmQtcHl0aG9uLWVuZ2luZWVyLWFwcGxpZWQtYWktc3lzdGVtcy1sb25kb24vNDQ4MjQwNzEiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0Nzc1MjEzLCJkYl9pZCI6MTE3OCwidGl0bGUiOiJCYWNrZW5kIEpTIFNvZnR3YXJlIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiIgV2hvIGFyZSB3ZT8gV2XigJlyZSBGaWl0IC0gdGhlIHVsdGltYXRlIGludGVyYWN0aXZlIGZpdG5lc3MgZXhwZXJpZW5jZS4gV2XigJlyZSBhIHN0YXJ0dXAuIFdl4oCZcmUgcGFydCB0ZWNoLCBwYXJ0IGdhbWluZywgcGFydCBmaXRuZXNzLiBBbmQgd2XigJlyZSBhIHdob2xlIGxvdHRhIGZ1biAod2VsbC4uLndlIHRoaW5rIHNvLCBhbnl3YXkpLiBXZSB3YW50IHRvIG1ha2UgZml0bmVzcyBhIGhhYml0IGZvciBldmVyeSBib2R5LiBJdOKAmXMgb3VyIG1pc3Npb24uIEFuZCBpdCBndWlkZXMgZXZlcnl0aGluZyB3ZSBkby4gSXQgbWVhbnMgd2XigJlyZSByZWFsbHkgYmlnIG9uIGluY2x1c2l2aXR5IGFuZCBhY2NlcHRhbmNlLiBJdCBtZWFucyB3ZeKAmXJlIGluY3JlZGlibHkgcGFzc2lvbmF0ZSBhbmQgd2UgZ2VudWluZWx5IHdhbnQgdG8gbWFrZSBhIGRpZmZlcmVuY2UuLi4uICIsImxvY2F0aW9uIjoiU3RyYXRmb3JkIiwic2FsYXJ5Ijp7fSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2JhY2tlbmQtanMtc29mdHdhcmUtZW5naW5lZXIvNDQ3NzUyMTMiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODA4OTg4LCJkYl9pZCI6MTE0NiwidGl0bGUiOiJOb2RlSlMgQmFja2VuZCBFbmdpbmVlciB4MiIsImRlc2NyaXB0aW9uIjoiIFJlbW90ZSBCYXNlZCAtIFJhdGVzIHVwdG8gJiMxNjM7NzAwcHJkIChVbWJyZWxsYSkgLSA2IE1vbnRocyBEdXJhdGlvbiBPdXIgY2xpZW50IGlzIGN1cnJlbnRseSBsb29raW5nIHRvIGhpcmUgYSBOb2RlSnMgQmFja2VuZCBFbmdpbmVlcnMgdG8gd29yayBvbiBzZXZlcmFsIGdyZWVuZmllbGQgcHJvamVjdHMgYW5kIHNldmVyYWwgZXhpc3RpbmcgYXJjaGl0ZWN0dXJhbCBwcm9qZWN0IHVwZ3JhZGVzLiBNdXN0IGhhdmUgZXhwZXJpZW5jZSBvZiB0aGUgZm9sbG93aW5nOiAgTm9kZUpzVHlwZXNjcmlwdEFXU1NlcnZlcmxlc3MvTGFtYmRhIEFkdmFudGFnZTogIEV2ZW50YnJpZGdlIFRyaXBzIHRvIHRoZWlyIG9mZmljZXMgaS4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvbm9kZWpzLWJhY2tlbmQtZW5naW5lZXIteDIvNDQ4MDg5ODgiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NDg5OTkyLCJkYl9pZCI6MTMyMywidGl0bGUiOiJTZW5pb3IgSmF2YSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiIFNFTklPUiBKQVZBIEVOR0lORUVSJiMxNjM7NjAsMDAwIC0gJiMxNjM7NzAsMDAwTE9ORE9OIC0gSFlCUklEIFRFQ0ggU1RBQ0s6IEphdmEsIEFXUywgU3ByaW5nL1NwcmluZ2Jvb3QsIEFwYWNoZSBLYWZrYUFuIEludGVybmF0aW9uYWwgUmV0YWlsIGNvbmdsb21lcmF0ZSBpcyBoaXJpbmcgYSBTZW5pb3IgSmF2YSBFbmdpbmVlciB0byBqb2luICZhbXA7IGxlYWQgdGhlaXIgZXhwYW5kaW5nIExvbmRvbi1iYXNlZCB0ZWFtLiBUaGlzIGNvbXBhbnkgaXMgd29ya2luZyB3aXRoIGEgbG90IG9mIGRlY2lzaXZlIGNob2ljZSBkYXRhIGFuZCBCaWcgRGF0YS4gWW91IHdpbGwgYmUgdHJhbnNmb3JtaW5nIGxhcmdlIHZvbHVtZXMuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1qYXZhLWVuZ2luZWVyLzQ0NDg5OTkyIiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDQ4OTk3MywiZGJfaWQiOjEzMjQsInRpdGxlIjoiU2VuaW9yIFB5dGhvbiBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiIFNFTklPUiBQWVRIT04gRU5HSU5FRVImIzE2Mzs2MCwwMDAgLSAmIzE2Mzs3MCwwMDBMT05ET04gLSBIWUJSSUQgVEVDSCBTVEFDSzogUHl0aG9uLCBBV1MsIFNwcmluZy9TcHJpbmdib290LCBKYW5nbywgQXBhY2hlIEthZmthQW4gSW50ZXJuYXRpb25hbCBSZXRhaWwgY29uZ2xvbWVyYXRlIGlzIGhpcmluZyBhIFNlbmlvciBQeXRob24gRW5naW5lZXIgdG8gam9pbiAmYW1wOyBsZWFkIHRoZWlyIGV4cGFuZGluZyBMb25kb24tYmFzZWQgdGVhbS4gVGhpcyBjb21wYW55IGlzIHdvcmtpbmcgd2l0aCBhIGxvdCBvZiBkZWNpc2l2ZSBjaG9pY2UgZGF0YSBhbmQgQmlnIERhdGEuIFlvdSB3aWxsIGJlIHRyYW5zZm9ybWluZyAuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1weXRob24tZW5naW5lZXIvNDQ0ODk5NzMiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzkxOTc2LCJkYl9pZCI6MTMyNSwidGl0bGUiOiJTZW5pb3IgU29mdHdhcmUgRW5naW5lZXIgLSBBSSBUZWNoIFVuaWNvcm4iLCJkZXNjcmlwdGlvbiI6IiBTZW5pb3Igc29mdHdhcmUgZW5naW5lZXIgKHB5dGhvbiBHb2xhbmcgSmF2YSkgSXMgcmVxdWlyZWQgdG8gam9pbiB0aGUgd29ybGQncyBmb3JlbW9zdCBjb21wdXRlciB2aXNpb24gQUkgc3RhcnQtdXAgdGhhdCBpcyBncm93aW5nIGEgYnJhbmQgbmV3IExvbmRvbiBlbmdpbmVlcmluZyB0ZWFtLiBUaGlzIGlzIGEgcmFyZSBvcHBvcnR1bml0eSB0byB3b3JrIGZvciBhIGJ1c2luZXNzIHdpdGggYSB1bmljb3JuIHZhbHVhdGlvbiB0aGF0IGlzIHJlc3BvbnNpYmxlICBmb3IgbXVsdGlwbGUgYXBwcyBpbiB0aGUgYWxsLXRpbWUgYXBwIHN0b3JlIGRvd25sb2Fkcy4gVGhpcyBjb21wYW55IHV0aWxpemVzIEFJIHRvIGVuYWJsZSBjdXN0b21lcnMgdG8gbWFrZSB0aGUgbW9zdCBvdXQgb2YgdGhlaXIgZGlnaXRhbCBleHBlcmllbmNlcyBhbmQgY29ubmVjdCB0aGVtIHRvIHRoZSAuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1zb2Z0d2FyZS1lbmdpbmVlci1haS10ZWNoLXVuaWNvcm4vNDQ3OTE5NzYiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NjE2NDkzLCJkYl9pZCI6MTMyNiwidGl0bGUiOiJQcmluY2lwYWwgU29mdHdhcmUgRW5naW5lZXIiLCJkZXNjcmlwdGlvbiI6IiBQUklOQ0lQQUwgU09GVFdBUkUgRU5HSU5FRVImIzE2Mzs5MCwwMDAgLSAmIzE2MzsxMDAsMDAwTE9ORE9OIC0gSFlCUklEIFRFQ0ggU1RBQ0s6IEphdmEsIEtvdGxpbiwgVHlwZXNjcmlwdCwgSmF2YXNjcmlwdCwgVnVlLmpzLCBHaXRodWIsIEhvcm9rdUEgc3VjY2Vzc2Z1bCByYXBpZGx5IGdyb3dpbmcgc3RhcnQtdXAgaXMgaGlyaW5nIGEgUHJpbmNpcGFsIFNvZnR3YXJlIEVuZ2luZWVyIHRvIGpvaW4gJmFtcDsgbGVhZCB0aGVpciBleHBhbmRpbmcgTG9uZG9uLWJhc2VkIHRlYW0uIFRoaXMgY29tcGFueSBpcyB3b3JraW5nIHdpdGggYSBsb3Qgb2YgcGVyc29uYWwgZGF0YS4gVGhleSBhcmUgc2Vla2luZyBhIG1vdGl2Li4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9wcmluY2lwYWwtc29mdHdhcmUtZW5naW5lZXIvNDQ2MTY0OTMiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzM0MzYwLCJkYl9pZCI6MTE5NCwidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBEZXZlbG9wZXIiLCJkZXNjcmlwdGlvbiI6IiBJbnRlcmVzdGVkIGluIHdvcmtpbmcgb24gYSBjdXR0aW5nIGVkZ2UgQVIgcGxhdGZvcm0/IEknbSBsb29raW5nIHRvIHJlY3J1aXQgYSBTb2Z0d2FyZSBFbmdpbmVlciB3aXRoIFJlYWN0LCBUeXBlU2NyaXB0LCBhbmQgTm9kZSBleHBlcmllbmNlIHRvIGpvaW4gb25lIG9mIHRoZSBtb3N0IGV4Y2l0aW5nIEFSIHN0YXJ0LXVwcyBpbiB0aGUgVUsuIEFzIHRoZSBFbmdpbmVlciwgeW91IHdpbGwgaGF2ZSB0aGUgY2hhbmNlIHRvIHdvcmsgb24gdGhlaXIgd2ViIHBsYXRmb3JtIGNyZWF0aW5nIGRpZ2l0YWwgcmVwcmVzZW50YXRpb25zIG9mIHRoZSAgd29ybGQncyBsYXJnZXN0IHJldGFpbGVycyB2ZW51ZXMsIGJ1aWxkaW5nIHVzZXItZnJpZW5kbHkgbWFwcGluZyBwcm9jZXNzZXMgYW5kIHRvb2xzIHRoYXQgZW5hYmxlIHRoZW0gdG8gYnVpbGQgYWR2YW5jZWQgY29udGV4dHUuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1iYWNrZW5kLWRldmVsb3Blci80NDczNDM2MCIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ2OTgzNTgsImRiX2lkIjoxMzI3LCJ0aXRsZSI6IlNvZnR3YXJlIEVuZ2luZWVyIEphdmEgU3ByaW5nQm9vdCBBUEkgLSBGaW5UZWNoIiwiZGVzY3JpcHRpb24iOiJTb2Z0d2FyZSBFbmdpbmVlciAvIEJhY2tlbmQgRGV2ZWxvcGVyIChKYXZhIFNwcmluZ0Jvb3QgbWljcm9zZXJ2aWNlcyBSRVNUIEFQSSkgKkh5YnJpZCBXRkgqLiBBcmUgeW91IGEgU29mdHdhcmUgRW5naW5lZXIgd2l0aCBzdHJvbmcgY29yZSBKYXZhIGJhY2tlbmQgc2tpbGxzPyBZb3UgY291bGQgYmUgd29ya2luZyBvbiBhIG1vZGVybiB0ZWNoIHN0YWNrIGFuZCBjb250aW51YWxseSBsZWFybmluZyBpbiBhIHNlbmlvciwgaGFuZHMtb24gcm9sZSBhdCBhIGZhc3QgZ3Jvd2luZyBGaW5UZWNoIHRoYXQgaXMgZW5hYmxpbmcgdHJhZGl0aW9uYWwgaGlnaCBzdHJlZXQgYmFua3MgdG8gY29tcGV0ZSB3aXRoIHRoZWlyIHRlY2ggZHJpdmVuIGNoYWxsZW5nZXJzIGFuZCBkZWxpdmVyaW5nIGltcHJvdmVtZW50cyB0byB0aGUgY29uc3VtZXIuIEFzIGEgUy4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc29mdHdhcmUtZW5naW5lZXItamF2YS1zcHJpbmdib290LWFwaS1maW50ZWNoLzQ0Njk4MzU4IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDYzMTAyOCwiZGJfaWQiOjEzMjgsInRpdGxlIjoiU2VuaW9yIFB5dGhvbiBFbmdpbmVlciAtIEFJIFNjYWxlIFVwIC0gNTAgTWlsbGlvbiBmdW5kaW5nIiwiZGVzY3JpcHRpb24iOiIgU2VuaW9yIFB5dGhvbiBFbmdpbmVlciAoUHl0aG9uIEt1YmVybmV0ZXMgQVdTKSBJcyByZXF1aXJlZCB0byBqb2luIGEgZ3JvdW5kLWJyZWFraW5nIHNjYWxldXAgdGhhdCBpcyBoYXJuZXNzaW5nIENvbXB1dGVyIFZpc2lvbiB0byBoZWxwIGRpYWdub3NlIGxpZmUtdGhyZWF0ZW5pbmcgaWxsbmVzc2VzIGF0IHRoZSBjZWxsdWxhciBsZXZlbCBtb3JlIGFjY3VyYXRlbHkgYW5kIGZhc3RlciB1bHRpbWF0ZWx5IHNhdmluZyBsaXZlcy4gT3JpZ2luYWxseSAgZnJvbSBBbWVyaWNhIGJ1dCBub3cgc2NhbGluZyBhIGZ1bGx5IHJlbW90ZSBVSyB0ZWFtIHRoZXkgYXJlIGxvb2tpbmcgZm9yIFN0cm9uZyBQeXRob24gdGFsZW50IHRvIGpvaW4gdGhlaXIgYmFja2VuZCBhbmQgZGF0YSBzeXN0ZW1zIHRlYW0uIFRoZSBSb2xlIEFzIGEgc2VuaW9yIHB5dGhvbiBlbmdpbmUuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1weXRob24tZW5naW5lZXItYWktc2NhbGUtdXAtNTAtbWlsbGlvbi1mdW5kaW5nLzQ0NjMxMDI4IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDY4OTY2OCwiZGJfaWQiOjEzMjksInRpdGxlIjoiUHJpbmNpcGFsIFNvZnR3YXJlIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiIgUFJJTkNJUEFMIFNPRlRXQVJFIEVOR0lORUVSJiMxNjM7MTAwLDAwMCAtICYjMTYzOzEyMCwwMDBMT05ET04gLSBIWUJSSUQgVEVDSCBTVEFDSzogSmF2YSwgR0NQLCBLYWZrYSwgU1FMLCBBcGFjaGUgRmxpbmssIEplbmtpbnMsIFB5dGhvbkFuIGV4dHJlbWVseSBzdWNjZXNzZnVsIG11bHRpbmF0aW9uYWwgZ2FtZSBhbmQgYXBwIGRldmVsb3BlciBpcyBoaXJpbmcgYSBQcmluY2lwYWwgU29mdHdhcmUgRW5naW5lZXIgdG8gYm9sc3RlciB0aGVpciBncm93dGguIFRoaXMgUHJpbmNpcGFsIFNvZnR3YXJlIEVuZ2luZWVyIHdpbGwgc2hhZG93IHRoZSBleGlzdGluZyB0ZWFtLCB0aGVuIGJ1aWxkIGFuZCBtYW5hZ2UgdGhlaS4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvcHJpbmNpcGFsLXNvZnR3YXJlLWVuZ2luZWVyLzQ0Njg5NjY4IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDc4MDU5MywiZGJfaWQiOjEzMzAsInRpdGxlIjoiSmF2YSBTb2Z0d2FyZSBFbmdpbmVlciAtIFJlYWwtdGltZSBUcmFkaW5nIiwiZGVzY3JpcHRpb24iOiJKYXZhIFNvZnR3YXJlIEVuZ2luZWVyIC8gQmFja2VuZCBEZXZlbG9wZXIgKkh5YnJpZCBXZkgqLiBXb3VsZCB5b3UgbGlrZSB0byB3b3JrIG9uIGEgbW9kZXJuIG1pY3Jvc2VydmljZXMgdGVjaCBzdGFjaywgY29udGludWFsbHkgcHJvZ3Jlc3NpbmcgeW91ciBjYXJlZXIgYW5kIGdhaW5pbmcgYSBkZWVwIGtub3dsZWRnZSBvZiBmaW5hbmNpYWwgdHJhZGluZyBtYXJrZXRzPyBZb3UgY291bGQgYmUgam9pbmluZyBhIGdsb2JhbCBjb21tb2RpdGllcyB0cmFkaW5nIGZpcm0uQXMgYSBKYXZhIFNvZnR3YXJlIEVuZ2luZWVyIHlvdSB3aWxsIGRlc2lnbiBhbmQgZGV2ZWxvcCByZWFsLXRpbWUgcHJpY2luZyBjb21wb25lbnRzIHdoaWNoIGRyaXZlIGFsbCB0cmFkaW5nIGRlY2lzaW9ucyBhbmQgYXJlIHZpdGFsIHRvIHRoZSBidXNpbmVzcy4gPC4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvamF2YS1zb2Z0d2FyZS1lbmdpbmVlci1yZWFsLXRpbWUtdHJhZGluZy80NDc4MDU5MyIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ3NDY5MjMsImRiX2lkIjoxMTg3LCJ0aXRsZSI6IiBTZW5pb3IgUHl0aG9uIEVuZ2luZWVyIC0gRWRUZWNoIiwiZGVzY3JpcHRpb24iOiIgQSBoaWdoIGdyb3d0aCBFZFRlY2ggY2xpZW50LCB3aG9zZSBtaXNzaW9uIGl0IGlzIHRvIGhlbHAgdGhlIGdlbmVyYWwgcHVibGljIGJlY29tZSBlZHVjYXRlZCBhYm91dCB0aGVpciBtb25leSBhbmQgaGVscCBtYWtlIG1vcmUgb3V0IG9mIHRoZXJlIGNhcGl0YWwgYnkgcHJvdmlkaW5nIGNvbnRlbnQgb24gaW52ZXN0aW5nLCBhcmUgbG9va2luZyBmb3IgYSBzZW5pb3IgYmFja2VuZCBwcm9kdWN0IGVuZ2luZWVyIHRvIGpvaW4gdGhlIHRlYW0gYW5kICBoZWxwIGJ1aWxkIG91dCB0aGVyZSBiYWNrZW5kIHN5c3RlbXMgYW5kIGluZnJhc3RydWN0dXJlLiBIYXZpbmcgcmVjZW50bHkgcmVjZWl2ZWQgZnVydGhlciBpbnZlc3RtZW50IHRoaXMgY29tcGFueSB3aG8gYXJlIGZ1bGwgb2YgZW50aHVzaWFzdGljIGVudHJlcHJlbmV1cnMgYW5kIGVuZ2luZWVycyBhcmUgbG9va2luLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItcHl0aG9uLWVuZ2luZWVyLWVkdGVjaC80NDc0NjkyMyIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ4OTE4OTgsImRiX2lkIjoxMzMxLCJ0aXRsZSI6IlNvZnR3YXJlIEVuZ2luZWVyIEphdmEgbWljcm9zZXJ2aWNlcyBBV1MiLCJkZXNjcmlwdGlvbiI6IlNvZnR3YXJlIEVuZ2luZWVyIC8gQmFja2VuZCBEZXZlbG9wZXIgKkh5YnJpZCBXRkgqLiBBcmUgeW91IGEgc2VuaW9yIHRlY2hub2xvZ2lzdCBzZWVraW5nIGEgcm9sZSB3aGVyZSB5b3UgY2FuIHdvcmsgd2l0aCBhbmQgaW5mbHVlbmNlIGEgbW9kZXJuIEphdmEgYmFzZWQgQVdTIG1pY3Jvc2VydmljZXMgdGVjaCBzdGFjaz9Zb3UgY291bGQgYmUgam9pbmluZyBhIGZhc3QgZ3Jvd2luZyBGaW5UZWNoIHRoYXQncyBTYWFTIHNvbHV0aW9ucyBhcmUgaGVscGluZyBIaWdoIFN0cmVldCBiYW5rcyB0byBjb21wZXRlIHdpdGggdGhlIGNoYWxsZW5nZSBmcm9tIHRoZWlyIG9ubGluZSB0ZWNoIGRyaXZlbiByaXZhbHMsIHdvcmtpbmcgb24gY2hhbGxlbmdpbmcgc3lzdGVtcyBhbmQgcHJvZ3Jlc3NpbmcgeW91ciBjYXJlZXIuIEFzIGEgU29mdHdhcmUgRW5nLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zb2Z0d2FyZS1lbmdpbmVlci1qYXZhLW1pY3Jvc2VydmljZXMtYXdzLzQ0ODkxODk4IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDg3MjEzNywiZGJfaWQiOjEzMzIsInRpdGxlIjoiSnVuaW9yIFNvZnR3YXJlIEVuZ2luZWVyIEdvbGFuZyBDbG91ZCIsImRlc2NyaXB0aW9uIjoiSnVuaW9yIFNvZnR3YXJlIEVuZ2luZWVyIC8gRGV2ZWxvcGVyIChHb2xhbmcgQ2xvdWQgQmFja2VuZCkgKkh5YnJpZCBXZkgqLiBXb3VsZCB5b3UgbGlrZSBhbiBvcHBvcnR1bml0eSB0byB3b3JrIG9uIGEgbW9kZXJuIHRlY2ggc3RhY2sgd2hlcmUgeW91J2xsIGJlIGNoYWxsZW5nZWQgYW5kIGNvbnRpbnVhbGx5IGxlYXJuaW5nLCB3b3JraW5nIG9uIGNvbXBsZXggc3lzdGVtcyBhdCB0aGUgY3V0dGluZyBlZGdlIG9mIElvVCB0ZWNobm9sb2d5P1lvdSBjb3VsZCBiZSBwcm9ncmVzc2luZyB5b3VyIGNhcmVlciBhdCBhIHRlY2hub2xvZ3kgY29tcGFueSB0aGF0IHByaWRlcyBkYXRhIGNlbnRyaWMgc29mdHdhcmUgdGhhdCBlbmFibGVzIHRoZSBtYW5hZ2VtZW50IGFuZCBjb250cm9sIG9mIG1hY2hpbmVzIHZpYSBJb1QuIEFzIGEgSnVuaW9yIFNvZnQuLi4gIiwibG9jYXRpb24iOiJDYW5hcnkgV2hhcmYiLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2p1bmlvci1zb2Z0d2FyZS1lbmdpbmVlci1nb2xhbmctY2xvdWQvNDQ4NzIxMzciLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0OTMxODk4LCJkYl9pZCI6MTMzMywidGl0bGUiOiJTb2Z0d2FyZSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiTWFudWZhY3R1cmluZyBmdXR1cmVzIGlzIGxvb2tpbmcgdG8gYXBwb2ludCBhIHNvZnR3YXJlIGVuZ2luZWVyIGZvciBvdXIgY2xpZW50IHdobyBkZXNpZ24gYW5kIG1hbnVmYWN0dXJlIGN1dHRpbmcgZWRnZSB0ZWNobm9sb2d5LiBXZSBhcmUgbG9va2luZyB0byByZWNydWl0IGEgc29mdHdhcmUgZW5naW5lZXIgdG8gaW1wbGVtZW50IGFsZ29yaXRobXMuIFlvdSBtdXN0IGhhdmUgYSBzdHJvbmcgYmFja2dyb3VuZCBpbiBkZXZlbG9waW5nIHNvbHV0aW9ucyAgdXNpbmcgQyYjNDM7JiM0MzssIFB5dGhvbiBhbmQgb3IgLk5ldC4gWW91IHdpbGwgYWxzbyBiZSByZXNwb25zaWJsZSBmb3Igd3JpdGluZyBzdXBwbGVtZW50YXJ5IGFuZCBiYWNrZW5kIHNvZnR3YXJlIHRvIGRpYWdub3NlIGlzc3VlcyBhbmQgZW5zdXJlIGFsZ29yaXRobXMgYXJlIHBlcmZvcm1pbmcgb3B0aW1hbGx5LjwuLi4gIiwibG9jYXRpb24iOiJNYW5jaGVzdGVyIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zb2Z0d2FyZS1lbmdpbmVlci80NDkzMTg5OCIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ3OTMyMTMsImRiX2lkIjoxMzM0LCJ0aXRsZSI6IlFBIFRlc3QgRW5naW5lZXIgUHl0aG9uIEphdmEiLCJkZXNjcmlwdGlvbiI6IlFBIFRlc3QgRW5naW5lZXIgLyBUZXN0ZXIgKFB5dGhvbiAvIEphdmEgQXV0b21hdGlvbikgKkh5YnJpZCBXZkgqLiBEbyB5b3UgZW5qb3kgYnJlYWtpbmcgdGhpbmdzIGFuZCB0YWtpbmcgdGhlbSBhcGFydCBzbyB5b3UgY2FuIGZpZ3VyZSBvdXQgaG93IHRoZXkgd29yayBhbmQgcHV0IHRoZW0gYmFjayB0b2dldGhlcj9Zb3UgY291bGQgYmUgam9pbmluZyBhIG1hcmtldCBsZWFkaW5nIHRlY2ggY29tcGFueSB0aGF0J3MgcmVtb3RlIGFjY2VzcyBwcm9kdWN0IGlzIHVzZWQgYnkgaHVuZHJlZHMgb2YgbWlsbGlvbnMgb2YgdXNlcnMgd29ybGR3aWRlLCB3b3JraW5nIG9uIGEgbW9kZXJuIHRlY2ggc3RhY2ssIGNvbnRpbnVhbGx5IGxlYXJuaW5nIGFuZCBwcm9ncmVzc2luZyB5b3VyIGNhcmVlci5BcyBhIFFBIFRlc3QgRW5naW5lZXIgeW91J2xsIGlkLi4uICIsImxvY2F0aW9uIjoiQ2FtYnJpZGdlIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9xYS10ZXN0LWVuZ2luZWVyLXB5dGhvbi1qYXZhLzQ0NzkzMjEzIiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDc5MTM0NSwiZGJfaWQiOjEzMzUsInRpdGxlIjoiU29mdHdhcmUgRW5naW5lZXIiLCJkZXNjcmlwdGlvbiI6IiBTb2Z0d2FyZSBFbmdpbmVlciAmIzE2Mzs2MCwwMDAgLSAmIzE2Mzs2NSwwMDAgTG9uZG9uIC0gSHlicmlkIFRFQ0ggU1RBQ0s6IFB5dGhvbiwgQVBJLCBSZXN0QVBJLCBFbGFzdGljc2VhcmNoLCBNb25nb0RCLCBOb1NRTCwgRG9ja2VyLCBLYWZrYSwgQVdTIEFuIEludGVybmF0aW9uYWwgQUkgY29tcGFueSB3aXRoaW4gYSBjdXR0aW5nLWVkZ2Ugc3BhY2UgaXMgaGlyaW5nIGEgUHl0aG9uIEVuZ2luZWVyIHRvIGpvaW4gdGhlaXIgZXhwYW5kaW5nIExvbmRvbi1iYXNlZCB0ZWFtLiBUaGlzIGNvbXBhbnkgaXMgd29ya2luZyBvbiBhIGxvdCBvZiBpbnRlcmVzdGluZyBwcm9qZWN0cyBhbGwgYXJvdW5kIHRoZSB3b3JsZC4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvc29mdHdhcmUtZW5naW5lZXIvNDQ3OTEzNDUiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzkxMjc2LCJkYl9pZCI6MTMzNiwidGl0bGUiOiJKdW5pb3IgU29mdHdhcmUgRW5naW5lZXIiLCJkZXNjcmlwdGlvbiI6IiBKdW5pb3IgU29mdHdhcmUgRW5naW5lZXIgJiMxNjM7NDAsMDAwIC0gJiMxNjM7NDUsMDAwIExvbmRvbiAtIEh5YnJpZCBURUNIIFNUQUNLOiBQeXRob24sIEFQSSwgUmVzdEFQSSwgRWxhc3RpY3NlYXJjaCwgTW9uZ29EQiwgTm9TUUwsIERvY2tlciwgS2Fma2EsIEFXUyBBbiBJbnRlcm5hdGlvbmFsIEFJIGNvbXBhbnkgd2l0aGluIGEgY3V0dGluZy1lZGdlIHNwYWNlIGlzIGhpcmluZyBhIEp1bmlvciBQeXRob24gRW5naW5lZXIgdG8gam9pbiB0aGVpciBleHBhbmRpbmcgTG9uZG9uLWJhc2VkIHRlYW0uIFRoaXMgY29tcGFueSBpcyB3b3JraW5nIG9uIGEgbG90IG9mIGludGVyZXN0aW5nIHByb2plY3RzIGFsbCBhci4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvanVuaW9yLXNvZnR3YXJlLWVuZ2luZWVyLzQ0NzkxMjc2IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDY3MjI2MywiZGJfaWQiOjEzMzcsInRpdGxlIjoiU29mdHdhcmUgRW5naW5lZXIgSmF2YSIsImRlc2NyaXB0aW9uIjoiIEFzIGEgU29mdHdhcmUgRW5naW5lZXIsIHlvdeKAmWxsIHdvcmsgb24gY3V0dGluZy1lZGdlIHRlY2hub2xvZ2llcyB0byBkZXNpZ24sIHNjYWxlLCBhbmQgbWFpbnRhaW4gYmFja2VuZCBhcmNoaXRlY3R1cmUuIEJhY2tlbmQgaXMgYSBjb3JlIHBhcnQgb2YgdGhlIFRVSSBNdXNlbWVudOKAmXMgYnVzaW5lc3MsIGl0IGlzIHVzZWQgaW4gaW50ZXJuYWwgcHJvamVjdHMgYXMgd2VsbCBhcyBleHRlcm5hbC1mYWNpbmcgb25lcy4gT3VyIG1haW4gIGFwcGxpY2F0aW9uIGlzIGJhc2VkIG9uIFN5bWZvbnk0IGJ1dCBvbiB0b3Agb2YgdGhhdCwgd2UgaGF2ZSBkaWZmZXJlbnQgQVBJIGdhdGV3YXlzIHdyaXR0ZW4gaW4gUEhQLCBOb2RlSlMsIGFuZCBHby4gQWxsIG91ciBhcHBsaWNhdGlvbnMgdXNlIE15U1FMIGFzIHRoZSBwcmltYXJ5IGRhdGEgc3RvcmUsIGJ1dCB3ZSBhbHNvIHJlbHkuLi4gIiwibG9jYXRpb24iOiJMdXRvbiIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zb2Z0d2FyZS1lbmdpbmVlci1qYXZhLzQ0NjcyMjYzIiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDY3MTI3NywiZGJfaWQiOjEzMzgsInRpdGxlIjoiU29mdHdhcmUgRW5naW5lZXIgUEhQIiwiZGVzY3JpcHRpb24iOiIgQXMgYSBTb2Z0d2FyZSBFbmdpbmVlciwgeW914oCZbGwgd29yayBvbiBjdXR0aW5nLWVkZ2UgdGVjaG5vbG9naWVzIHRvIGRlc2lnbiwgc2NhbGUsIGFuZCBtYWludGFpbiBiYWNrZW5kIGFyY2hpdGVjdHVyZS4gQmFja2VuZCBpcyBhIGNvcmUgcGFydCBvZiB0aGUgVFVJIE11c2VtZW504oCZcyBidXNpbmVzcywgaXQgaXMgdXNlZCBpbiBpbnRlcm5hbCBwcm9qZWN0cyBhcyB3ZWxsIGFzIGV4dGVybmFsLWZhY2luZyBvbmVzLiBPdXIgbWFpbiAgYXBwbGljYXRpb24gaXMgYmFzZWQgb24gU3ltZm9ueTQgYnV0IG9uIHRvcCBvZiB0aGF0LCB3ZSBoYXZlIGRpZmZlcmVudCBBUEkgZ2F0ZXdheXMgd3JpdHRlbiBpbiBQSFAsIE5vZGVKUywgYW5kIEdvLiBBbGwgb3VyIGFwcGxpY2F0aW9ucyB1c2UgTXlTUUwgYXMgdGhlIHByaW1hcnkgZGF0YSBzdG9yZSwgYnV0IHdlIGFsc28gcmVseS4uLiAiLCJsb2NhdGlvbiI6Ikx1dG9uIiwic2FsYXJ5Ijp7fSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3NvZnR3YXJlLWVuZ2luZWVyLXBocC80NDY3MTI3NyIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ2NzEyNzUsImRiX2lkIjoxMzM5LCJ0aXRsZSI6IkZyb250ZW5kIFNvZnR3YXJlIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiIgQXMgYSBGcm9udGVuZCBTb2Z0d2FyZSBFbmdpbmVlciwgeW914oCZbGwgd29yayBvbiBjdXR0aW5nLWVkZ2UgdGVjaG5vbG9naWVzIHRvIGRlc2lnbiwgc2NhbGUsIGFuZCBtYWludGFpbiBGcm9udGVuZCBhcHBsaWNhdGlvbnMgdXNpbmcgVnVlanMgYW5kIFJlYWN0LiBUVUkgTXVzZW1lbnQgRnJvbnRlbmQgYXJjaGl0ZWN0dXJlIGlzIG1haW5seSBiYXNlZCBvbiBvdXIgaG9tZS1tYWRlIFNoYXJlZCBDb21wb25lbnRzIEFyY2hpdGVjdHVyZSwgIHdoaWNoIGlzIGludGVuZGVkIHRvIHByb3ZpZGUgYW4gaGlnaGx5IHJldXNhYmxlIHNldCBvZiBjb21wb25lbnRzLiBUVUkgTXVzZW1lbnTigJlzIGJhY2tlbmQgYXJjaGl0ZWN0dXJlIGVtYnJhY2VzIHRoZSDigJxiYWNrZW5kIGZvciBmcm9udGVuZOKAnSBwYXR0ZXJuLiBUaGlzIGFwcHJvYWNoIGFsbG93cyB1cyB0byBlYXNpbHkgY29ubmUuLi4gIiwibG9jYXRpb24iOiJMdXRvbiIsInNhbGFyeSI6e30sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9mcm9udGVuZC1zb2Z0d2FyZS1lbmdpbmVlci80NDY3MTI3NSIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ1Mzg4NzQsImRiX2lkIjoxMzQwLCJ0aXRsZSI6IkphdmEgRGV2ZWxvcGVyIiwiZGVzY3JpcHRpb24iOiIgSmF2YSBEZXZlbG9wZXIgLSBCYWNrZW5kLCBKYXZhLCBBV1MsIEt1YmVybmV0ZXNMb25kb24gb3IgUmVtb3RlIChVSyBiYXNlZCkgSmF2YSBEZXZlbG9wZXIgcmVxdWlyZWQgYnkgYSB0aHJpdmluZyBGaW50ZWNoIGNvbXBhbnkgaW4gTG9uZG9uIHdobyBicmVhayB0aGUgbW91bGQgaW4gdGhlIGluZHVzdHJ5IGFuZCBvZmZlciBhIHRydWx5IGZsZXhpYmxlIHdvcmsvbGlmZSBiYWxhbmNlIHJvbGUgd2l0aGluIGFuIGlubm92YXRpdmUgYW5kIHRlY2hub2xvZ2ljYWwgYWR2YW5jZWQgZW52aXJvbm1lbnQsIHByb3ZpZGluZyBoaWdoIHF1YWxpdHkgc29mdHdhcmUgJmFtcDsgY29kZS4gQXMgIGEgU2VuaW9yIEphdmEgRGV2ZWxvcGVyIHlvdSB3aWxsIHV0aWxpc2UgdGVjaG5vbG9neSBzdWNoIGFzIEphdmEuLi4gIiwibG9jYXRpb24iOiJDYW1kZW4iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2phdmEtZGV2ZWxvcGVyLzQ0NTM4ODc0IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDk3NjU2OSwiZGJfaWQiOjEzNDEsInRpdGxlIjoiU2VuaW9yIFB5dGhvbiBEZXZlbG9wZXIiLCJkZXNjcmlwdGlvbiI6IiBTZW5pb3IgUHl0aG9uIFNvZnR3YXJlIEVuZ2luZWVyLyBCYWNrZW5kIERldmVsb3BlciAtIExvbmRvbiAtIEh5YnJpZCBSb2xlIC0gQmV0d2VlbiAmIzE2Mzs2NWsgdG8gJiMxNjM7ODVrIEFyZSB5b3UgYW4gZXhwZXJpZW5jZWQgc29mdHdhcmUgZW5naW5lZXI/ICBEbyB5b3Ugd2FudCB0byByZWZvcm0gdGhlIGVuZXJneSBpbmR1c3RyeT8gIEFyZSB5b3UgYW4gZW1wYXRoZXRpYyBpbmRpdmlkdWFsLCBtaW5kZnVsIG9mIG90aGVyIGh1bWFucz8gIEtleSB0YXNrcyBhbmQgcmVzcG9uc2liaWxpdGllcyAgWW91IHdpbGwgYmUgaW52b2x2ZWQgaW4gd3JpdGluZyBjb2RlIGFuZCByZXZpZXdpbmcgY29kZSBZb3Ugd2lsbCBiZSB3b3JraW5nIGFsb25nc2lkZSBkZXZlbG9wZXJzLCBkZXNpZ25lcnMsIGEuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1weXRob24tZGV2ZWxvcGVyLzQ0OTc2NTY5IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDg0MDc2NCwiZGJfaWQiOjExNDEsInRpdGxlIjoiUHl0aG9uIERqYW5nbyBFbmdpbmVlciAtIEZhc2hpb24gVGVjaCIsImRlc2NyaXB0aW9uIjoiIFRoZSBDb21wYW55IEEgaGlnaC1ncm93dGggU0FBUyBUZWNobm9sb2d5IHNjYWxlLXVwIHdob3NlIHByb2R1Y3QgaXMgdXNlZCBieSBzb21lIG9mIHRoZSB3b3JsZCdzIGxhcmdlc3QgY2xvdGhpbmcgYnJhbmRzIHRvIG9mZmVyIGN1c3RvbWl6YXRpb24gYW5kIHBlcnNvbmFsaXphdGlvbiBpcyBsb29raW5nIGZvciBhIGJyYW5kIG5ldyBzZW5pb3IgYmFja2VuZCBlbmdpbmVlciB0byBqb2luIGl04oCZcyBncm93aW5nIHRlYW0hIEJ5IGpvaW5pbmcgYSBzbWFsbCBhZ2lsZSBidXNpbmVzcyB3aXRoIGFuIGVuZ2luZWVyaW5nIHRlYW0gb2YgMTAgeW91IHdpbGwgaGF2ZSBhIGdyZWF0IG9wcG9ydHVuaXR5IHRvIG1ha2UgYSBtYXNzaXZlIGltcGFjdCB3aXRoaW4gdGhlIGJ1c2luZXNzIGFuZCBleHBlcmllbmNlIHF1aWNrIGNhcmVlciBwcm9ncmVzc2lvbi4gPC4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvcHl0aG9uLWRqYW5nby1lbmdpbmVlci1mYXNoaW9uLXRlY2gvNDQ4NDA3NjQiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODk3MjE5LCJkYl9pZCI6MTE1MiwidGl0bGUiOiJDKysgRGV2ZWxvcGVyIEJhY2tlbmQgTGludXggLSBSZW1vdGUiLCJkZXNjcmlwdGlvbiI6IkMmIzQzOyYjNDM7IERldmVsb3BlciAvIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgKEMmIzQzOyYjNDM7IDE3KSAqUmVtb3RlIC8gV0ZIKi4gVGVjaG5vbG9naXN0IHNvdWdodCBieSBzY2FsZS11cCB0ZWNobm9sb2d5IGNvbXBhbnkgYXMgdGhleSBncm93IHRoZWlyIFVLIHByZXNlbmNlLiBUaGlzIGlzIGFuIG9wcG9ydHVuaXR5IHRvIHJlbWFpbiBoYW5kcy1vbiB3b3JraW5nIG9uIGNvbXBsZXggc3lzdGVtczsgdGFraW5nIG93bmVyc2hpcCBhbmQgbWFraW5nIGEgcmVhbCAgaW1wYWN0LkFzIGEgQyYjNDM7JiM0MzsgRGV2ZWxvcGVyIC8gQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciB5b3UnbGwgdXRpbGlzZSB5b3VyIGJyZWFkdGggb2YgdGVjaG5pY2FsIGtub3dsZWRnZSB0byBkZXNpZ24sIGJ1aWxkIGFuZCBleHRlbmQgaGlnaCBxdWFsaXR5IGFwcGxpY2F0aW9uLi4uICIsImxvY2F0aW9uIjoiU2VhbCIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvYy1kZXZlbG9wZXItYmFja2VuZC1saW51eC1yZW1vdGUvNDQ4OTcyMTkiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0OTQ1NDg2LCJkYl9pZCI6MTM0MiwidGl0bGUiOiJQeXRob24gRGV2ZWxvcGVyIE1hY2hpbmUgTGVhcm5pbmcgU1FMIERhdGEiLCJkZXNjcmlwdGlvbiI6IlB5dGhvbiBEZXZlbG9wZXIgLyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIChNYWNoaW5lIExlYXJuaW5nIFNRTCBQeXRob24gQVdTKSAqSHlicmlkIFdmSCouIEFyZSB5b3UgYSBza2lsbGVkIFB5dGhvbiBEZXZlbG9wZXIgd2l0aCBhbiBpbnRlcmVzdCBpbiBEYXRhIC8gTWFjaGluZSBMZWFybmluZz8gWW91IGNvdWxkIGJlIHByb2dyZXNzaW5nIHlvdXIgY2FyZWVyIGF0IGEgdGVjaCBkcml2ZW4gY29tbXVuaWNhdGlvbnMgc29mdHdhcmUgaG91c2UgaW4gYW4gb3BlbiwgY29sbGFib3JhdGl2ZSBlbnZpcm9ubWVudCB3aGVyZSBsZWFybmluZyBhbmQgcGVyc29uYWwgZGV2ZWxvcG1lbnQgYXJlIGtleSBhbmQgdGhlcmUncyBhIHN0cm9uZyBwaXBlbGluZSBvZiBHcmVlbmZpZWxkIHByb2plY3RzIGFzIHdlbGwgYXMgZmxleGlibGUgd29ya2luZy5BLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9weXRob24tZGV2ZWxvcGVyLW1hY2hpbmUtbGVhcm5pbmctc3FsLWRhdGEvNDQ5NDU0ODYiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODMwNzUwLCJkYl9pZCI6MTM0MywidGl0bGUiOiJKYXZhIERldmVsb3BlciBBV1MgRGV2T3BzIC0gVGVjaG5vbG9naXN0IiwiZGVzY3JpcHRpb24iOiJKYXZhIERldmVsb3BlciAvIEZ1bGwgU3RhY2sgU29mdHdhcmUgRW5naW5lZXIgKlVLIFJlbW90ZSBXRkgqLiBBcmUgeW91IGxvb2tpbmcgZm9yIGEgY2hhbGxlbmdpbmcgSmF2YSBEZXZlbG9wZXIgcm9sZSB3aGVyZSB5b3UgYXJlIGFibGUgdG8gdXNlIG1vZGVybiB0ZWNobm9sb2d5LCBjb250aW51YWxseSBkZXZlbG9wIHlvdXIgc2tpbGxzIGFuZCB3b3JrIG9uIGludGVyZXN0aW5nIEdyZWVuZmllbGQgcHJvamVjdHM/IFlvdSBjb3VsZCBiZSAgam9pbmluZyBhIGZhc3QgZ3Jvd2luZyBGaW5UZWNoIHRoYXQncyBjb3JlIHByb2R1Y3QgaGVscHMgY2xpZW50cyB0byByZWR1Y2UgdGhlIGNvc3Qgb2YgdHJhZGluZyBhY3Jvc3MgYSByYW5nZSBvZiBtYXJrZXRzLiBBcyBhIEphdmEgRGV2ZWxvcGVyIHlvdSB3aWxsIGhlbHAgYnVpbGQgdGhlIGNhbGN1bGF0aW9uIGVuZ2luZS4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvamF2YS1kZXZlbG9wZXItYXdzLWRldm9wcy10ZWNobm9sb2dpc3QvNDQ4MzA3NTAiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzkzNDAzLCJkYl9pZCI6MTM0NCwidGl0bGUiOiJDIyBEZXZlbG9wZXIgLyBKdW5pb3IgLk5ldCBTb2Z0d2FyZSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiQyMgRGV2ZWxvcGVyIC8gSnVuaW9yIC5OZXQgU29mdHdhcmUgRW5naW5lZXIgKFNRTCBNYXRocyBTT0xJRCkgKlJlbW90ZSBJbnRlcnZpZXcgV2ZIKi4gV291bGQgeW91IGxpa2UgdG8gcHJvZ3Jlc3MgeW91ciBjYXJlZXIgd29ya2luZyBvbiBjb21wbGV4IGZpbmFuY2lhbCBzeXN0ZW1zIGFzIHBhcnQgb2YgYSBzbWFsbCBBZ2lsZSB0ZWFtIHdoZXJlIHlvdSdsbCBiZSBjb250aW51YWxseSBsZWFybmluZyBhbmQgZGV2ZWxvcGluZyB5b3VyIHNraWxscz9Zb3UgY291bGQgYmUgam9pbmluZyBhIENpdHkgYmFzZWQgQXNzZXQgTWFuYWdlbWVudCBmaXJtLkFzIGEgQyMgRGV2ZWxvcGVyIHlvdSB3aWxsIGRlc2lnbiBhbmQgZGV2ZWxvcCBuZXcgY29tcG9uZW50cyBmb3IgdGhlIHdlYiBiYXNlZCBkYXRhIGFuYWx5dGljcyBwcm9kdWN0LiBZb3UnbGwgYmUuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2MtZGV2ZWxvcGVyLWp1bmlvci1uZXQtc29mdHdhcmUtZW5naW5lZXIvNDQ3OTM0MDMiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzkyODEyLCJkYl9pZCI6MTM0NSwidGl0bGUiOiJKYXZhIERldmVsb3BlciBSRVNUZnVsIEFQSSAtIFJlbW90ZSAvIFdmSCIsImRlc2NyaXB0aW9uIjoiSmF2YSBEZXZlbG9wZXIgLyBCYWNrZW5kIFNvZnR3YXJlIEVuZ2luZWVyIChKYXZhIDExIFJFU1RmdWwgQVBJKSAqUmVtb3RlIC8gV2ZIKi4gQXJlIHlvdSBhIHRlY2hub2xvZ2lzdCBKYXZhIERldmVsb3BlciB3aXRoIGEgZ29vZCBrbm93bGVkZ2Ugb2YgUkVTVGZ1bCBBUElzPyBZb3UgY291bGQgYmUgcHJvZ3Jlc3NpbmcgeW91ciBjYXJlZXIgd2hpbHN0IHdvcmtpbmcgd2l0aCBhIG1vZGVybiB0ZWNoIHN0YWNrIGFuZCBnYWluaW5nIHZhbHVhYmxlICBrbm93bGVkZ2Ugb2YgbW9kZXJuIGRpZ2l0YWwgYmFua2luZyBhdCBhIHRlY2hub2xvZ3kgZHJpdmVuIENoYWxsZW5nZXIgQmFuayB0aGF0IGlzIGV4cGVyaWVuY2luZyBncmVhdCBzdWNjZXNzIGFuZCBjaGFuZ2luZyB0aGUgd2F5IGNvbnN1bWVyIGJhbmtpbmcgb3BlcmF0ZXMgaW4gdGhlIFVLIHRocm91Z2ggdGhlIHVzZSBvZiBhZHZhbmMuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2phdmEtZGV2ZWxvcGVyLXJlc3RmdWwtYXBpLXJlbW90ZS13ZmgvNDQ3OTI4MTIiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzMxNjMzLCJkYl9pZCI6MTE5NywidGl0bGUiOiJTZW5pb3IgQmFja2VuZCBKYXZhIERldmVsb3BlciIsImRlc2NyaXB0aW9uIjoiIFNlbmlvciBCYWNrZW5kIEphdmEgRGV2ZWxvcGVyIFJvbGVzIC0gJiMxNjM7NjAgLSAmIzE2Mzs3NWsgIE5vIFNwb25zb3JzaGlwIHByb3ZpZGVkICBTYWxhcnk6ICYjMTYzOzYwLDAwMCAtICYjMTYzOzc1LDAwMCBKb2IgdGl0bGU6IEJhY2tlbmQgSmF2YSBFbmdpbmVlciBKb2IgdHlwZTogUGVybWFuZW50IExvY2F0aW9uOiBMb25kb24gKENlbnRyYWwpIC0gRnVsbHkgcmVtb3RlIC0gIDQtZGF5IHdlZWssIEdldCBwYWlkIGZvciA1ICBTdGFydDogQVNBUDwuLi4gIiwibG9jYXRpb24iOiJMb25kb24iLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3Nlbmlvci1iYWNrZW5kLWphdmEtZGV2ZWxvcGVyLzQ0NzMxNjMzIiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDcyOTYyMSwiZGJfaWQiOjEzNDYsInRpdGxlIjoiU29mdHdhcmUgRW5naW5lZXIgLSBOb2RlIC0gOTBLIC0gRnVsbHkgUmVtb3RlIiwiZGVzY3JpcHRpb24iOiIgQSB1bmlxdWUgb3Bwb3J0dW5pdHkgaGFzIGFyaXNlbiBmb3IgYSB0YWxlbnRlZCBhbmQgZXhwZXJpZW5jZWQgYmFja2VuZCBlbmdpbmVlciB0byBqb2luIGEgZm9yd2FyZCB0aGlua2luZyBhbmQgaW5ub3ZhdGl2ZSBjb21wYW55LiBBcyBhIGJhY2tlbmQgZW5naW5lZXIgeW91IHdpbGwgZ2V0IGV4cG9zdXJlIHRvIHNvbWUgaW5ub3ZhdGl2ZSBuZXcgdGVjaG5vbG9naWVzIGludm9sdmluZyBtYWNoaW5lIGxlYXJuaW5nLCBub2RlLCBJQUNvZGUgYW5kIEFXUywgdXNpbmcgdGhlc2UgdG9vbHMgdG8gaGVscCBidWlsZCBpbnRlcm5hbCBlbnRlcnByaXNlIHNvbHV0aW9ucy4gQmVpbmcgcmVzcG9uc2libGUgZm9yIGludGVybmFsIGFwcGxpY2F0aW9ucywgeW91IHdpbGwgYWxzbyBoZWxwICBidWlsZCB0b29scyB0aGF0IHdpbGwgYWxsb3cgdXNlcnMgdG8gZWFzaWx5IGNoYW5nLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zb2Z0d2FyZS1lbmdpbmVlci1ub2RlLTkway1mdWxseS1yZW1vdGUvNDQ3Mjk2MjEiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0NzA5OTQ5LCJkYl9pZCI6MTM0NywidGl0bGUiOiJKYXZhIERldmVsb3BlciBBV1MgbWljcm9zZXJ2aWNlcyBTYWFTIiwiZGVzY3JpcHRpb24iOiJKYXZhIERldmVsb3BlciAvIEJhY2tlbmQgU29mdHdhcmUgRW5naW5lZXIgKkh5YnJpZCBXRkgqLiBBcmUgeW91IGEgc2VuaW9yIHRlY2hub2xvZ2lzdCBzZWVraW5nIGEgcm9sZSB3aGVyZSB5b3UgY2FuIHdvcmsgd2l0aCBhbmQgaW5mbHVlbmNlIGEgbW9kZXJuIEphdmEgYmFzZWQgQVdTIG1pY3Jvc2VydmljZXMgdGVjaCBzdGFjaz9Zb3UgY291bGQgYmUgam9pbmluZyBhIGZhc3QgZ3Jvd2luZyBGaW5UZWNoIHRoYXQncyBTYWFTIHNvbHV0aW9ucyBhcmUgaGVscGluZyBIaWdoIFN0cmVldCBiYW5rcyB0byBjb21wZXRlIHdpdGggdGhlIGNoYWxsZW5nZSBmcm9tIHRoZWlyIG9ubGluZSB0ZWNoIGRyaXZlbiByaXZhbHMsIHdvcmtpbmcgb24gY2hhbGxlbmdpbmcgc3lzdGVtcyBhbmQgcHJvZ3Jlc3NpbmcgeW91ciBjYXJlZXIuIEFzIGEgSmF2YSBEZS4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvamF2YS1kZXZlbG9wZXItYXdzLW1pY3Jvc2VydmljZXMtc2Fhcy80NDcwOTk0OSIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ3MDIzMTQsImRiX2lkIjoxMzQ4LCJ0aXRsZSI6IkphdmEgRGV2ZWxvcGVyIC8gSnVuaW9yIFNvZnR3YXJlIEVuZ2luZWVyIiwiZGVzY3JpcHRpb24iOiJKYXZhIERldmVsb3BlciAvIEp1bmlvciBTb2Z0d2FyZSBFbmdpbmVlciAoU3ByaW5nKSAqSHlicmlkIFdmSCouIFdvdWxkIHlvdSBsaWtlIHRvIHdvcmsgb24gY29tcGxleCBhbmQgaW50ZXJlc3Rpbmcgc3lzdGVtcyB0aGF0IHByb3ZpZGUgZGFpbHkgY2hhbGxlbmdlczsgY29sbGFib3JhdGUgd2l0aCBhIGZyaWVuZGx5IGFuZCB1cGJlYXQgdGVhbSBhbmQgZ2FpbiB2YWx1YWJsZSBrbm93bGVkZ2Ugb2YgcmVhbC10aW1lLCBsb3cgbGF0ZW5jeSAgdHJhZGluZyBzeXN0ZW1zP1lvdSBjb3VsZCBiZSBqb2luaW5nIGEgRmluVGVjaCB0aGF0IGhhcyBiZWVuIGNvbnNpc3RlbnRseSB2b3RlZCBhcyBvbmUgb2YgdGhlIFVLcyB0b3AgZW1wbG95ZXJzLiBBcyBhIEphdmEgRGV2ZWxvcGVyIHlvdSB3aWxsIGRlc2lnbiBhbmQgZGV2ZWxvcCBjb21wbGV4IHJlYWwtdGltZS4uLiAiLCJsb2NhdGlvbiI6IkxvbmRvbiIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvamF2YS1kZXZlbG9wZXItanVuaW9yLXNvZnR3YXJlLWVuZ2luZWVyLzQ0NzAyMzE0IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDk0ODExNCwiZGJfaWQiOjEzNDksInRpdGxlIjoiSmF2YSBEZXZlbG9wZXIgLSBTZW5pb3IgTGV2ZWwiLCJkZXNjcmlwdGlvbiI6IiBKQVZBIERFVkVMT1BFUiAtIFNFTklPUiBMRVZFTCBORVcgUEVSTUFORU5UIE9QUE9SVFVOSVRZIEFWQUlMQUJMRSBGT1IgQSBTRU5JT1IgSkFWQSBERVZFTE9QRVIgLSBNQU5DSEVTVEVSIE9SIExJVkVSUE9PTCBQZXJtYW5lbnQgb3Bwb3J0dW5pdHkgZm9yIGEgc2VuaW9yLWxldmVsIEphdmEgZGV2ZWxvcGVyIGluIE1hbmNoZXN0ZXIgb3IgTGl2ZXJwb29sIChiYXNlIGxvY2F0aW9uKSB1c2luZyBuZXcgY3V0dGluZy1lZGdlIHRlY2hub2xvZ3kgIEhhdmUgdGhlIGNoYW5jZSB0byBiZSBzcG9uc29yZWQgdGhyb3VnaCBTQyBTZWN1cml0eSBDbGVhcmFuY2Ugd2hpbHN0IHdvcmtpbmcmIzE2Mzs1MCAtICYjMTYzOzcyayBwbHVzIGEgZ2VuZXJvdXMgYmVuZWZpdHMgLi4uICIsImxvY2F0aW9uIjoiTWFuY2hlc3RlciIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvamF2YS1kZXZlbG9wZXItc2VuaW9yLWxldmVsLzQ0OTQ4MTE0IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDk0ODAxNiwiZGJfaWQiOjEzNTAsInRpdGxlIjoiSmF2YSBEZXZlbG9wZXIgLSBNaWQgTGV2ZWwiLCJkZXNjcmlwdGlvbiI6IiBKQVZBIERFVkVMT1BFUiAtIE1JRCBMRVZFTCBORVcgUEVSTUFORU5UIE9QUE9SVFVOSVRZIEFWQUlMQUJMRSBGT1IgQSBKQVZBIERFVkVMT1BFUiAtIE1BTkNIRVNURVIgT1IgTElWRVJQT09MICBQZXJtYW5lbnQgb3Bwb3J0dW5pdHkgZm9yIGEgbWlkLWxldmVsIEphdmEgZGV2ZWxvcGVyIGluIE1hbmNoZXN0ZXIgb3IgTGl2ZXJwb29sIChiYXNlIGxvY2F0aW9uKSB1c2luZyBuZXcgY3V0dGluZy1lZGdlIHRlY2hub2xvZ3kgIEhhdmUgdGhlIGNoYW5jZSB0byBiZSBzcG9uc29yZWQgdGhyb3VnaCBTQyBTZWN1cml0eSBDbGVhcmFuY2Ugd2hpbHN0IHdvcmtpbmcmIzE2Mzs0MCAtICYjMTYzOzUwayBwbHVzIGEgZ2VuZXJvdXMgYmVuZWZpdHMgcGFja2FnZSBpbmNsLi4uICIsImxvY2F0aW9uIjoiTWFuY2hlc3RlciIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvamF2YS1kZXZlbG9wZXItbWlkLWxldmVsLzQ0OTQ4MDE2IiwiaXNfZnVsbCI6ZmFsc2V9LHsiam9iX2lkIjo0NDk0NzY4MCwiZGJfaWQiOjEzNTEsInRpdGxlIjoiSmF2YSBEZXZlbG9wZXIgLSBMZWFkIExldmVsIiwiZGVzY3JpcHRpb24iOiIgSkFWQSBERVZFTE9QRVIgLSBMRUFEIExFVkVMIE5FVyBQRVJNQU5FTlQgT1BQT1JUVU5JVFkgQVZBSUxBQkxFIEZPUiBBIExFQUQgSkFWQSBERVZFTE9QRVIgLSBNQU5DSEVTVEVSIE9SIExJVkVSUE9PTCBQZXJtYW5lbnQgb3Bwb3J0dW5pdHkgZm9yIGEgbGVhZC1sZXZlbCBKYXZhIGRldmVsb3BlciBpbiBNYW5jaGVzdGVyIG9yIExpdmVycG9vbCAoYmFzZSBsb2NhdGlvbikgdXNpbmcgbmV3IGN1dHRpbmctZWRnZSB0ZWNobm9sb2d5ICBIYXZlIHRoZSBjaGFuY2UgdG8gYmUgc3BvbnNvcmVkIHRocm91Z2ggU0MgU2VjdXJpdHkgQ2xlYXJhbmNlIHdoaWxzdCB3b3JraW5nJiMxNjM7NjUgLSAmIzE2Mzs4NWsgcGx1cyBhIGdlbmVyb3VzIGJlbmVmaXRzIHBhY2thZy4uLiAiLCJsb2NhdGlvbiI6Ik1hbmNoZXN0ZXIiLCJzYWxhcnkiOnsiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL2phdmEtZGV2ZWxvcGVyLWxlYWQtbGV2ZWwvNDQ5NDc2ODAiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0OTQ2Mzg1LCJkYl9pZCI6MTM1MiwidGl0bGUiOiJDTE9VRCBTT0ZUV0FSRSBFTkdJTkVFUiIsImRlc2NyaXB0aW9uIjoiIENMT1VEIFNPRlRXQVJFIEVOR0lORUVSICBKQVZBIC8gU1BSSU5HIC8gQ0xPVUQgLyBTUUwgIEJSQU5EIE5FVyBST0xFIEZPUiBBIENMT1VEIFNPRlRXQVJFIEVOR0lORUVSIFdJVEggQSBMRUFESU5HIE5BVElPTkFMIFNFQ1VSSVRZIENPTVBBTlkgSU4gTUFOQ0hFU1RFUiAgU2FsYXJ5IHJhbmdlcyBmcm9tICYjMTYzOzQwLDAwMCB0byAmIzE2Mzs2NSwwMDBNYW5jaGVzdGVyIGJhc2VkIGluIGFuIGVhc2lseSBhY2Nlc3NpYmxlIGxvY2F0aW9uIChoeWJyaWQgd29ya2luZylXb3JraW5nIHdpdGggdGhlIGxhdGVzdCB0ZWNobm9sb2dpZXMgaW4gYW4gZXhjaXRpbmcgc2VjdG9yRXhjZWxsZW50IHJvbGUgLi4uICIsImxvY2F0aW9uIjoiTWFuY2hlc3RlciIsInNhbGFyeSI6eyJjdXJyZW5jeSI6IkdCUCJ9LCJ1cmwiOiJodHRwczovL3d3dy5yZWVkLmNvLnVrL2pvYnMvY2xvdWQtc29mdHdhcmUtZW5naW5lZXIvNDQ5NDYzODUiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0OTQyNDc1LCJkYl9pZCI6MTM1MywidGl0bGUiOiJTZW5pb3IgSmF2YSBEZXZlbG9wZXIiLCJkZXNjcmlwdGlvbiI6IiBKQVZBIERFVkVMT1BFUiAtIFNFTklPUiAgTkVXIFBFUk1BTkVOVCBPUFBPUlRVTklUWSBBVkFJTEFCTEUgRk9SIEEgU0VOSU9SIEpBVkEgREVWRUxPUEVSIElOIExPTkRPTiAgUGVybWFuZW50IG9wcG9ydHVuaXR5IGZvciBhIHNlbmlvciBKYXZhIGRldmVsb3BlciBpbiBMb25kb24gdXNpbmcgbmV3IGN1dHRpbmctZWRnZSB0ZWNobm9sb2d5ICBIYXZlIHRoZSBjaGFuY2UgdG8gYmUgc3BvbnNvcmVkIHRocm91Z2ggU0MgU2VjdXJpdHkgQ2xlYXJhbmNlIHdoaWxzdCB3b3JraW5nJiMxNjM7NTAgLSAmIzE2Mzs2MGsgcGx1cyBhIGdlbmVyb3VzIGJlbmVmaXRzIHBhY2thZ2UgaW5jbHVkaW5nIHRyYWluaW5nIGJ1ZGdldHMgYW5kIGZsZXhpYmxlIHdvcmtpbmc8L2xpLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3ItamF2YS1kZXZlbG9wZXIvNDQ5NDI0NzUiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0OTQyNDczLCJkYl9pZCI6MTM1NCwidGl0bGUiOiJKYXZhIERldmVsb3BlciIsImRlc2NyaXB0aW9uIjoiIEpBVkEgREVWRUxPUEVSIC0gTUlEIExFVkVMIE5FVyBQRVJNQU5FTlQgT1BQT1JUVU5JVFkgQVZBSUxBQkxFIEZPUiBBIEpBVkEgREVWRUxPUEVSIElOIExPTkRPTiAgIFBlcm1hbmVudCBvcHBvcnR1bml0eSBmb3IgYSBtaWQtbGV2ZWwgSmF2YSBkZXZlbG9wZXIgaW4gTG9uZG9uIHVzaW5nIG5ldyBjdXR0aW5nLWVkZ2UgdGVjaG5vbG9neSAgSGF2ZSB0aGUgY2hhbmNlIHRvIGJlIHNwb25zb3JlZCB0aHJvdWdoIFNDIFNlY3VyaXR5IENsZWFyYW5jZSB3aGlsc3Qgd29ya2luZyYjMTYzOzM1IC0gJiMxNjM7NTBrIHBsdXMgYSBnZW5lcm91cyBiZW5lZml0cyBwYWNrYWdlIGluY2x1ZGluZyB0cmFpbmluZyBidWRnZXRzIGFuZCBmbGV4aWJsZSB3b3JraW5nLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9qYXZhLWRldmVsb3Blci80NDk0MjQ3MyIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ1NzU1MDcsImRiX2lkIjoxMTAzLCJ0aXRsZSI6IlNvZnR3YXJlIERldmVsb3BlciAtIEJhY2tFbmQgLSBKYXZhIC0gU3ByaW5nQm9vdCAtIEdDUCIsImRlc2NyaXB0aW9uIjoiIDxwPjxzdHJvbmc+U29mdHdhcmUgRGV2ZWxvcGVyIC0gQmFja0VuZCAtIEphdmEgLSBTcHJpbmdCb290IC0gR0NQPC9zdHJvbmc+PC9wPiA8cD48c3Ryb25nPkNvbnRyYWN0OiBVbnRpbCAzMSBEZWNlbWJlciAyMDIyPC9zdHJvbmc+PC9wPiA8cD5DdXJyZW50bHkgUmVtb3RlIC0gTG9uZG9uLCBFYXN0IExvbmRvbjwvcD4gPHA+PHN0cm9uZz5SYXRlOiAmIzE2Mzs1MDAgcGVyIERheSBJTlNJREUgSVIzNTwvc3Ryb25nPjwvcD4gPHA+T25lIG9mIHRoZSB3b3JsZOKAmXMgbGVhZGluZyBtYW51ZmFjdHVyaW5nIGFuZCBlbmdpbmVlcmluZyBvcmdhbmlzYXRpb25zIGFuZCBhIGhvdXNlLWhvbGQgbmFtZSBpcyBzZWVraW5nIGEgQmFja2VuZCBTb2Z0d2FyZSBFbmdpbmVlciwgQmFja2VuZCBTb2Z0d2FyZSBEZXZlbG9wZXIgd2l0aCBleHBlcmllbmNlIG9mIEphdmEgPHN0cm9uZz5PUjwvc3Ryb25nPiBLb3RsaW4sIFRlc3QgRHJpdmVuIERldmVsb3BtZW50IC0gVEREIGFuZCBYUCBhbmQvb3IgQWdpbGUgTWV0aG9kb2xvZ2llcyAoU0NSVU0pLjwvcD4gPHA+VGhlIHJvbGUgaXMgd29ya2luZyBvbiBzdGF0ZSBvZiB0aGUgYXJ0IHRyYW5zcG9ydCBzeXN0ZW1zLCBtb2JpbGl0eSBzeXN0ZW1zIHRoYXQgYXJlIGNoYW5naW5nIHRoZSB3YXkgd2UgdHJhdmVsIGFuZCB1c2UgdHJhbnNwb3J0LjwvcD4gPHA+PHN0cm9uZz5NYWluIFRhc2tzICZhbXA7IFJlc3BvbnNpYmlsaXRpZXMgYW5kIEVzc2VudGlhbCBTa2lsbHM8L3N0cm9uZz48L3A+IDxwPlNvZnR3YXJlIEVuZ2luZWVyLCBTb2Z0d2FyZSBEZXZlbG9wZXIgLSBCYWNrZW5kIC0gVERELCBYdHJlbWUgUHJvZ3JhbW1pbmcsIEphdmEsIFNwcmluZyAtIEdDUDwvcD4gPHA+Jmd0OyBQYWlyZWQgcHJvZ3JhbW1pbmc8L3A+IDxwPiZndDsgRXhwZXJpZW5jZSB3aXRoIFNvZnR3YXJlIERldmVsb3BtZW50IHRvb2xzIChJbnRlbGxpSiwgRGF0YUdyaXApLCBCYWNrbG9nIE1hbmFnZW1lbnQgKENBIEFnaWxlIENlbnRyYWwgYWthIFJhbGx5KSwgU291cmNlIENvZGUgTWFuYWdlbWVudCAoR0lUKSwgQ0kvQ0QgKEplbmtpbnMpLCBDbG91ZCBGb3VuZHJ5PC9wPiA8cD4mZ3Q7IEV4cGVyaWVuY2Ugd2l0aCBHb29nbGUgQ2xvdWQgZW52aXJvbm1lbnQuIFNPTElEIGFuZCBDbGVhbiBDb2RlIFByaW5jaXBsZXMuPC9wPiA8cD4mZ3Q7IEphdmEgPHN0cm9uZz5PUjwvc3Ryb25nPiBLb3RsaW4sIFNwcmluZywgU3ByaW5nIEJvb3QsIEdDUDwvcD4gPHA+PHN0cm9uZz5EZXNpcmFibGUgKG5vdCBlc3NlbnRpYWwpIFNraWxsczo8L3N0cm9uZz48L3A+IDxwPlNvZnR3YXJlIEVuZ2luZWVyLCBTb2Z0d2FyZSBEZXZlbG9wZXIgLSBCYWNrZW5kIC0gVERELCBYUCwgSmF2YSwgU3ByaW5nIC0gR0NQPC9wPiA8cD5HcmFkbGUsIFBDRiwgSmF2YVNjcmlwdCwgUmVhY3Q8L3A+ICIsImxvY2F0aW9uIjoiSGFja25leSIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTMwMDAwLjAsInllYXJfbWluIjoxMzAwMDAuMCwiY3VycmVuY3kiOiJHQlAifSwidXJsIjoiaHR0cHM6Ly93d3cucmVlZC5jby51ay9qb2JzL3NvZnR3YXJlLWRldmVsb3Blci1iYWNrZW5kLWphdmEtc3ByaW5nYm9vdC1nY3AvNDQ1NzU1MDciLCJpc19mdWxsIjp0cnVlfSx7ImpvYl9pZCI6NDQ4NjU3OTQsImRiX2lkIjoxMzU1LCJ0aXRsZSI6IlByaW5jaXBhbCBTb2Z0d2FyZSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiIFByaW5jaXBhbCBTb2Z0d2FyZSBFbmdpbmVlciAmIzE2Mzs4MCwwMDAgLSAmIzE2MzsxMDAsMDAwIExvbmRvbiAtIEh5YnJpZCBURUNIIFNUQUNLOiBKYXZhLCBTcHJpbmcgQm9vdCwgU3ByaW5nLCBKYXZhc2NyaXB0LCBSZWFjdCwgS3ViZXJuZXRlcywgQVBJIEFuIEludGVybmF0aW9uYWwgbW9ydGdhZ2UgcHJvdmlkZXIgd2l0aGluIGEgY3V0dGluZy1lZGdlIHNwYWNlIGlzIGhpcmluZyBhIFByaW5jaXBhbCBTb2Z0d2FyZSBFbmdpbmVlciB0byBqb2luIHRoZWlyIGV4cGFuZGluZyBMb25kb24tYmFzZWQgdGVhbS4gVGhpcyBjb21wYW55IGlzIHdvcmtpbmcgb24gYSBsb3Qgb2YgaW50ZXJlc3RpbmcgcHJvamVjdHMgLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9wcmluY2lwYWwtc29mdHdhcmUtZW5naW5lZXIvNDQ4NjU3OTQiLCJpc19mdWxsIjpmYWxzZX0seyJqb2JfaWQiOjQ0ODYzNDM2LCJkYl9pZCI6MTM1NiwidGl0bGUiOiJEYXRhIE9wcyBTb2Z0d2FyZSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiIERhdGEgT3BzIFNvZnR3YXJlIEVuZ2luZWVyICYjMTYzOzY1LDAwMCAtICYjMTYzOzc1LDAwMCBMb25kb24gLSBIeWJyaWQgVEVDSCBTVEFDSzogUHl0aG9uLCBBV1MsIENJL0NELCBTUUwsIFRlcnJhZm9ybSwgSmVua2lucywgR2l0QSByYXBpZGx5IGV4cGFuZGluZyB0cmFuc3BvcnQgY29tcGFueSB3aXRoaW4gYSBjdXR0aW5nLWVkZ2Ugc3BhY2UgaXMgaGlyaW5nIGEgRGF0YSBPcHMgU29mdHdhcmUgRW5naW5lZXIgdG8gam9pbiB0aGVpciBleHBhbmRpbmcgTG9uZG9uLWJhc2VkIHRlYW0uIFRoaXMgY29tcGFueSBpcyB3b3JraW5nIG9uIGEgbG90IG9mIGludGVyZXN0aW5nIHByb2plY3RzIGludm9sdmluZyBtYWNoLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9kYXRhLW9wcy1zb2Z0d2FyZS1lbmdpbmVlci80NDg2MzQzNiIsImlzX2Z1bGwiOmZhbHNlfSx7ImpvYl9pZCI6NDQ3OTEzODMsImRiX2lkIjoxMzU3LCJ0aXRsZSI6IlNlbmlvciBTb2Z0d2FyZSBFbmdpbmVlciIsImRlc2NyaXB0aW9uIjoiIFNlbmlvciBTb2Z0d2FyZSBFbmdpbmVlciAmIzE2Mzs5MCwwMDAgLSAmIzE2Mzs5NSwwMDAgTG9uZG9uIC0gSHlicmlkIFRFQ0ggU1RBQ0s6IFB5dGhvbiwgQVBJLCBSZXN0QVBJLCBFbGFzdGljc2VhcmNoLCBNb25nb0RCLCBOb1NRTCwgRG9ja2VyLCBLYWZrYSwgQVdTLCBHb2xhbmcsIEMmIzQzOyYjNDM7IEFuIEludGVybmF0aW9uYWwgQUkgY29tcGFueSB3aXRoaW4gYSBjdXR0aW5nLWVkZ2Ugc3BhY2UgaXMgaGlyaW5nIGEgU2VuaW9yIFB5dGhvbiBFbmdpbmVlciB0byBqb2luIHRoZWlyIGV4cGFuZGluZyBMb25kb24tYmFzZWQgdGVhbS4gVGhpcyBjb21wYW55IGlzIHdvcmtpbmcgb24gYSBsb3Qgb2YgaW50ZXJlLi4uICIsImxvY2F0aW9uIjoiTG9uZG9uIiwic2FsYXJ5Ijp7ImN1cnJlbmN5IjoiR0JQIn0sInVybCI6Imh0dHBzOi8vd3d3LnJlZWQuY28udWsvam9icy9zZW5pb3Itc29mdHdhcmUtZW5naW5lZXIvNDQ3OTEzODMiLCJpc19mdWxsIjpmYWxzZX1dLCJza2lsbHMiOlt7Im5hbWUiOiJLb3RsaW4iLCJzYWxhcnkiOnsieWVhcl9tYXgiOjEyMDAwMC4wLCJ5ZWFyX21pbiI6MTIwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IkdvTGFuZyIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTIwMDAwLjAsInllYXJfbWluIjoxMjAwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiSmF2YSIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTIwMDAwLjAsInllYXJfbWluIjoxMjAwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiUHl0aG9uIiwic2FsYXJ5Ijp7InllYXJfbWF4IjoxMjAwMDAuMCwieWVhcl9taW4iOjEyMDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJKYXZhIiwic2FsYXJ5Ijp7InllYXJfbWF4IjoxMjAwMDAuMCwieWVhcl9taW4iOjEyMDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJLb3RsaW4iLCJzYWxhcnkiOnsieWVhcl9tYXgiOjEyMDAwMC4wLCJ5ZWFyX21pbiI6MTIwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IlB5dGhvbiIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTIwMDAwLjAsInllYXJfbWluIjoxMjAwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiR29MYW5nIiwic2FsYXJ5Ijp7InllYXJfbWF4IjoxMjAwMDAuMCwieWVhcl9taW4iOjEyMDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJDIyIsInNhbGFyeSI6eyJ5ZWFyX21heCI6ODAwMDAuMCwieWVhcl9taW4iOjY1MDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6Ii5OZXQiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjgwMDAwLjAsInllYXJfbWluIjo2NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJBV1MiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjc1MDAwLjAsInllYXJfbWluIjo2NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJKYXZhIiwic2FsYXJ5Ijp7InllYXJfbWF4Ijo3NTAwMC4wLCJ5ZWFyX21pbiI6NjUwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiQ0kvQ0QiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjc1MDAwLjAsInllYXJfbWluIjo2NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJDKysiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjExMDAwMC4wLCJ5ZWFyX21pbiI6OTAwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiQVdTIiwic2FsYXJ5Ijp7InllYXJfbWF4IjoxMTAwMDAuMCwieWVhcl9taW4iOjkwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IkRvY2tlciIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTEwMDAwLjAsInllYXJfbWluIjo5MDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJKYXZhIiwic2FsYXJ5Ijp7InllYXJfbWF4IjoxMTAwMDAuMCwieWVhcl9taW4iOjkwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6Ikt1YmVybmV0ZXMiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjExMDAwMC4wLCJ5ZWFyX21pbiI6OTAwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiQyIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTEwMDAwLjAsInllYXJfbWluIjo5MDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJHbyIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTEwMDAwLjAsInllYXJfbWluIjo5MDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJBV1MiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjgwMDAwLjAsInllYXJfbWluIjo2NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJDIyIsInNhbGFyeSI6eyJ5ZWFyX21heCI6ODAwMDAuMCwieWVhcl9taW4iOjY1MDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IlNRTCIsInNhbGFyeSI6eyJ5ZWFyX21heCI6ODAwMDAuMCwieWVhcl9taW4iOjY1MDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6Ii5OZXQiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjgwMDAwLjAsInllYXJfbWluIjo2NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJOb2RlSlMiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjE2OTAwMC4wLCJ5ZWFyX21pbiI6MTA0MDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IkFXUyIsInNhbGFyeSI6eyJ5ZWFyX21heCI6MTY5MDAwLjAsInllYXJfbWluIjoxMDQwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiTk9ERUpTIiwic2FsYXJ5Ijp7InllYXJfbWF4IjoxNjkwMDAuMCwieWVhcl9taW4iOjEwNDAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJHbyIsInNhbGFyeSI6eyJ5ZWFyX21heCI6NjUwMDAuMCwieWVhcl9taW4iOjU1MDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6Ii5OZXQiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjY1MDAwLjAsInllYXJfbWluIjo1NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJKYXZhU2NyaXB0Iiwic2FsYXJ5Ijp7InllYXJfbWF4Ijo2NTAwMC4wLCJ5ZWFyX21pbiI6NTUwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiUnVieSIsInNhbGFyeSI6eyJ5ZWFyX21heCI6NjUwMDAuMCwieWVhcl9taW4iOjU1MDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IlNRTCIsInNhbGFyeSI6eyJ5ZWFyX21heCI6NjAwMDAuMCwieWVhcl9taW4iOjUwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IkFXUyIsInNhbGFyeSI6eyJ5ZWFyX21heCI6NjAwMDAuMCwieWVhcl9taW4iOjUwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IlB5dGhvbiIsInNhbGFyeSI6eyJ5ZWFyX21heCI6NjAwMDAuMCwieWVhcl9taW4iOjUwMDAwLjAsImN1cnJlbmN5IjoiR0JQIn19LHsibmFtZSI6IkphdmEiLCJzYWxhcnkiOnsieWVhcl9tYXgiOjg1MDAwLjAsInllYXJfbWluIjo2NTAwMC4wLCJjdXJyZW5jeSI6IkdCUCJ9fSx7Im5hbWUiOiJKYXZhU2NyaXB0Iiwic2FsYXJ5Ijp7InllYXJfbWF4Ijo4NTAwMC4wLCJ5ZWFyX21pbiI6NjUwMDAuMCwiY3VycmVuY3kiOiJHQlAifX0seyJuYW1lIjoiTm9kZS5qcyIsInNhbGFyeSI6e319LHsibmFtZSI6Ii5OZXQiLCJzYWxhcnkiOnt9fSx7Im5hbWUiOiJEb2NrZXIiLCJzYWxhcnkiOnt9fSx7Im5hbWUiOiJqcyIsInNhbGFyeSI6e319LHsibmFtZSI6IlNRTCIsInNhbGFyeSI6e319LHsibmFtZSI6Ii5ORVQiLCJzYWxhcnkiOnt9fV0sInNhbGFyeV9kaXN0Ijp7Im1heGltdW0iOjE2OTAwMC4wLCJtaW5pbXVtIjo1MDAwMC4wLCJjdXJyZW5jeSI6IlRXRCJ9LCJsaW5rcyI6W3sicmVsIjoic2VsZiIsImhyZWYiOiIvIn1dfQ==
  recorded_at: Sun, 12 Dec 2021 12:54:54 GMT
- request:
    method: get
    uri: http://127.0.0.1:4001/
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - 127.0.0.1:4001
      User-Agent:
      - http.rb/5.0.4
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json
      Connection:
      - close
      Content-Length:
      - '75'
    body:
      encoding: ASCII-8BIT
      string: '{"status":"ok","message":"S-killer API v1 at /api/v1/ in development
        mode"}'
  recorded_at: Sun, 12 Dec 2021 12:54:54 GMT
- request:
    method: get
    uri: http://127.0.0.1:4001/api/v1/details/1110
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - 127.0.0.1:4001
      User-Agent:
      - http.rb/5.0.4
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json
      Connection:
      - close
      Content-Length:
      - '1699'
    body:
      encoding: ASCII-8BIT
      string: '{"id":1110,"title":"Backend Developer","description":"Backend Developer<br
        />Brighton / London Remote<br />35-45k Package &#43; Excellent Benefits<br
        /><br />Our client, a fast-growing company, focuses exclusively on delivering
        world-class digital branding and marketing services to the property market.
        Through embracing new technology, they develop first-class websites, mobile
        sites, digital marketing and social  media engagement strategies. Their growing
        portfolio of UK brands, utilise our client''s experience, knowledge and benchmarking
        tools to provide a competitive edge. Through growth, they now have an exciting
        opening for a Backend Developer.<br /><br />As a Backend Developer, you will
        help our client scale up their development operations. To be successful in
        this role, you will need the following skills and traits: <br /><br />* Top
        OO programming skills<br />* Ruby / Ruby on Rails<br />* Front end applications
        design (Python, PHP, JavaScript etc.)<br />* Open source development<br />*
        RESTful web API''s<br />* BDD and TDD<br />* Mongo, MYSQL and NoSQL<br />*
        Linux server administration<br /><br />The successful candidate will be eager
        to learn and can expect a base salary circa 40k, plus a generous benefits
        package and opportunities for career growth. <br /><br />The Certus Recruitment
        Group is an established and experienced specialist consultancy providing sales,
        marketing and IT recruitment services to the business community throughout
        the UK, Europe, North America and Australia.","location":"London","salary":{"year_max":45000.0,"year_min":35000.0,"currency":"GBP"},"url":"https://www.reed.co.uk/jobs/backend-developer/44928092","links":[{"rel":"self","href":"/"}]}'
  recorded_at: Sun, 12 Dec 2021 12:54:54 GMT
- request:
    method: get
    uri: http://127.0.0.1:4001/api/v1/jobs?query=frontend%20engineer
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - 127.0.0.1:4001
      User-Agent:
      - http.rb/5.0.4
  response:
    status:
      code: 202
      message: Accepted
    headers:
      Content-Type:
      - application/json
      Cache-Control:
      - public, max-age=86400
      Date:
      - Sun, 19 Dec 2021 15:20:54 GMT
      X-Rack-Cache:
      - miss
      Connection:
      - close
      Content-Length:
      - '69'
    body:
      encoding: ASCII-8BIT
      string: '{"status":"processing","message":"Processing the extraction request"}'
  recorded_at: Sun, 19 Dec 2021 15:20:54 GMT
recorded_with: VCR 6.0.0
